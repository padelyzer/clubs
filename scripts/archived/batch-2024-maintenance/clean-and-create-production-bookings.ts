import { PrismaClient } from '@prisma/client'
import { v4 as uuidv4 } from 'uuid'

// Use production database URL - Supabase production
const PRODUCTION_DATABASE_URL = 'postgresql://postgres.espmqzfvgzuzpbpsgmpw:ClaudeCodeSuper2@aws-1-us-east-2.pooler.supabase.com:6543/postgres?pgbouncer=true'

const prisma = new PrismaClient({
  datasources: {
    db: {
      url: PRODUCTION_DATABASE_URL
    }
  }
})

async function cleanAndCreateProductionBookings() {
  console.log('üåê Limpiando y creando reservas en PRODUCCI√ìN...')
  
  try {
    await prisma.$connect()
    console.log('‚úÖ Conexi√≥n exitosa a Supabase')
    
    // Find club by slug
    const club = await prisma.club.findFirst({
      where: { 
        slug: 'club-demo-padelyzer'
      },
      include: { Court: true }
    })
    
    if (!club) {
      console.error('‚ùå Club no encontrado')
      return
    }
    
    console.log(`‚úÖ Club encontrado: ${club.name} (${club.id})`)
    console.log(`üèüÔ∏è Canchas: ${club.Court.map(c => c.name).join(', ')}`)
    
    // Delete ALL existing bookings for this club
    console.log('\nüßπ Eliminando TODAS las reservas existentes...')
    
    const deletedBookings = await prisma.booking.deleteMany({
      where: { clubId: club.id }
    })
    
    const deletedGroups = await prisma.bookingGroup.deleteMany({
      where: { clubId: club.id }
    })
    
    console.log(`‚úÖ Eliminadas ${deletedBookings.count} reservas individuales`)
    console.log(`‚úÖ Eliminados ${deletedGroups.count} grupos de reservas`)
    
    // Set date for today (Sept 24, 2025)
    const todayDate = new Date('2025-09-24T06:00:00.000Z')
    console.log(`\nüìÖ Creando reservas para HOY: ${todayDate.toISOString()}`)
    
    // Create fresh bookings
    console.log('\nüÜï Creando nuevas reservas...')
    
    // 1. Individual booking - Ana Mart√≠nez
    const booking1 = await prisma.booking.create({
      data: {
        id: uuidv4(),
        clubId: club.id,
        courtId: club.Court[0].id,
        date: todayDate,
        startTime: '14:00',
        endTime: '15:30',
        duration: 90,
        playerName: 'Ana Mart√≠nez',
        playerEmail: 'ana@example.com',
        playerPhone: '+52 222 123 4567',
        totalPlayers: 4,
        price: 800,
        currency: 'MXN',
        paymentStatus: 'pending',
        status: 'CONFIRMED',
        checkedIn: false,
        splitPaymentEnabled: false,
        notes: 'Reserva individual - pago pendiente',
        createdAt: new Date(),
        updatedAt: new Date()
      }
    })
    
    // 2. Individual booking - Roberto Silva
    const booking2 = await prisma.booking.create({
      data: {
        id: uuidv4(),
        clubId: club.id,
        courtId: club.Court[1].id,
        date: todayDate,
        startTime: '18:00',
        endTime: '19:30',
        duration: 90,
        playerName: 'Roberto Silva',
        playerEmail: 'roberto@example.com',
        playerPhone: '+52 222 444 5678',
        totalPlayers: 4,
        price: 800,
        currency: 'MXN',
        paymentStatus: 'completed',
        paymentType: 'ONLINE_FULL',
        status: 'CONFIRMED',
        checkedIn: false,
        splitPaymentEnabled: false,
        notes: 'Reserva individual - ya pagada',
        createdAt: new Date(),
        updatedAt: new Date()
      }
    })
    
    // 3. Group booking
    const groupId = uuidv4()
    const groupBooking = await prisma.bookingGroup.create({
      data: {
        id: groupId,
        clubId: club.id,
        date: todayDate,
        startTime: '16:00',
        endTime: '17:30',
        duration: 90,
        playerName: 'Carlos L√≥pez',
        playerEmail: 'carlos@example.com',
        playerPhone: '+52 222 987 6543',
        totalPlayers: 8,
        price: 1600,
        currency: 'MXN',
        status: 'CONFIRMED',
        splitPaymentEnabled: true,
        splitPaymentCount: 4,
        notes: 'Reserva grupal - 2 canchas',
        createdAt: new Date(),
        updatedAt: new Date()
      }
    })
    
    // Bookings for the group
    await prisma.booking.create({
      data: {
        id: uuidv4(),
        clubId: club.id,
        courtId: club.Court[0].id,
        bookingGroupId: groupId,
        date: todayDate,
        startTime: '16:00',
        endTime: '17:30',
        duration: 90,
        playerName: 'Carlos L√≥pez',
        playerEmail: 'carlos@example.com',
        playerPhone: '+52 222 987 6543',
        totalPlayers: 4,
        price: 800,
        currency: 'MXN',
        paymentStatus: 'pending',
        status: 'CONFIRMED',
        checkedIn: false,
        splitPaymentEnabled: true,
        splitPaymentCount: 4,
        notes: 'Parte 1 de reserva grupal',
        createdAt: new Date(),
        updatedAt: new Date()
      }
    })
    
    await prisma.booking.create({
      data: {
        id: uuidv4(),
        clubId: club.id,
        courtId: club.Court[2].id, // Use court 3
        bookingGroupId: groupId,
        date: todayDate,
        startTime: '16:00',
        endTime: '17:30',
        duration: 90,
        playerName: 'Mar√≠a Gonz√°lez',
        playerEmail: 'maria@example.com',
        playerPhone: '+52 222 555 1234',
        totalPlayers: 4,
        price: 800,
        currency: 'MXN',
        paymentStatus: 'pending',
        status: 'CONFIRMED',
        checkedIn: false,
        splitPaymentEnabled: true,
        splitPaymentCount: 4,
        notes: 'Parte 2 de reserva grupal',
        createdAt: new Date(),
        updatedAt: new Date()
      }
    })
    
    console.log('\n‚úÖ ¬°Reservas creadas exitosamente en PRODUCCI√ìN!')
    console.log('\nüìù Resumen de reservas creadas:')
    console.log(`1. üî∏ Ana Mart√≠nez`)
    console.log(`   üìç ${club.Court[0].name} | ‚è∞ 14:00-15:30 | üí∞ Pago pendiente`)
    
    console.log(`\n2. üî∏ Roberto Silva`)
    console.log(`   üìç ${club.Court[1].name} | ‚è∞ 18:00-19:30 | ‚úÖ Pagado`)
    
    console.log(`\n3. üî∂ Carlos L√≥pez - GRUPO`)
    console.log(`   üìç ${club.Court[0].name}, ${club.Court[2].name} | ‚è∞ 16:00-17:30 | üë• Grupal`)
    
    console.log('\nüéØ Ahora deber√≠as ver EXACTAMENTE estas 3 reservas en:')
    console.log('   https://www.padelyzer.app/c/club-demo-padelyzer/dashboard/bookings')
    
    await prisma.$disconnect()
    
  } catch (error) {
    console.error('‚ùå Error:', error)
    await prisma.$disconnect()
  }
}

cleanAndCreateProductionBookings().catch(console.error)