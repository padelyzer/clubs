import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function checkDateRange() {
  try {
    console.log('üîç Verificando rango de fechas de las reservas...')
    console.log('=' .repeat(60))

    // Obtener rango de fechas
    const dateRange = await prisma.booking.aggregate({
      where: {
        status: { not: 'CANCELLED' }
      },
      _min: { date: true },
      _max: { date: true },
      _count: true
    })

    // Obtener distribuci√≥n por mes
    const bookingsByMonth = await prisma.booking.groupBy({
      by: ['date'],
      _count: true,
      where: {
        status: { not: 'CANCELLED' }
      },
      orderBy: { date: 'asc' }
    })

    // Agrupar por mes-a√±o
    const monthlyDistribution: Record<string, number> = {}
    bookingsByMonth.forEach(booking => {
      const date = new Date(booking.date)
      const monthKey = `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}`
      monthlyDistribution[monthKey] = (monthlyDistribution[monthKey] || 0) + booking._count
    })

    console.log('üìÖ RANGO DE FECHAS:')
    console.log('-' .repeat(40))
    console.log(`üü¢ Primera reserva: ${dateRange._min.date?.toLocaleDateString('es-ES', { 
      weekday: 'long', 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric' 
    })}`)
    console.log(`üî¥ √öltima reserva: ${dateRange._max.date?.toLocaleDateString('es-ES', { 
      weekday: 'long', 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric' 
    })}`)
    console.log(`üìä Total reservas: ${dateRange._count}`)

    // Calcular duraci√≥n del per√≠odo
    if (dateRange._min.date && dateRange._max.date) {
      const daysDiff = Math.ceil((dateRange._max.date.getTime() - dateRange._min.date.getTime()) / (1000 * 60 * 60 * 24))
      console.log(`‚è±Ô∏è  Per√≠odo total: ${daysDiff} d√≠as`)
      console.log(`üìà Promedio: ${(dateRange._count / daysDiff).toFixed(1)} reservas por d√≠a`)
    }

    console.log('\nüìä DISTRIBUCI√ìN POR MES:')
    console.log('-' .repeat(40))
    Object.entries(monthlyDistribution)
      .sort(([a], [b]) => a.localeCompare(b))
      .forEach(([monthKey, count]) => {
        const [year, month] = monthKey.split('-')
        const monthName = new Date(parseInt(year), parseInt(month) - 1).toLocaleDateString('es-ES', { 
          month: 'long', 
          year: 'numeric' 
        })
        console.log(`${monthName}: ${count} reservas`)
      })

    console.log('=' .repeat(60))

  } catch (error) {
    console.error('‚ùå Error:', error)
  } finally {
    await prisma.$disconnect()
  }
}

checkDateRange()