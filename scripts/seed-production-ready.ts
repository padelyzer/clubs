#!/usr/bin/env tsx

/**
 * Script de Seed COMPLETO para Base de Datos de Desarrollo
 * 
 * üéØ CARACTER√çSTICAS INCLUIDAS:
 * - Club principal con configuraci√≥n completa
 * - 10 usuarios mexicanos con datos realistas
 * - 5 canchas configuradas ($500/hora)
 * - Stripe configurado autom√°ticamente con claves de prueba
 * - TODOS los m√©todos de pago activados (Stripe, Efectivo, Transferencia, Terminal)
 * - Sistema de instructores individuales (por hora y mensual)
 * - Precios configurados para clases (individual, grupal, cl√≠nica)
 * - Transacciones de ejemplo
 * - Usuario administrador
 * 
 * üíª USO: 
 *   npm run seed:complete
 *   o
 *   npx tsx scripts/seed-production-ready.ts
 * 
 * ‚ö†Ô∏è  ATENCI√ìN: Este script BORRA TODOS los datos existentes
 */

import { PrismaClient } from '@prisma/client'
import fetch from 'node-fetch'

const prisma = new PrismaClient()

// Configuraci√≥n del Club y Stripe
const CLUB_CONFIG = {
  id: 'default-club-id',
  name: 'Club P√°del M√©xico',
  slug: 'club-padel-mexico',
  email: 'info@clubpadel.mx',
  phone: '55 1234 5678',
  address: 'Av. Paseo de la Reforma 123',
  city: 'Ciudad de M√©xico',
  state: 'CDMX',
  country: 'M√©xico',
  postalCode: '06500',
  website: 'https://clubpadel.mx',
  description: 'El mejor club de p√°del en Ciudad de M√©xico. Instalaciones de primera clase con tecnolog√≠a moderna.'
}

// Claves Stripe de Prueba
const STRIPE_CONFIG = {
  publishableKey: 'pk_test_51RpHFZIyZijLvZlA2a1KdaWBtERNev1m0y01jDOPYJ7cicby1jomAZlDI1bkFkaWGJlUWPAjU1AZvmUgUTZJPyLl00GSJeNbyV',
  secretKey: 'sk_test_51RpHFZIyZijLvZlA0aBTkhZsZqiXtIwBErPU4vw2G3jyWriUJBKKPo0kM3Sh03oWXgvXQ99hFp7DJksAhYmDpBZn00Z1Tv3g6w',
  environment: 'test'
}

// Base URL de la aplicaci√≥n
const APP_URL = process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3002'

// Nombres mexicanos para usuarios de prueba
const MEXICAN_NAMES = [
  { firstName: 'Mar√≠a', lastName: 'Gonz√°lez', email: 'maria.gonzalez@email.com', phone: '55 1234 5678' },
  { firstName: 'Jos√©', lastName: 'Rodr√≠guez', email: 'jose.rodriguez@email.com', phone: '55 2345 6789' },
  { firstName: 'Ana', lastName: 'Mart√≠nez', email: 'ana.martinez@email.com', phone: '55 3456 7890' },
  { firstName: 'Carlos', lastName: 'L√≥pez', email: 'carlos.lopez@email.com', phone: '55 4567 8901' },
  { firstName: 'Laura', lastName: 'Hern√°ndez', email: 'laura.hernandez@email.com', phone: '55 5678 9012' },
  { firstName: 'Miguel', lastName: 'Garc√≠a', email: 'miguel.garcia@email.com', phone: '55 6789 0123' },
  { firstName: 'Sof√≠a', lastName: 'Jim√©nez', email: 'sofia.jimenez@email.com', phone: '55 7890 1234' },
  { firstName: 'Diego', lastName: 'Ruiz', email: 'diego.ruiz@email.com', phone: '55 8901 2345' },
  { firstName: 'Valentina', lastName: 'Torres', email: 'valentina.torres@email.com', phone: '55 9012 3456' },
  { firstName: 'Sebasti√°n', lastName: 'Flores', email: 'sebastian.flores@email.com', phone: '55 0123 4567' }
]

const PADEL_LEVELS = ['Principiante', 'Intermedio', 'Avanzado', 'Profesional']
const GENDERS = ['male', 'female']

async function clearDatabase() {
  console.log('üßπ Limpiando base de datos...')
  
  // Delete in correct order due to foreign key constraints
  await prisma.paymentProvider.deleteMany()
  await prisma.classBooking.deleteMany()
  await prisma.class.deleteMany()
  await prisma.classInstructor.deleteMany()
  await prisma.transaction.deleteMany()
  await prisma.booking.deleteMany()
  await prisma.player.deleteMany()
  await prisma.court.deleteMany()
  await prisma.classPricing.deleteMany()
  await prisma.clubSettings.deleteMany()
  await prisma.user.deleteMany()
  await prisma.club.deleteMany()
  
  console.log('‚úÖ Base de datos limpiada')
}

async function createClub() {
  console.log('üè¢ Creando club principal...')
  
  const club = await prisma.club.create({
    data: {
      ...CLUB_CONFIG,
      active: true,
      status: 'APPROVED',
      // Stripe Configuration
      stripeAccountId: 'acct_test_padel_mexico',
      stripeOnboardingCompleted: true,
      stripePayoutsEnabled: true,
      stripeChargesEnabled: true,
      stripeDetailsSubmitted: true,
      stripeCommissionRate: 2.9 // 2.9% commission
    }
  })
  
  console.log(`‚úÖ Club creado: ${club.name}`)
  return club
}

async function createClubSettings(clubId: string) {
  console.log('‚öôÔ∏è Configurando settings del club...')
  
  const settings = await prisma.clubSettings.create({
    data: {
      clubId: clubId,
      slotDuration: 90,
      bufferTime: 15,
      advanceBookingDays: 30,
      allowSameDayBooking: true,
      timezone: 'America/Mexico_City',
      currency: 'MXN',
      taxIncluded: true,
      taxRate: 16.0, // 16% IVA M√©xico
      cancellationFee: 0.0,
      noShowFee: 50.0,
      // Todos los m√©todos de pago activados
      acceptCash: true,
      terminalEnabled: true,
      terminalId: 'TERM_001_PADEL_MX',
      transferEnabled: true,
      bankName: 'BBVA M√©xico',
      accountNumber: '0123456789',
      clabe: '012180001234567890',
      accountHolder: 'Club P√°del M√©xico S.A. de C.V.'
    }
  })
  
  console.log('‚úÖ Settings configurados: Todos los m√©todos de pago activados')
  return settings
}

async function createStripeProvider(clubId: string) {
  console.log('üí≥ Configurando proveedor Stripe...')
  
  const stripeProvider = await prisma.paymentProvider.create({
    data: {
      clubId: clubId,
      providerId: 'stripe',
      name: 'Stripe',
      enabled: true,
      config: {
        publicKey: STRIPE_CONFIG.publishableKey,
        secretKey: STRIPE_CONFIG.secretKey,
        environment: STRIPE_CONFIG.environment
      },
      fees: {
        fixed: 30, // 30 centavos
        percentage: 2.9 // 2.9%
      }
    }
  })
  
  console.log('‚úÖ Stripe configurado con claves de prueba')
  return stripeProvider
}

async function createCourts(clubId: string) {
  console.log('üéæ Creando 5 canchas...')
  
  const courts = []
  const courtNames = ['Cancha Central', 'Cancha Premium', 'Cancha VIP', 'Cancha Norte', 'Cancha Sur']
  
  for (let i = 0; i < 5; i++) {
    const court = await prisma.court.create({
      data: {
        clubId: clubId,
        name: courtNames[i],
        type: 'PADEL',
        indoor: i < 2, // Primeras 2 canchas techadas
        order: i + 1,
        active: true
      }
    })
    courts.push(court)
    console.log(`‚úÖ ${court.name} creada (${court.indoor ? 'Techada' : 'Al aire libre'})`)
  }
  
  return courts
}

async function createPricing(clubId: string) {
  console.log('üí∞ Configurando precios...')
  
  const pricing = await prisma.classPricing.create({
    data: {
      clubId: clubId,
      // Precios de clases (en centavos)
      individualPrice: 80000, // $800 MXN
      groupPrice: 50000,      // $500 MXN por persona
      clinicPrice: 35000,     // $350 MXN por persona
      // Configuraci√≥n global de instructores
      instructorPaymentType: 'HOURLY',
      instructorHourlyRate: 50000, // $500 MXN por hora
      instructorPercentage: 60.0,
      instructorFixedRate: 0,
      // Descuentos por volumen
      enableBulkDiscount: true,
      bulkDiscountThreshold: 10,
      bulkDiscountPercentage: 15.0
    }
  })
  
  console.log('‚úÖ Precios configurados: $800 individual, $500 grupo, $350 cl√≠nica')
  return pricing
}

async function createUsers(clubId: string) {
  console.log('üë• Creando 10 usuarios mexicanos...')
  
  const users = []
  
  for (let i = 0; i < MEXICAN_NAMES.length; i++) {
    const userData = MEXICAN_NAMES[i]
    const level = PADEL_LEVELS[Math.floor(Math.random() * PADEL_LEVELS.length)]
    const gender = GENDERS[Math.floor(Math.random() * GENDERS.length)]
    
    const player = await prisma.player.create({
      data: {
        clubId: clubId,
        name: `${userData.firstName} ${userData.lastName}`,
        email: userData.email,
        phone: userData.phone,
        phoneVerified: Math.random() > 0.3,
        birthDate: new Date(1985 + Math.floor(Math.random() * 20), Math.floor(Math.random() * 12), Math.floor(Math.random() * 28) + 1),
        level: level,
        gender: gender,
        clientNumber: `PAD${String(i + 1).padStart(3, '0')}`,
        memberSince: new Date(2023, Math.floor(Math.random() * 12), Math.floor(Math.random() * 28) + 1),
        totalBookings: Math.floor(Math.random() * 50),
        totalSpent: Math.floor(Math.random() * 50000) * 100,
        active: true
      }
    })
    
    users.push(player)
    console.log(`‚úÖ ${player.name} - ${player.level} (${player.clientNumber})`)
  }
  
  console.log(`‚úÖ ${users.length} usuarios creados`)
  return users
}

async function createInstructors(clubId: string) {
  console.log('üéì Creando instructores (pago individual: por hora y mensual)...')
  
  const instructorsData = [
    {
      name: 'Roberto S√°nchez',
      email: 'roberto.sanchez@clubpadel.mx',
      phone: '55 1111 2222',
      bio: 'Instructor certificado con 8 a√±os de experiencia. Especializado en t√©cnica y t√°ctica avanzada.',
      specialties: ['T√©cnica', 'T√°ctica', 'Competici√≥n'],
      paymentType: 'HOURLY',
      hourlyRate: 60000, // $600/hora
      monthlyRate: 0
    },
    {
      name: 'Patricia Morales',
      email: 'patricia.morales@clubpadel.mx',
      phone: '55 3333 4444',
      bio: 'Ex-jugadora profesional. Enfoque en desarrollo de principiantes y t√©cnica fundamental.',
      specialties: ['Principiantes', 'T√©cnica b√°sica', 'Coordinaci√≥n'],
      paymentType: 'MONTHLY',
      hourlyRate: 0,
      monthlyRate: 2500000 // $25,000 mensual
    },
    {
      name: 'Fernando Castillo',
      email: 'fernando.castillo@clubpadel.mx',
      phone: '55 5555 6666',
      bio: 'Especialista en preparaci√≥n f√≠sica y entrenamiento de alto rendimiento.',
      specialties: ['Preparaci√≥n f√≠sica', 'Alto rendimiento', 'Competici√≥n'],
      paymentType: 'HOURLY',
      hourlyRate: 55000, // $550/hora
      monthlyRate: 0
    },
    {
      name: 'Andrea V√°zquez',
      email: 'andrea.vazquez@clubpadel.mx',
      phone: '55 7777 8888',
      bio: 'Instructora especializada en cl√≠nicas y entrenamientos grupales.',
      specialties: ['Cl√≠nicas', 'Grupos', 'T√©cnica intermedia'],
      paymentType: 'MONTHLY',
      hourlyRate: 0,
      monthlyRate: 2000000 // $20,000 mensual
    }
  ]
  
  const instructors = []
  
  for (const data of instructorsData) {
    const instructor = await prisma.classInstructor.create({
      data: {
        clubId: clubId,
        ...data,
        active: true
      }
    })
    
    instructors.push(instructor)
    const paymentDisplay = instructor.paymentType === 'HOURLY' 
      ? `$${instructor.hourlyRate/100}/hora` 
      : `$${instructor.monthlyRate/100}/mes`
    console.log(`‚úÖ ${instructor.name} - ${paymentDisplay}`)
  }
  
  return instructors
}

async function createSampleTransactions(clubId: string, players: any[]) {
  console.log('üí≥ Creando transacciones de ejemplo...')
  
  const transactions = []
  const currentDate = new Date()
  
  // Ingresos de ejemplo
  for (let i = 0; i < 15; i++) {
    const randomPlayer = players[Math.floor(Math.random() * players.length)]
    const amount = [80000, 50000, 35000][Math.floor(Math.random() * 3)]
    const category = ['BOOKING', 'CLASS', 'MEMBERSHIP'][Math.floor(Math.random() * 3)]
    
    const transaction = await prisma.transaction.create({
      data: {
        clubId: clubId,
        type: 'INCOME',
        category: category,
        amount: amount,
        currency: 'MXN',
        description: `Pago de ${randomPlayer.name} - ${category === 'CLASS' ? 'Clase de p√°del' : category === 'BOOKING' ? 'Reserva de cancha' : 'Membres√≠a'}`,
        date: new Date(currentDate.getTime() - Math.random() * 30 * 24 * 60 * 60 * 1000),
        reference: `TXN-${Date.now()}-${i}`,
        playerId: randomPlayer.id
      }
    })
    
    transactions.push(transaction)
  }
  
  // Gastos de ejemplo
  const expenseCategories = ['MAINTENANCE', 'UTILITIES', 'EQUIPMENT', 'MARKETING']
  for (let i = 0; i < 8; i++) {
    const category = expenseCategories[Math.floor(Math.random() * expenseCategories.length)]
    const amount = Math.floor(Math.random() * 10000 + 2000) * 100
    
    const transaction = await prisma.transaction.create({
      data: {
        clubId: clubId,
        type: 'EXPENSE',
        category: category,
        amount: amount,
        currency: 'MXN',
        description: `Gasto de ${category.toLowerCase()} - ${new Date().toLocaleDateString('es-MX', { month: 'long' })}`,
        date: new Date(currentDate.getTime() - Math.random() * 30 * 24 * 60 * 60 * 1000),
        reference: `EXP-${Date.now()}-${i}`
      }
    })
    
    transactions.push(transaction)
  }
  
  console.log(`‚úÖ ${transactions.length} transacciones creadas`)
  return transactions
}

async function createAdminUser(clubId: string) {
  console.log('üë®‚Äçüíº Creando usuario administrador...')
  
  const adminUser = await prisma.user.create({
    data: {
      name: 'Administrador del Club',
      email: 'admin@clubpadel.mx',
      role: 'CLUB_OWNER',
      clubId: clubId,
      active: true
    }
  })
  
  console.log(`‚úÖ Usuario admin creado: ${adminUser.email}`)
  return adminUser
}

async function main() {
  console.log('üöÄ INICIANDO SEED COMPLETO Y LISTO PARA PRODUCCI√ìN')
  console.log('=' .repeat(80))
  console.log('')
  console.log('üì¶ CONTENIDO DEL SEED:')
  console.log('  üè¢ Club completo con configuraci√≥n mexicana')
  console.log('  üë• 10 usuarios con nombres mexicanos')
  console.log('  üéæ 5 canchas ($500/hora)')
  console.log('  üí≥ Stripe configurado autom√°ticamente')
  console.log('  üí∞ TODOS los m√©todos de pago activados')
  console.log('  üéì Sistema de instructores individual (por hora/mensual)')
  console.log('  üìä Transacciones de ejemplo')
  console.log('  üë®‚Äçüíº Usuario administrador')
  console.log('')
  console.log('‚ö†Ô∏è  ATENCI√ìN: Este proceso BORRAR√Å todos los datos existentes')
  console.log('')
  
  // Peque√±a pausa para que el usuario pueda leer
  await new Promise(resolve => setTimeout(resolve, 2000))
  
  try {
    // 1. Limpiar base de datos
    await clearDatabase()
    
    // 2. Crear entidades principales
    const club = await createClub()
    const settings = await createClubSettings(club.id)
    const stripeProvider = await createStripeProvider(club.id)
    const courts = await createCourts(club.id)
    const pricing = await createPricing(club.id)
    const users = await createUsers(club.id)
    const instructors = await createInstructors(club.id)
    const transactions = await createSampleTransactions(club.id, users)
    const adminUser = await createAdminUser(club.id)
    
    console.log('')
    console.log('=' .repeat(80))
    console.log('üéâ ¬°SEED COMPLETADO EXITOSAMENTE!')
    console.log('')
    console.log('üìä RESUMEN COMPLETO:')
    console.log(`üè¢ Club: ${club.name}`)
    console.log(`üéæ Canchas: ${courts.length} (2 techadas, 3 al aire libre)`)
    console.log(`üë• Usuarios: ${users.length} (nombres mexicanos)`)
    console.log(`üéì Instructores: ${instructors.length} (2 por hora, 2 mensual)`)
    console.log(`üí≥ Transacciones: ${transactions.length}`)
    console.log(`üë®‚Äçüíº Admin: ${adminUser.email}`)
    console.log('')
    console.log('üí≥ STRIPE CONFIGURADO:')
    console.log(`üìù Publishable: ${STRIPE_CONFIG.publishableKey}`)
    console.log(`üîê Secret: ${STRIPE_CONFIG.secretKey.substring(0, 20)}...`)
    console.log(`üåç Environment: ${STRIPE_CONFIG.environment}`)
    console.log('')
    console.log('üí∞ M√âTODOS DE PAGO ACTIVADOS:')
    console.log('‚úÖ Stripe (Tarjetas de cr√©dito/d√©bito)')
    console.log('‚úÖ Efectivo')
    console.log('‚úÖ Transferencia bancaria (BBVA M√©xico)')
    console.log('‚úÖ Terminal POS (TERM_001_PADEL_MX)')
    console.log('')
    console.log('üéì INSTRUCTORES CON PAGO INDIVIDUAL:')
    instructors.forEach(inst => {
      const payment = inst.paymentType === 'HOURLY' 
        ? `$${inst.hourlyRate/100}/hora` 
        : `$${inst.monthlyRate/100}/mes`
      console.log(`   üë®‚Äçüè´ ${inst.name} - ${payment}`)
    })
    console.log('')
    console.log('üè¶ DATOS BANCARIOS CONFIGURADOS:')
    console.log('   üèõÔ∏è  Banco: BBVA M√©xico')
    console.log('   üìÑ Cuenta: 0123456789')
    console.log('   üî¢ CLABE: 012180001234567890')
    console.log('   üìã Titular: Club P√°del M√©xico S.A. de C.V.')
    console.log('')
    console.log('üöÄ ¬°TU APLICACI√ìN EST√Å LISTA!')
    console.log(`üîó ${APP_URL}`)
    console.log('')
    console.log('üí° PR√ìXIMOS PASOS:')
    console.log('   1. Acceder a la aplicaci√≥n')
    console.log('   2. Probar reservas con diferentes m√©todos de pago')
    console.log('   3. Crear clases y probar sistema de instructores')
    console.log('   4. Verificar dashboard financiero')
    console.log('')
    console.log('üìß CREDENCIALES ADMIN:')
    console.log(`   Email: ${adminUser.email}`)
    console.log('   (No password - desarrollo)')
    console.log('')
    console.log('=' .repeat(80))
    
  } catch (error) {
    console.error('')
    console.error('‚ùå ERROR DURANTE EL SEED:')
    console.error(error)
    console.error('')
    console.error('üí° Si encuentras errores de base de datos:')
    console.error('   1. Verifica que PostgreSQL est√© ejecut√°ndose')
    console.error('   2. Ejecuta: npm run db:reset')
    console.error('   3. Vuelve a intentar este seed')
    console.error('')
    throw error
  } finally {
    await prisma.$disconnect()
  }
}

// Ejecutar el seed
if (require.main === module) {
  main()
    .catch((e) => {
      console.error(e)
      process.exit(1)
    })
}

export default main