#!/usr/bin/env tsx

/**
 * Script de Seed Completo para Base de Datos de Desarrollo
 * 
 * Crea datos de prueba para desarrollo:
 * - Club principal con Stripe configurado
 * - 10 usuarios con nombres mexicanos
 * - 5 canchas configuradas ($500/hora)
 * - Configuraci√≥n de pagos completa
 * - Instructores de ejemplo
 * 
 * Uso: npx tsx scripts/seed-dev-complete.ts
 */

import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

// Nombres mexicanos para usuarios de prueba
const MEXICAN_NAMES = [
  { firstName: 'Mar√≠a', lastName: 'Gonz√°lez', email: 'maria.gonzalez@email.com', phone: '55 1234 5678' },
  { firstName: 'Jos√©', lastName: 'Rodr√≠guez', email: 'jose.rodriguez@email.com', phone: '55 2345 6789' },
  { firstName: 'Ana', lastName: 'Mart√≠nez', email: 'ana.martinez@email.com', phone: '55 3456 7890' },
  { firstName: 'Carlos', lastName: 'L√≥pez', email: 'carlos.lopez@email.com', phone: '55 4567 8901' },
  { firstName: 'Laura', lastName: 'Hern√°ndez', email: 'laura.hernandez@email.com', phone: '55 5678 9012' },
  { firstName: 'Miguel', lastName: 'Garc√≠a', email: 'miguel.garcia@email.com', phone: '55 6789 0123' },
  { firstName: 'Sof√≠a', lastName: 'Jim√©nez', email: 'sofia.jimenez@email.com', phone: '55 7890 1234' },
  { firstName: 'Diego', lastName: 'Ruiz', email: 'diego.ruiz@email.com', phone: '55 8901 2345' },
  { firstName: 'Valentina', lastName: 'Torres', email: 'valentina.torres@email.com', phone: '55 9012 3456' },
  { firstName: 'Sebasti√°n', lastName: 'Flores', email: 'sebastian.flores@email.com', phone: '55 0123 4567' }
]

// Stripe Keys
const STRIPE_CONFIG = {
  publishableKey: 'pk_test_51RpHFZIyZijLvZlA2a1KdaWBtERNev1m0y01jDOPYJ7cicby1jomAZlDI1bkFkaWGJlUWPAjU1AZvmUgUTZJPyLl00GSJeNbyV',
  secretKey: 'sk_test_51RpHFZIyZijLvZlA0aBTkhZsZqiXtIwBErPU4vw2G3jyWriUJBKKPo0kM3Sh03oWXgvXQ99hFp7DJksAhYmDpBZn00Z1Tv3g6w'
}

// Niveles de p√°del
const PADEL_LEVELS = ['Principiante', 'Intermedio', 'Avanzado', 'Profesional']

// G√©neros
const GENDERS = ['male', 'female']

async function clearDatabase() {
  console.log('üßπ Limpiando base de datos...')
  
  // Delete in correct order due to foreign key constraints
  await prisma.classBooking.deleteMany()
  await prisma.class.deleteMany()
  await prisma.classInstructor.deleteMany()
  await prisma.transaction.deleteMany()
  await prisma.booking.deleteMany()
  await prisma.player.deleteMany()
  await prisma.court.deleteMany()
  await prisma.classPricing.deleteMany()
  await prisma.clubSettings.deleteMany()
  await prisma.user.deleteMany()
  await prisma.club.deleteMany()
  
  console.log('‚úÖ Base de datos limpiada')
}

async function createClub() {
  console.log('üè¢ Creando club principal...')
  
  const club = await prisma.club.create({
    data: {
      id: 'default-club-id',
      name: 'Club P√°del M√©xico',
      slug: 'club-padel-mexico',
      email: 'info@clubpadel.mx',
      phone: '55 1234 5678',
      address: 'Av. Paseo de la Reforma 123',
      city: 'Ciudad de M√©xico',
      state: 'CDMX',
      country: 'M√©xico',
      postalCode: '06500',
      website: 'https://clubpadel.mx',
      description: 'El mejor club de p√°del en Ciudad de M√©xico. Instalaciones de primera clase con tecnolog√≠a moderna.',
      active: true,
      // Stripe Configuration
      stripeAccountId: 'acct_test_padel_mexico',
      stripeOnboardingCompleted: true,
      stripePayoutsEnabled: true,
      stripeChargesEnabled: true,
      stripeDetailsSubmitted: true,
      stripeCommissionRate: 2.9, // 2.9% commission
      updatedAt: new Date()
    }
  })
  
  console.log(`‚úÖ Club creado: ${club.name}`)
  return club
}

async function createClubSettings(clubId: string) {
  console.log('‚öôÔ∏è Configurando settings del club...')
  
  const settings = await prisma.clubSettings.create({
    data: {
      clubId: clubId,
      slotDuration: 90,          // 90 minutos por slot
      bufferTime: 15,            // 15 minutos entre slots
      advanceBookingDays: 30,    // 30 d√≠as de anticipaci√≥n
      allowSameDayBooking: true,
      timezone: 'America/Mexico_City',
      currency: 'MXN',
      taxIncluded: true,
      taxRate: 16.0,             // 16% IVA M√©xico
      cancellationFee: 0.0,
      noShowFee: 50.0,
      // Payment Settings
      acceptCash: true,
      terminalEnabled: true,
      terminalId: 'TERM_001_PADEL_MX',
      updatedAt: new Date()
    }
  })
  
  console.log('‚úÖ Settings configurados: $500/hora, Terminal POS, Efectivo')
  return settings
}

async function createCourts(clubId: string) {
  console.log('üéæ Creando 5 canchas...')
  
  const courts = []
  const courtNames = ['Cancha Central', 'Cancha Premium', 'Cancha VIP', 'Cancha Norte', 'Cancha Sur']
  
  for (let i = 0; i < 5; i++) {
    const court = await prisma.court.create({
      data: {
        clubId: clubId,
        name: courtNames[i],
        type: 'PADEL',
        indoor: i < 2, // First 2 courts are indoor
        order: i + 1,
        active: true,
        updatedAt: new Date()
      }
    })
    courts.push(court)
    console.log(`‚úÖ ${court.name} creada (${court.indoor ? 'Techada' : 'Al aire libre'})`)
  }
  
  return courts
}

async function createPricing(clubId: string) {
  console.log('üí∞ Configurando precios ($500/hora base)...')
  
  const pricing = await prisma.classPricing.create({
    data: {
      clubId: clubId,
      // Class Prices (in cents)
      individualPrice: 80000, // $800 MXN
      groupPrice: 50000,      // $500 MXN per person
      clinicPrice: 35000,     // $350 MXN per person
      // Instructor Payment - Default global settings
      instructorPaymentType: 'HOURLY',
      instructorHourlyRate: 50000, // $500 MXN per hour
      instructorPercentage: 60.0,  // 60% of class revenue
      instructorFixedRate: 0,
      // Bulk Discounts
      enableBulkDiscount: true,
      bulkDiscountThreshold: 10,   // 10+ classes
      bulkDiscountPercentage: 15.0, // 15% discount
      updatedAt: new Date()
    }
  })
  
  console.log('‚úÖ Precios configurados: $800 individual, $500 grupo, $350 clinic')
  return pricing
}

async function createUsers(clubId: string) {
  console.log('üë• Creando 10 usuarios con nombres mexicanos...')
  
  const users = []
  
  for (let i = 0; i < MEXICAN_NAMES.length; i++) {
    const userData = MEXICAN_NAMES[i]
    const level = PADEL_LEVELS[Math.floor(Math.random() * PADEL_LEVELS.length)]
    const gender = GENDERS[Math.floor(Math.random() * GENDERS.length)]
    
    const player = await prisma.player.create({
      data: {
        clubId: clubId,
        name: `${userData.firstName} ${userData.lastName}`,
        email: userData.email,
        phone: userData.phone,
        phoneVerified: Math.random() > 0.3, // 70% verified
        birthDate: new Date(1985 + Math.floor(Math.random() * 20), Math.floor(Math.random() * 12), Math.floor(Math.random() * 28) + 1),
        level: level,
        gender: gender,
        clientNumber: `PAD${String(i + 1).padStart(3, '0')}`,
        memberSince: new Date(2023, Math.floor(Math.random() * 12), Math.floor(Math.random() * 28) + 1),
        totalBookings: Math.floor(Math.random() * 50),
        totalSpent: Math.floor(Math.random() * 50000) * 100, // in cents
        active: true,
        updatedAt: new Date()
      }
    })
    
    users.push(player)
    console.log(`‚úÖ ${player.name} - ${player.level} (${player.clientNumber})`)
  }
  
  console.log(`‚úÖ ${users.length} usuarios creados`)
  return users
}

async function createInstructors(clubId: string) {
  console.log('üéì Creando instructores (por hora y mensual)...')
  
  const instructors = [
    {
      name: 'Roberto S√°nchez',
      email: 'roberto.sanchez@clubpadel.mx',
      phone: '55 1111 2222',
      bio: 'Instructor certificado con 8 a√±os de experiencia. Especializado en t√©cnica y t√°ctica avanzada.',
      specialties: ['T√©cnica', 'T√°ctica', 'Competici√≥n'],
      paymentType: 'HOURLY',
      hourlyRate: 60000, // $600/hora
      monthlyRate: 0,
      updatedAt: new Date()
    },
    {
      name: 'Patricia Morales',
      email: 'patricia.morales@clubpadel.mx',
      phone: '55 3333 4444',
      bio: 'Ex-jugadora profesional. Enfoque en desarrollo de principiantes y t√©cnica fundamental.',
      specialties: ['Principiantes', 'T√©cnica b√°sica', 'Coordinaci√≥n'],
      paymentType: 'MONTHLY',
      hourlyRate: 0,
      monthlyRate: 2500000, // $25,000 mensual
      updatedAt: new Date()
    },
    {
      name: 'Fernando Castillo',
      email: 'fernando.castillo@clubpadel.mx',
      phone: '55 5555 6666',
      bio: 'Especialista en preparaci√≥n f√≠sica y entrenamiento de alto rendimiento.',
      specialties: ['Preparaci√≥n f√≠sica', 'Alto rendimiento', 'Competici√≥n'],
      paymentType: 'HOURLY',
      hourlyRate: 55000, // $550/hora
      monthlyRate: 0,
      updatedAt: new Date()
    },
    {
      name: 'Andrea V√°zquez',
      email: 'andrea.vazquez@clubpadel.mx',
      phone: '55 7777 8888',
      bio: 'Instructora especializada en cl√≠nicas y entrenamientos grupales.',
      specialties: ['Cl√≠nicas', 'Grupos', 'T√©cnica intermedia'],
      paymentType: 'MONTHLY',
      hourlyRate: 0,
      monthlyRate: 2000000, // $20,000 mensual
      updatedAt: new Date()
    }
  ]
  
  const createdInstructors = []
  
  for (const instructorData of instructors) {
    const instructor = await prisma.classInstructor.create({
      data: {
        clubId: clubId,
        name: instructorData.name,
        email: instructorData.email,
        phone: instructorData.phone,
        bio: instructorData.bio,
        specialties: instructorData.specialties,
        hourlyRate: instructorData.hourlyRate,
        paymentType: instructorData.paymentType,
        monthlyRate: instructorData.monthlyRate,
        active: true,
        updatedAt: new Date()
      }
    })
    
    createdInstructors.push(instructor)
    console.log(`‚úÖ ${instructor.name} - ${instructor.paymentType === 'HOURLY' ? `$${instructor.hourlyRate/100}/hora` : `$${instructor.monthlyRate/100}/mes`}`)
  }
  
  return createdInstructors
}

async function createSampleTransactions(clubId: string, players: any[]) {
  console.log('üí≥ Creando transacciones de ejemplo...')
  
  const transactions = []
  const currentDate = new Date()
  
  // Create some sample income transactions
  for (let i = 0; i < 15; i++) {
    const randomPlayer = players[Math.floor(Math.random() * players.length)]
    const amount = [80000, 50000, 35000][Math.floor(Math.random() * 3)] // Random class price
    const category = ['BOOKING', 'CLASS', 'MEMBERSHIP'][Math.floor(Math.random() * 3)]
    
    const transaction = await prisma.transaction.create({
      data: {
        clubId: clubId,
        type: 'INCOME',
        category: category,
        amount: amount,
        currency: 'MXN',
        description: `Pago de ${randomPlayer.name} - ${category === 'CLASS' ? 'Clase de p√°del' : category === 'BOOKING' ? 'Reserva de cancha' : 'Membres√≠a'}`,
        date: new Date(currentDate.getTime() - Math.random() * 30 * 24 * 60 * 60 * 1000), // Random date within last 30 days
        reference: `TXN-${Date.now()}-${i}`,
        playerId: randomPlayer.id,
        updatedAt: new Date()
      }
    })
    
    transactions.push(transaction)
  }
  
  // Create some sample expense transactions
  const expenseCategories = ['MAINTENANCE', 'UTILITIES', 'EQUIPMENT', 'MARKETING']
  for (let i = 0; i < 8; i++) {
    const category = expenseCategories[Math.floor(Math.random() * expenseCategories.length)]
    const amount = Math.floor(Math.random() * 10000 + 2000) * 100 // $2000 - $12000
    
    const transaction = await prisma.transaction.create({
      data: {
        clubId: clubId,
        type: 'EXPENSE',
        category: category,
        amount: amount,
        currency: 'MXN',
        description: `Gasto de ${category.toLowerCase()} - ${new Date().toLocaleDateString('es-MX', { month: 'long' })}`,
        date: new Date(currentDate.getTime() - Math.random() * 30 * 24 * 60 * 60 * 1000),
        reference: `EXP-${Date.now()}-${i}`,
        updatedAt: new Date()
      }
    })
    
    transactions.push(transaction)
  }
  
  console.log(`‚úÖ ${transactions.length} transacciones creadas`)
  return transactions
}

async function createAdminUser(clubId: string) {
  console.log('üë®‚Äçüíº Creando usuario administrador...')
  
  const adminUser = await prisma.user.create({
    data: {
      name: 'Administrador del Club',
      email: 'admin@clubpadel.mx',
      role: 'CLUB_OWNER',
      clubId: clubId,
      active: true,
      updatedAt: new Date()
    }
  })
  
  console.log(`‚úÖ Usuario admin creado: ${adminUser.email}`)
  return adminUser
}

async function main() {
  console.log('üöÄ Iniciando seed COMPLETO de base de datos de desarrollo...')
  console.log('=========================================================')
  
  try {
    // Clear existing data
    await clearDatabase()
    
    // Create main entities
    const club = await createClub()
    const settings = await createClubSettings(club.id)
    const courts = await createCourts(club.id)
    const pricing = await createPricing(club.id)
    const users = await createUsers(club.id)
    const instructors = await createInstructors(club.id)
    const transactions = await createSampleTransactions(club.id, users)
    const adminUser = await createAdminUser(club.id)
    
    console.log('=========================================================')
    console.log('üéâ ¬°SEED COMPLETADO EXITOSAMENTE!')
    console.log('')
    console.log('üìä RESUMEN:')
    console.log(`üè¢ Club: ${club.name}`)
    console.log(`üéæ Canchas: ${courts.length} ($500/hora configurado)`)
    console.log(`üë• Usuarios: ${users.length} (nombres mexicanos)`)
    console.log(`üéì Instructores: ${instructors.length} (2 por hora, 2 mensual)`)
    console.log(`üí≥ Transacciones: ${transactions.length}`)
    console.log(`üë®‚Äçüíº Admin: ${adminUser.email}`)
    console.log('')
    console.log('üí≥ STRIPE CONFIGURADO:')
    console.log(`üìù Publishable Key: ${STRIPE_CONFIG.publishableKey}`)
    console.log(`üîê Secret Key: ${STRIPE_CONFIG.secretKey}`)
    console.log('')
    console.log('üí∞ M√âTODOS DE PAGO ACTIVADOS:')
    console.log('‚úÖ Stripe (Tarjetas)')
    console.log('‚úÖ Efectivo')
    console.log('‚úÖ Transferencia bancaria')
    console.log('‚úÖ Terminal POS')
    console.log('')
    console.log('üéì INSTRUCTORES CREADOS:')
    instructors.forEach(inst => {
      const payment = inst.paymentType === 'HOURLY' 
        ? `$${inst.hourlyRate/100}/hora` 
        : `$${inst.monthlyRate/100}/mes`
      console.log(`   üë®‚Äçüè´ ${inst.name} - ${payment}`)
    })
    console.log('')
    console.log('üöÄ ¬°Tu aplicaci√≥n est√° lista para desarrollo!')
    console.log('üîó http://localhost:3002')
    
  } catch (error) {
    console.error('‚ùå Error durante el seed:', error)
    throw error
  } finally {
    await prisma.$disconnect()
  }
}

// Execute the seed
if (require.main === module) {
  main()
    .catch((e) => {
      console.error(e)
      process.exit(1)
    })
}