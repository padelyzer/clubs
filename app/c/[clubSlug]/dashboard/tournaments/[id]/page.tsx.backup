'use client'

import React, { useState, useEffect } from 'react'
import { useParams } from 'next/navigation'
import { CardModern, CardModernHeader, CardModernTitle, CardModernDescription, CardModernContent } from '@/components/design-system/CardModern'
import { colors } from '@/lib/design-system/colors'
import { 
  Trophy, 
  Users, 
  Calendar, 
  Grid3x3, 
  Columns3, 
  Camera, 
  Tv2, 
  Settings,
  ChevronRight,
  ChevronLeft,
  Filter,
  Search,
  Plus,
  Clock,
  CheckCircle,
  XCircle,
  AlertCircle,
  PlayCircle,
  DollarSign,
  TrendingUp,
  Award,
  Target,
  Bell,
  Loader2,
  ChevronDown,
  Edit,
  Trash2,
  Eye,
  Save,
  QrCode,
  Download,
  Printer,
  AlertTriangle,
  CheckSquare,
  MapPin
} from 'lucide-react'
import { Modal } from '@/components/design-system/Modal'

interface TournamentData {
  tournament: {
    id: string
    name: string
    description?: string
    status: string
    startDate: string
    endDate: string
    club: {
      id: string
      name: string
      logo?: string
    }
  }
  stats: {
    totalTeams: number
    totalMatches: number
    completedMatches: number
    pendingMatches: number
    inProgressMatches: number
    todayMatches: number
  }
  categories: Array<{
    code: string
    modality: string
    name: string
    teams: number
    totalMatches: number
    completedMatches: number
    status: string
  }>
  matches: {
    inProgress: any[]
    upcoming: any[]
    total: number
  }
  courts: Array<{
    id: string
    name: string
    number: number
    status: string
    currentMatch?: any
    nextMatch?: any
  }>
}

export default function TournamentV2Page() {
  const params = useParams()
  const tournamentId = params.id as string
  console.log('TournamentV2Page LOADED - Pagination enabled')
  
  const [activeView, setActiveView] = useState<'overview' | 'registrations' | 'schedule' | 'kanban' | 'capture' | 'tv' | 'category-detail' | 'qr-conflicts' | 'reception'>('overview')
  const [selectedCategory, setSelectedCategory] = useState<string | null>(null)
  const [sidebarCollapsed, setSidebarCollapsed] = useState(false)
  const [showScheduleModal, setShowScheduleModal] = useState(false)
  const [selectedMatch, setSelectedMatch] = useState<any>(null)
  const [showAutoScheduleWizard, setShowAutoScheduleWizard] = useState(false)
  const [allowReschedule, setAllowReschedule] = useState(false)
  const [selectedCategories, setSelectedCategories] = useState<string[]>([])
  const [matchDuration, setMatchDuration] = useState(60) // Duración por defecto: 60 minutos
  const [preparationTime, setPreparationTime] = useState(15) // Tiempo de preparación: 15 minutos
  const [startHour, setStartHour] = useState(9) // Hora de inicio: 9am
  const [endHour, setEndHour] = useState(21) // Hora de fin: 9pm
  const [selectedModalities, setSelectedModalities] = useState<string[]>([]) // Modalidades seleccionadas
  const [selectedLevels, setSelectedLevels] = useState<string[]>([]) // Niveles seleccionados
  const [categoriesExpanded, setCategoriesExpanded] = useState(true)
  const [masculineExpanded, setMasculineExpanded] = useState(true)
  const [feminineExpanded, setFeminineExpanded] = useState(true)
  
  // Estados para QR & Conflictos
  const [qrConflictTab, setQrConflictTab] = useState<'qr' | 'conflicts' | 'pending'>('qr')
  const [qrCodes, setQrCodes] = useState<any[]>([])
  const [conflicts, setConflicts] = useState<any[]>([])
  const [pendingResults, setPendingResults] = useState<any[]>([])
  const [conflictsCount, setConflictsCount] = useState(0)
  const [qrGenerating, setQrGenerating] = useState(false)
  const [mixedExpanded, setMixedExpanded] = useState(true)
  const [loading, setLoading] = useState(true)
  const [tournamentData, setTournamentData] = useState<TournamentData | null>(null)
  const [error, setError] = useState<string | null>(null)
  const [registrations, setRegistrations] = useState<any[]>([])
  
  // Pagination state for registrations
  const [currentPage, setCurrentPage] = useState(1)
  const registrationsPerPage = 10
  
  // Filter states for registrations view
  const [registrationsModalityFilter, setRegistrationsModalityFilter] = useState('all')
  const [registrationsLevelFilter, setRegistrationsLevelFilter] = useState<string[]>([])
  
  // Estados para filtros de la vista Kanban
  const [kanbanCategoryFilter, setKanbanCategoryFilter] = useState('all')
  const [kanbanStatusFilter, setKanbanStatusFilter] = useState('all')
  const [kanbanSearchTerm, setKanbanSearchTerm] = useState('')
  const [showMatchDetailsModal, setShowMatchDetailsModal] = useState(false)
  const [selectedMatchDetails, setSelectedMatchDetails] = useState<any>(null)
  
  // Estados para drag and drop
  const [draggedMatch, setDraggedMatch] = useState<any>(null)
  const [dragOverColumn, setDragOverColumn] = useState<string | null>(null)
  
  // Estado para vista compacta/expandida
  const [kanbanCompactView, setKanbanCompactView] = useState(false)
  const [lastUpdated, setLastUpdated] = useState<Date>(new Date())
  const [notification, setNotification] = useState<{message: string, type: 'info' | 'success' | 'warning'} | null>(null)
  
  // Estados para filtros de la vista Schedule
  const [scheduleDate, setScheduleDate] = useState(new Date().toISOString().split('T')[0])
  const [scheduleCategoryFilter, setScheduleCategoryFilter] = useState('all')
  const [scheduleCourtFilter, setScheduleCourtFilter] = useState('all')
  const [loadingRegistrations, setLoadingRegistrations] = useState(false)
  const [searchTerm, setSearchTerm] = useState('')
  
  // Reset to first page when search changes
  useEffect(() => {
    setCurrentPage(1)
  }, [searchTerm])
  
  // Estados para modales
  const [showAddTeamModal, setShowAddTeamModal] = useState(false)
  const [showEditTeamModal, setShowEditTeamModal] = useState(false)
  const [selectedTeam, setSelectedTeam] = useState<any>(null)
  const [savingTeam, setSavingTeam] = useState(false)
  
  // Estado del formulario
  const [teamForm, setTeamForm] = useState({
    teamName: '',
    player1Name: '',
    player1Email: '',
    player1Phone: '',
    player2Name: '',
    player2Email: '',
    player2Phone: '',
    category: '',
    modality: 'M',
    paymentStatus: 'pending'
  })
  
  // Estados para filtros en vista de Programación
  const [selectedDate, setSelectedDate] = useState<Date>(new Date())
  const [scheduleFilter, setScheduleFilter] = useState<'all' | 'pending' | 'completed' | 'in_progress'>('all')
  
  // Estados para filtros en vista Kanban
  const [kanbanSelectedDate, setKanbanSelectedDate] = useState<Date>(new Date())
  
  // Estados para filtros en vista Captura
  const [captureCategoryFilter, setCaptureCategoryFilter] = useState<string>('all')
  const [captureStatusFilter, setCaptureStatusFilter] = useState<'pending' | 'all' | 'completed'>('pending')
  const [selectedMatches, setSelectedMatches] = useState<Set<string>>(new Set())
  
  // Estado para organización automática
  const [isOrganizing, setIsOrganizing] = useState(false)
  const [organizationResult, setOrganizationResult] = useState<{ success: boolean; message: string } | null>(null)
  
  // Estado para filtro de género en categorías
  const [categoryGenderFilter, setCategoryGenderFilter] = useState<'all' | 'M' | 'F' | 'X'>('all')

  // Colors configuration
  const colors = {
    primary: {
      600: '#3B82F6',
      700: '#047857'
    },
    accent: {
      300: '#A4DF4E',
      400: '#84CC16',
      600: '#16A34A'
    },
    pink: {
      600: '#EC4899'
    },
    text: {
      primary: '#111827',
      secondary: '#6B7280',
      tertiary: '#9CA3AF'
    },
    border: {
      light: '#E5E7EB'
    },
    neutral: {
      50: '#F9FAFB',
      100: '#F3F4F6',
      200: '#E5E7EB',
      300: '#D1D5DB',
      400: '#9CA3AF',
      600: '#6B7280',
      900: '#111827'
    },
    warning: {
      400: '#FBBF24',
      600: '#F59E0B'
    },
    danger: {
      600: '#DC2626'
    },
    success: {
      600: '#16A34A'
    },
    background: {
      primary: '#FFFFFF',
      secondary: '#F9FAFB'
    }
  }

  // Función para traducir modalidad al español
  const translateModality = (modality: string): string => {
    const translations: Record<string, string> = {
      'masculine': 'Masculino',
      'M': 'M',
      'feminine': 'Femenino', 
      'F': 'F',
      'mixed': 'Mixto',
      'X': 'X'
    }
    return translations[modality] || modality
  }

  // Cargar datos del torneo
  useEffect(() => {
    // Si el ID es "1", redirigir al torneo correcto
    if (tournamentId === '1') {
      window.location.href = '/dashboard/tournaments-v2/tournament_1756534664680_small'
      return
    }
    
    fetchTournamentData(true)  // true para carga inicial
    fetchRegistrations()
    // También cargar conflictos para mostrar el badge
    fetchConflicts()
    // Comentado temporalmente para evitar flasheos
    // const interval = setInterval(() => fetchTournamentData(false), 60000)
    // return () => clearInterval(interval)
  }, [tournamentId])
  
  // Auto-seleccionar categorías cuando se usan los filtros
  useEffect(() => {
    if (allowReschedule && selectedModalities.length > 0) {
      // Filtrar categorías basado en modalidades y niveles seleccionados
      const categoriesToSelect = tournamentData?.categories?.filter((cat: any) => {
        const modalityMatch = selectedModalities.includes(cat.modality)
        const levelMatch = selectedLevels.length === 0 || selectedLevels.includes(cat.code)
        return modalityMatch && levelMatch
      }) || []
      
      // Crear las keys de las categorías
      const categoryKeys = categoriesToSelect.map((cat: any) => `${cat.code}-${cat.modality}`)
      setSelectedCategories(categoryKeys)
    }
  }, [selectedModalities, selectedLevels, allowReschedule])

  // Auto-seleccionar la primera fecha disponible cuando se abre la vista de programación
  useEffect(() => {
    if (activeView === 'schedule' && tournamentData?.matches) {
      const allMatches = [
        ...(tournamentData?.matches?.inProgress || []),
        ...(tournamentData?.matches?.upcoming || [])
      ]
      
      // Obtener todas las fechas únicas con partidos
      const datesWithMatches = new Set(
        allMatches
          .filter((match: any) => match.scheduledAt)
          .map((match: any) => new Date(match.scheduledAt).toDateString())
      )
      
      // Ordenar fechas y obtener la primera
      const availableDates = Array.from(datesWithMatches).sort((a, b) => 
        new Date(a).getTime() - new Date(b).getTime()
      )
      
      if (availableDates.length > 0) {
        // Si la fecha actual seleccionada no tiene partidos, seleccionar la primera fecha disponible
        const currentDateString = selectedDate.toDateString()
        if (!datesWithMatches.has(currentDateString)) {
          setSelectedDate(new Date(availableDates[0]))
        }
      }
    }
  }, [activeView, tournamentData])

  // Cargar datos de QR y conflictos cuando se activa la vista
  useEffect(() => {
    if (activeView === 'qr-conflicts') {
      fetchQRCodes()
      fetchConflicts()
    } else if (activeView === 'schedule') {
      // También cargar QR codes para la vista de programación
      fetchQRCodes()
    }
  }, [activeView])

  const fetchTournamentData = async (isInitialLoad = false) => {
    try {
      // Solo mostrar loading en la carga inicial, no en actualizaciones
      if (isInitialLoad) {
        setLoading(true)
      }
      const response = await fetch(`/api/tournaments-v2/${tournamentId}`)
      if (!response.ok) {
        if (response.status === 404) {
          throw new Error('Torneo no encontrado. Verifica que el ID del torneo sea correcto.')
        }
        throw new Error('Error al cargar el torneo')
      }
      const data = await response.json()
      setTournamentData(data)
      setError(null)
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Error desconocido')
      setTournamentData(null)
    } finally {
      if (isInitialLoad) {
        setLoading(false)
      }
    }
  }

  // Funciones para QR & Conflictos
  const generateQRCodes = async () => {
    setQrGenerating(true)
    try {
      const res = await fetch('/api/tournaments-v2/courts/qr', {
        method: 'POST',
        credentials: 'include'
      })
      const data = await res.json()
      if (res.ok) {
        setQrCodes(data.qrCodes || [])
        // Generar QR visuales después
        setTimeout(() => {
          data.qrCodes?.forEach((qr: any) => {
            const element = document.getElementById(`qr-${qr.id}`)
            if (element && typeof QRCode !== 'undefined') {
              element.innerHTML = ''
              new (window as any).QRCode(element, {
                text: qr.accessUrl,
                width: 150,
                height: 150
              })
            }
          })
        }, 100)
      }
    } catch (err) {
      console.error('Error generando QR codes:', err)
    } finally {
      setQrGenerating(false)
    }
  }

  const fetchQRCodes = async () => {
    try {
      const res = await fetch('/api/tournaments-v2/courts/qr')
      const data = await res.json()
      if (res.ok) {
        setQrCodes(data || [])
      }
    } catch (err) {
      console.error('Error obteniendo QR codes:', err)
    }
  }

  const fetchConflicts = async () => {
    try {
      const res = await fetch(`/api/tournaments-v2/${tournamentId}/conflicts`)
      const data = await res.json()
      if (res.ok) {
        setConflicts(data.conflicts || [])
        setConflictsCount(data.conflicts?.length || 0)
      }
    } catch (err) {
      console.error('Error obteniendo conflictos:', err)
    }
  }

  const resolveConflict = async (matchId: string, result: any) => {
    try {
      const res = await fetch(`/api/tournaments-v2/${tournamentId}/resolve-conflict`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ matchId, result })
      })
      if (res.ok) {
        await fetchConflicts()
        await fetchTournamentData()
      }
    } catch (err) {
      console.error('Error resolviendo conflicto:', err)
    }
  }

  const printQRCode = (qr: any) => {
    const printWindow = window.open('', '_blank')
    if (printWindow) {
      printWindow.document.write(`
        <html>
          <head>
            <title>QR Code - ${qr.Court?.name || 'Cancha ' + qr.courtNumber}</title>
            <script src="https://cdn.jsdelivr.net/npm/qrcodejs@1.0.0/qrcode.min.js"></script>
          </head>
          <body style="text-align: center; padding: 40px; font-family: Arial;">
            <h1>${qr.Court?.name || 'Cancha ' + qr.courtNumber}</h1>
            <div id="qr" style="display: inline-block;"></div>
            <p style="margin-top: 20px; font-size: 14px;">
              Escanea este código para reportar resultados
            </p>
            <script>
              new QRCode(document.getElementById("qr"), {
                text: "${qr.accessUrl}",
                width: 300,
                height: 300
              });
              setTimeout(() => window.print(), 500);
            </script>
          </body>
        </html>
      `)
    }
  }

  const fetchRegistrations = async () => {
    setLoadingRegistrations(true)
    try {
      const response = await fetch(`/api/tournaments-v2/${tournamentId}/registrations`)
      if (!response.ok) {
        throw new Error('Error al cargar inscripciones')
      }
      const data = await response.json()
      setRegistrations(data.registrations || [])
    } catch (err) {
      console.error('Error fetching registrations:', err)
      setRegistrations([])
    } finally {
      setLoadingRegistrations(false)
    }
  }

  // Función para hacer check-in de un equipo
  const handleCheckIn = async (registrationId: string) => {
    try {
      const response = await fetch(`/api/tournaments-v2/${tournamentId}/registrations/${registrationId}/check-in`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ checkedIn: true })
      })

      if (!response.ok) {
        throw new Error('Error al hacer check-in')
      }

      // Actualizar localmente el estado
      setRegistrations(prev => 
        prev.map(reg => 
          reg.id === registrationId 
            ? { ...reg, checkedIn: true }
            : reg
        )
      )

      // Mostrar feedback (opcional: podrías agregar un toast notification)
      console.log('Check-in exitoso para:', registrationId)
      
    } catch (err) {
      console.error('Error haciendo check-in:', err)
      alert('Error al hacer check-in. Por favor intenta de nuevo.')
    }
  }

  // Función para abrir modal de programación
  const openScheduleModal = (match: any) => {
    setSelectedMatch(match)
    setShowScheduleModal(true)
  }

  // Función para programar partido
  const scheduleMatch = async (matchId: string, scheduledAt: string, courtId: string) => {
    try {
      const response = await fetch(`/api/tournaments-v2/${tournamentId}/matches/${matchId}/schedule`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          scheduledAt,
          courtId,
          status: 'SCHEDULED'
        })
      })
      
      if (response.ok) {
        // Recargar datos del torneo
        await fetchTournamentData()
        setShowScheduleModal(false)
        setSelectedMatch(null)
      } else {
        console.error('Error scheduling match')
      }
    } catch (error) {
      console.error('Error scheduling match:', error)
    }
  }

  // Función para programación automática
  const processAutoSchedule = async (formData: FormData) => {
    try {
      let date = formData.get('schedule-date') as string
      
      // Si seleccionaron fecha personalizada, usar esa fecha
      if (date === 'custom') {
        date = formData.get('custom-schedule-date') as string
      }
      
      if (!date) {
        alert('Por favor selecciona una fecha para programar los partidos')
        return
      }
      
      // Validar que se hayan seleccionado categorías cuando allowReschedule está activado
      if (allowReschedule && selectedCategories.length === 0) {
        alert('Por favor selecciona al menos una categoría para reprogramar')
        return
      }
      
      // Obtener todas las categorías seleccionadas y sus configuraciones
      const scheduleConfigs: any[] = []
      
      // Si allowReschedule está activado, usar selectedCategories; si no, usar todas las categorías con partidos sin programar
      const categoriesToProcess = allowReschedule 
        ? tournamentData?.categories?.filter((cat: any) => 
            selectedCategories.includes(`${cat.code}-${cat.modality}`)
          ) || []
        : tournamentData?.categories || []
      
      categoriesToProcess.forEach((category: any) => {
        // Si allowReschedule está inactivo, verificar que tenga partidos sin programar
        if (!allowReschedule) {
          const categoryTeams = registrations?.filter((reg: any) => 
            reg.category === category.code && reg.modality === category.modality
          ) || []
          const teamNames = categoryTeams.map(team => team.teamName)
          const allMatches = [
            ...(tournamentData?.matches?.inProgress || []),
            ...(tournamentData?.matches?.upcoming || [])
          ]
          const unprogrammedMatches = allMatches.filter((match: any) => {
            return teamNames.includes(match.team1Name) && 
                   teamNames.includes(match.team2Name) && 
                   !match.scheduledAt
          })
          
          if (unprogrammedMatches.length === 0) return // Skip categories without unprogrammed matches
        }
        
        const startTime = formData.get(`start-time-${category.code}-${category.modality}`) as string
        const duration = parseInt(formData.get(`duration-${category.code}-${category.modality}`) as string)
        const interval = parseInt(formData.get(`interval-${category.code}-${category.modality}`) as string)
        
        // Obtener partidos de esta categoría
        const allMatches = [
          ...(tournamentData?.matches?.inProgress || []),
          ...(tournamentData?.matches?.upcoming || [])
        ]
        const categoryTeams = registrations?.filter((reg: any) => 
          reg.category === category.code && reg.modality === category.modality
        ) || []
        const teamNames = categoryTeams.map(team => team.teamName)
        
        // Si allowReschedule está activado, incluir todos los partidos; si no, solo los sin programar
        const matchesToSchedule = allMatches.filter((match: any) => {
          const isFromCategory = teamNames.includes(match.team1Name) && teamNames.includes(match.team2Name)
          if (!isFromCategory) return false
          
          // Si permite reprogramar, incluir todos; si no, solo los sin programar
          return allowReschedule ? true : !match.scheduledAt
        })
        
        scheduleConfigs.push({
          category: category.code,
          modality: category.modality,
          startTime,
          duration,
          interval,
          matches: matchesToSchedule
        })
      })
      
      // VALIDACIÓN PREVENTIVA: Verificar capacidad antes de programar
      const totalMatchesToSchedule = scheduleConfigs.reduce((total, config) => total + config.matches.length, 0)
      const courtsCount = tournamentData?.courts?.length || 0
      const hoursAvailable = endHour - startHour
      const totalTimePerMatch = matchDuration + preparationTime
      const maxMatchesPerCourt = Math.floor((hoursAvailable * 60) / totalTimePerMatch)
      const maxMatchesPerDay = courtsCount * maxMatchesPerCourt
      
      if (totalMatchesToSchedule > maxMatchesPerDay) {
        const matchesPerCourt = Math.ceil(totalMatchesToSchedule / courtsCount)
        const totalMinutesNeeded = matchesPerCourt * totalTimePerMatch
        const hoursNeeded = Math.ceil(totalMinutesNeeded / 60)
        const minutesNeeded = totalMinutesNeeded % 60
        
        // Calcular recomendaciones considerando tiempo de preparación
        const optimalMatchDuration = Math.floor(((hoursAvailable * 60 * courtsCount) / totalMatchesToSchedule) - preparationTime)
        const optimalHours = Math.ceil((totalMatchesToSchedule * totalTimePerMatch) / (courtsCount * 60))
        
        // Mostrar modal de confirmación con detalles
        const confirmMessage = `⚠️ ADVERTENCIA DE CAPACIDAD\n\n` +
          `Intentas programar ${totalMatchesToSchedule} partidos en un día.\n` +
          `Con ${courtsCount} canchas, ${matchDuration}min por partido y ${preparationTime}min de preparación:\n\n` +
          `• Capacidad máxima: ${maxMatchesPerDay} partidos/día\n` +
          `• Exceso: ${totalMatchesToSchedule - maxMatchesPerDay} partidos\n` +
          `• Tiempo necesario: ${hoursNeeded}h ${minutesNeeded}min por cancha\n` +
          `• Tiempo disponible: ${hoursAvailable} horas\n` +
          `• Tiempo total por partido: ${totalTimePerMatch} minutos\n\n` +
          `RECOMENDACIONES:\n` +
          `1. Distribuir partidos en múltiples días\n` +
          `2. Reducir duración de partidos a ${optimalMatchDuration}min (manteniendo ${preparationTime}min prep)\n` +
          `3. Extender horario a ${optimalHours} horas diarias\n` +
          `4. Reducir tiempo de preparación o agregar más canchas\n\n` +
          `¿Deseas continuar de todos modos?`
        
        if (!confirm(confirmMessage)) {
          return
        }
      }

      // Enviar configuración al endpoint de programación automática
      const response = await fetch(`/api/tournaments-v2/${tournamentId}/auto-schedule`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          date,
          scheduleConfigs,
          courts: tournamentData?.courts || []
        })
      })

      if (response.ok) {
        const result = await response.json()
        console.log('Programación automática exitosa:', result)
        
        // Recargar datos del torneo
        await fetchTournamentData()
        setShowAutoScheduleWizard(false)
        
        // Mostrar mensaje de éxito (puedes agregar un toast aquí)
        alert(`✅ Se programaron automáticamente ${result.scheduledMatches} partidos`)
      } else {
        const error = await response.json()
        console.error('Error en programación automática:', error)
        alert('Error al programar partidos automáticamente')
      }

    } catch (error) {
      console.error('Error processing auto schedule:', error)
      alert('Error al procesar la programación automática')
    }
  }

  // Función para actualizar resultado de partido
  const updateMatchResult = async (matchId: string, scores: any) => {
    try {
      const response = await fetch(`/api/tournaments-v2/${tournamentId}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          matchId,
          ...scores,
          status: 'completed'
        })
      })
      
      if (response.ok) {
        // Recargar datos
        fetchTournamentData()
      }
    } catch (error) {
      console.error('Error updating match:', error)
    }
  }

  // Función para manejar el agregar equipo
  const handleSaveTeam = async () => {
    setSavingTeam(true)
    try {
      // TODO: Implementar llamada a API
      const newTeam = {
        id: Date.now().toString(),
        teamName: teamForm.teamName,
        player1Name: teamForm.player1Name,
        player1Email: teamForm.player1Email,
        player1Phone: teamForm.player1Phone,
        player2Name: teamForm.player2Name,
        player2Email: teamForm.player2Email,
        player2Phone: teamForm.player2Phone,
        category: teamForm.category,
        modality: teamForm.modality,
        paymentStatus: teamForm.paymentStatus,
        confirmed: teamForm.paymentStatus === 'completed',
        checkedIn: false
      }
      
      // Agregar temporalmente al estado
      setRegistrations(prev => [...prev, newTeam])
      
      // Cerrar modal y limpiar formulario
      setShowAddTeamModal(false)
      setTeamForm({
        teamName: '',
        player1Name: '',
        player1Email: '',
        player1Phone: '',
        player2Name: '',
        player2Email: '',
        player2Phone: '',
        category: '',
        modality: 'M',
        paymentStatus: 'pending'
      })
    } catch (error) {
      console.error('Error saving team:', error)
    } finally {
      setSavingTeam(false)
    }
  }

  // Función para manejar la edición
  const handleEditTeam = (team: any) => {
    setSelectedTeam(team)
    setTeamForm({
      teamName: team.teamName || '',
      player1Name: team.player1Name || '',
      player1Email: team.player1Email || '',
      player1Phone: team.player1Phone || '',
      player2Name: team.player2Name || '',
      player2Email: team.player2Email || '',
      player2Phone: team.player2Phone || '',
      category: team.category || '',
      modality: team.modality || 'M',
      paymentStatus: team.paymentStatus || 'pending'
    })
    setShowEditTeamModal(true)
  }

  // Función para actualizar equipo
  const handleUpdateTeam = async () => {
    setSavingTeam(true)
    try {
      // TODO: Implementar llamada a API
      const updatedTeam = {
        ...selectedTeam,
        ...teamForm,
        confirmed: teamForm.paymentStatus === 'completed'
      }
      
      // Actualizar temporalmente en el estado
      setRegistrations(prev => 
        prev.map(t => t.id === selectedTeam.id ? updatedTeam : t)
      )
      
      // Cerrar modal y limpiar
      setShowEditTeamModal(false)
      setSelectedTeam(null)
      setTeamForm({
        teamName: '',
        player1Name: '',
        player1Email: '',
        player1Phone: '',
        player2Name: '',
        player2Email: '',
        player2Phone: '',
        category: '',
        modality: 'M',
        paymentStatus: 'pending'
      })
    } catch (error) {
      console.error('Error updating team:', error)
    } finally {
      setSavingTeam(false)
    }
  }

  const getCategoryBadgeStyle = (status: string) => {
    switch (status) {
      case 'active':
        return {
          background: `linear-gradient(135deg, ${colors.primary[600]}20, ${colors.accent[300]}20)`,
          border: `1px solid ${colors.primary[600]}40`,
          color: colors.primary[700]
        }
      case 'pending':
        return {
          background: `linear-gradient(135deg, ${colors.warning[600]}20, ${colors.warning[400]}20)`,
          border: `1px solid ${colors.warning[600]}40`,
          color: colors.warning[700]
        }
      case 'completed':
        return {
          background: `linear-gradient(135deg, ${colors.neutral[400]}20, ${colors.neutral[300]}20)`,
          border: `1px solid ${colors.neutral[400]}40`,
          color: colors.neutral[600]
        }
      default:
        return {}
    }
  }

  const StatCard = ({ icon, label, value, trend, color }: any) => (
    <CardModern variant="gradient" padding="md" interactive>
      <div style={{ display: 'flex', alignItems: 'center', gap: '16px' }}>
        <div style={{
          width: '48px',
          height: '48px',
          borderRadius: '16px',
          background: `linear-gradient(135deg, ${color}20, ${color}10)`,
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          border: `1px solid ${color}20`
        }}>
          {React.cloneElement(icon, { 
            size: 24, 
            style: { color } 
          })}
        </div>
        <div style={{ flex: 1 }}>
          <p style={{ 
            fontSize: '13px', 
            color: colors.text.secondary,
            marginBottom: '4px',
            fontWeight: 500
          }}>
            {label}
          </p>
          <p style={{ 
            fontSize: '24px', 
            fontWeight: 600,
            color: colors.text.primary,
            letterSpacing: '-0.02em'
          }}>
            {value}
          </p>
        </div>
        {trend && (
          <TrendingUp size={16} style={{ color: colors.accent[600] }} />
        )}
      </div>
    </CardModern>
  )

  // Funciones para drag and drop
  const handleDragStart = (e: React.DragEvent, match: any, sourceColumn: string) => {
    setDraggedMatch({ ...match, sourceColumn });
    e.dataTransfer.effectAllowed = 'move';
    // Agregar efecto visual
    if (e.currentTarget instanceof HTMLElement) {
      e.currentTarget.style.opacity = '0.5';
    }
  };

  const handleDragEnd = (e: React.DragEvent) => {
    if (e.currentTarget instanceof HTMLElement) {
      e.currentTarget.style.opacity = '1';
    }
    setDraggedMatch(null);
    setDragOverColumn(null);
  };

  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault();
    e.dataTransfer.dropEffect = 'move';
  };

  const handleDragEnter = (column: string) => {
    setDragOverColumn(column);
  };

  const handleDragLeave = () => {
    setDragOverColumn(null);
  };

  const handleDrop = async (e: React.DragEvent, targetColumn: string) => {
    e.preventDefault();
    setDragOverColumn(null);
    
    if (!draggedMatch || draggedMatch.sourceColumn === targetColumn) {
      setDraggedMatch(null);
      return;
    }

    // Simular cambio de estado del partido
    console.log(`Moving match ${draggedMatch.id} from ${draggedMatch.sourceColumn} to ${targetColumn}`);
    
    // Mostrar notificación
    setNotification({
      message: `Partido movido a ${targetColumn === 'scheduled' ? 'Programados' : 
                                  targetColumn === 'in_progress' ? 'En Juego' : 
                                  targetColumn === 'completed' ? 'Completados' : 'Conflictos'}`,
      type: 'success'
    });
    
    // Auto-ocultar notificación después de 3 segundos
    setTimeout(() => setNotification(null), 3000);
    
    // Actualizar el estado local (opcional, depende de tu implementación)
    // Recargar los datos después del cambio
    if (fetchTournamentData) {
      fetchTournamentData();
    }
    
    setDraggedMatch(null);
  };

  // Actualización automática cada 30 segundos
  useEffect(() => {
    if (activeView === 'kanban' && fetchTournamentData) {
      const interval = setInterval(() => {
        console.log('Actualizando datos del tablero Kanban...');
        fetchTournamentData();
        setLastUpdated(new Date());
      }, 30000); // 30 segundos

      return () => clearInterval(interval);
    }
  }, [activeView, fetchTournamentData]);

  // Loading state
  if (loading) {
    return (
      <div style={{ 
        display: 'flex', 
        height: '100vh',
        alignItems: 'center',
        justifyContent: 'center',
        background: colors.background.secondary
      }}>
        <CardModern variant="glass" padding="lg">
          <div style={{ textAlign: 'center' }}>
            <Loader2 
              size={48} 
              style={{ 
                color: colors.primary[600],
                animation: 'spin 1s linear infinite',
                margin: '0 auto 16px'
              }} 
            />
            <p style={{ color: colors.text.primary, fontSize: '16px', fontWeight: 500 }}>
              Cargando torneo...
            </p>
          </div>
        </CardModern>
        <style>{`
          @keyframes spin {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
          }
        `}</style>
      </div>
    )
  }

  // Error state - only show error if loading is finished and there's an error
  if (!loading && error) {
    return (
      <div style={{ 
        display: 'flex', 
        height: '100vh',
        alignItems: 'center',
        justifyContent: 'center',
        background: colors.background.secondary
      }}>
        <CardModern variant="glass" padding="lg">
          <div style={{ textAlign: 'center' }}>
            <AlertCircle 
              size={48} 
              style={{ 
                color: colors.danger[600],
                margin: '0 auto 16px'
              }} 
            />
            <p style={{ color: colors.text.primary, fontSize: '16px', fontWeight: 500 }}>
              {error}
            </p>
            <button 
              onClick={() => window.location.reload()}
              style={{
                marginTop: '16px',
                padding: '8px 16px',
                borderRadius: '8px',
                background: colors.primary[600],
                color: 'white',
                border: 'none',
                cursor: 'pointer',
                fontSize: '14px',
                fontWeight: 500
              }}
            >
              Reintentar
            </button>
          </div>
        </CardModern>
      </div>
    )
  }

  // Don't render main content until we have tournament data
  if (!tournamentData) {
    return null
  }

  return (
    <>
      <style jsx>{`
        @keyframes pulse {
          0% {
            opacity: 1;
          }
          50% {
            opacity: 0.5;
          }
          100% {
            opacity: 1;
          }
        }
        
        @keyframes slideIn {
          0% {
            transform: translateY(-10px);
            opacity: 0;
          }
          100% {
            transform: translateY(0);
            opacity: 1;
          }
        }
        
        @keyframes fadeIn {
          0% {
            opacity: 0;
          }
          100% {
            opacity: 1;
          }
        }
        
        .kanban-card-enter {
          animation: slideIn 0.3s ease-out;
        }
        
        .kanban-column-highlight {
          animation: pulse 1s infinite;
        }
      `}</style>
    <div style={{ 
      display: 'flex', 
      height: '100vh',
      background: colors.background.secondary,
      fontFamily: '-apple-system, BlinkMacSystemFont, "SF Pro Display", "Inter", "Segoe UI", Roboto, sans-serif'
    }}>
      {/* Sidebar - Diseño actualizado */}
      <aside 
        style={{
          width: sidebarCollapsed ? '80px' : '320px',
          background: 'rgba(255, 255, 255, 0.8)',
          backdropFilter: 'blur(10px)',
          borderRight: `1px solid ${colors.border.light}`,
          transition: 'all 0.3s ease',
          position: 'relative',
          display: 'flex',
          flexDirection: 'column',
          height: '100vh',
          overflow: 'hidden'
        }}
      >

        {/* Header Section */}
        <div>
          {/* Logo de Padelyzer */}
          <div style={{ 
            padding: '20px',
            borderBottom: `1px solid ${colors.border.light}`,
            display: 'flex',
            justifyContent: sidebarCollapsed ? 'center' : 'flex-start'
          }}>
            {!sidebarCollapsed ? (
              <img 
                src="/Padelyzer-Logo-Negro.png" 
                alt="Padelyzer"
                style={{ 
                  width: '140px',
                  height: 'auto',
                  display: 'block'
                }}
              />
            ) : (
              <img 
                src="/Padelyzer-Isotipo-Negro.png" 
                alt="P"
                style={{ 
                  width: '36px',
                  height: '36px',
                  display: 'block'
                }}
              />
            )}
          </div>
          
          {/* Módulo de Gestión de Torneo con Toggle Button */}
          <div style={{
            padding: sidebarCollapsed ? '12px' : '16px',
            borderBottom: `1px solid ${colors.border.light}`,
            background: 'linear-gradient(135deg, #047857, #059669)',
            position: 'relative'
          }}>
            {/* Toggle Button integrado en la pestaña verde */}
            {!sidebarCollapsed && (
              <button
                onClick={() => setSidebarCollapsed(!sidebarCollapsed)}
                style={{
                  position: 'absolute',
                  right: '12px',
                  top: '50%',
                  transform: 'translateY(-50%)',
                  width: '32px',
                  height: '32px',
                  background: 'rgba(255,255,255,0.25)',
                  border: '1px solid rgba(255,255,255,0.4)',
                  borderRadius: '8px',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  cursor: 'pointer',
                  transition: 'all 0.3s',
                  zIndex: 5
                }}
                onMouseEnter={(e) => {
                  e.currentTarget.style.background = 'rgba(255,255,255,0.35)'
                  e.currentTarget.style.transform = 'translateY(-50%) scale(1.1)'
                  e.currentTarget.style.border = '1px solid rgba(255,255,255,0.6)'
                }}
                onMouseLeave={(e) => {
                  e.currentTarget.style.background = 'rgba(255,255,255,0.25)'
                  e.currentTarget.style.transform = 'translateY(-50%) scale(1)'
                  e.currentTarget.style.border = '1px solid rgba(255,255,255,0.4)'
                }}
              >
                <ChevronRight 
                  size={16} 
                  style={{ 
                    color: 'white',
                    transform: 'rotate(180deg)',
                    transition: 'transform 0.3s',
                    filter: 'drop-shadow(0 1px 2px rgba(0,0,0,0.1))'
                  }} 
                />
              </button>
            )}

            <div style={{ 
              display: 'flex', 
              alignItems: 'center', 
              gap: '12px',
              paddingRight: sidebarCollapsed ? '0' : '48px'
            }}>
              <div 
                style={{
                  width: sidebarCollapsed ? '32px' : '36px',
                  height: sidebarCollapsed ? '32px' : '36px',
                  borderRadius: '10px',
                  background: 'rgba(255,255,255,0.2)',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  flexShrink: 0,
                  cursor: sidebarCollapsed ? 'pointer' : 'default',
                  transition: 'all 0.3s',
                  position: 'relative'
                }}
                onClick={sidebarCollapsed ? () => setSidebarCollapsed(false) : undefined}
                onMouseEnter={sidebarCollapsed ? (e) => {
                  e.currentTarget.style.background = 'rgba(255,255,255,0.3)'
                  e.currentTarget.style.transform = 'scale(1.1)'
                } : undefined}
                onMouseLeave={sidebarCollapsed ? (e) => {
                  e.currentTarget.style.background = 'rgba(255,255,255,0.2)'
                  e.currentTarget.style.transform = 'scale(1)'
                } : undefined}
              >
                <Trophy 
                  size={sidebarCollapsed ? 21 : 18} 
                  color="white" 
                  style={{ 
                    minWidth: sidebarCollapsed ? '21px' : '18px',
                    minHeight: sidebarCollapsed ? '21px' : '18px'
                  }}
                />
                {/* Indicador de expansión cuando está contraído */}
                {sidebarCollapsed && (
                  <div style={{
                    position: 'absolute',
                    bottom: '-2px',
                    right: '-2px',
                    width: '12px',
                    height: '12px',
                    background: 'rgba(255,255,255,0.9)',
                    borderRadius: '50%',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    fontSize: '8px',
                    color: '#059669'
                  }}>
                    <ChevronRight size={8} />
                  </div>
                )}
              </div>
              {!sidebarCollapsed && (
                <div style={{ overflow: 'hidden', flex: 1 }}>
                  <h3 style={{ 
                    fontSize: '11px', 
                    fontWeight: 600,
                    color: 'rgba(255,255,255,0.85)',
                    marginBottom: '2px',
                    textTransform: 'uppercase',
                    letterSpacing: '0.5px'
                  }}>
                    Gestión de Torneo
                  </h3>
                  <p style={{ 
                    fontSize: '13px',
                    color: 'white',
                    fontWeight: 600,
                    overflow: 'hidden',
                    textOverflow: 'ellipsis',
                    whiteSpace: 'nowrap',
                    marginBottom: '2px'
                  }}>
                    {tournamentData.tournament.name}
                  </p>
                  <p style={{ 
                    fontSize: '10px',
                    color: 'rgba(255,255,255,0.7)'
                  }}>
                    {new Date(tournamentData.tournament.startDate).toLocaleDateString('es-MX', {
                      day: 'numeric',
                      month: 'short'
                    })} - {new Date(tournamentData.tournament.endDate).toLocaleDateString('es-MX', {
                      day: 'numeric',
                      month: 'short',
                      year: 'numeric'
                    })}
                  </p>
                </div>
              )}
            </div>
          </div>
        </div>

        {/* Scrollable Content */}
        <div style={{ 
          flex: 1, 
          overflowY: 'auto',
          padding: '24px'
        }}>
          {/* Navigation Section */}
          <div style={{ marginBottom: '24px' }}>
            {!sidebarCollapsed && (
              <h4 style={{
                fontSize: '11px',
                fontWeight: 600,
                color: colors.text.tertiary,
                textTransform: 'uppercase',
                letterSpacing: '0.5px',
                marginBottom: '12px',
                paddingLeft: '4px'
              }}>
                NAVEGACIÓN
              </h4>
            )}
            <nav style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>
              {/* Vista General */}
              <div
                onClick={() => setActiveView('overview')}
                className="sidebar-item"
                style={{
                  display: 'flex',
                  alignItems: 'center',
                  padding: sidebarCollapsed ? '16px' : '12px 16px',
                  borderRadius: '12px',
                  cursor: 'pointer',
                  transition: 'all 0.2s',
                  background: activeView === 'overview' 
                    ? 'linear-gradient(135deg, #047857, #059669)'
                    : 'transparent',
                  color: activeView === 'overview' ? 'white' : colors.text.secondary,
                  gap: '12px',
                  position: 'relative',
                  justifyContent: sidebarCollapsed ? 'center' : 'flex-start'
                }}
                onMouseEnter={(e) => {
                  if (activeView !== 'overview') {
                    e.currentTarget.style.background = colors.neutral[100]
                    e.currentTarget.style.color = colors.text.primary
                  }
                }}
                onMouseLeave={(e) => {
                  if (activeView !== 'overview') {
                    e.currentTarget.style.background = 'transparent'
                    e.currentTarget.style.color = colors.text.secondary
                  }
                }}
              >
                <Grid3x3 
                  size={sidebarCollapsed ? 21 : 20} 
                  style={{ 
                    minWidth: sidebarCollapsed ? '21px' : '20px',
                    minHeight: sidebarCollapsed ? '21px' : '20px'
                  }}
                />
                {!sidebarCollapsed && (
                  <div style={{ flex: 1 }}>
                    <div style={{ fontSize: '14px', fontWeight: 600 }}>Vista General</div>
                    <div style={{ 
                      fontSize: '11px', 
                      opacity: 0.8,
                      marginTop: '2px'
                    }}>
                      Resumen del torneo
                    </div>
                  </div>
                )}
                {sidebarCollapsed && (
                  <div className="sidebar-tooltip" style={{
                    position: 'absolute',
                    left: '100%',
                    marginLeft: '12px',
                    padding: '8px 12px',
                    background: colors.neutral[900],
                    color: 'white',
                    borderRadius: '8px',
                    fontSize: '13px',
                    fontWeight: 500,
                    whiteSpace: 'nowrap',
                    opacity: 0,
                    pointerEvents: 'none',
                    transition: 'opacity 0.2s',
                    zIndex: 1000,
                    boxShadow: '0 4px 12px rgba(0,0,0,0.15)'
                  }}>
                    Vista General
                    <div style={{
                      position: 'absolute',
                      left: '-4px',
                      top: '50%',
                      transform: 'translateY(-50%)',
                      width: 0,
                      height: 0,
                      borderStyle: 'solid',
                      borderWidth: '4px 4px 4px 0',
                      borderColor: `transparent ${colors.neutral[900]} transparent transparent`
                    }} />
                  </div>
                )}
              </div>

              {/* Inscritos */}
              <div
                onClick={() => {
                  setActiveView('registrations')
                  fetchRegistrations()
                }}
                className="sidebar-item"
                style={{
                  display: 'flex',
                  alignItems: 'center',
                  padding: sidebarCollapsed ? '16px' : '12px 16px',
                  borderRadius: '12px',
                  cursor: 'pointer',
                  transition: 'all 0.2s',
                  background: activeView === 'registrations' 
                    ? 'linear-gradient(135deg, #047857, #059669)'
                    : 'transparent',
                  color: activeView === 'registrations' ? 'white' : colors.text.secondary,
                  gap: '12px',
                  position: 'relative',
                  justifyContent: sidebarCollapsed ? 'center' : 'flex-start'
                }}
                onMouseEnter={(e) => {
                  if (activeView !== 'registrations') {
                    e.currentTarget.style.background = colors.neutral[100]
                    e.currentTarget.style.color = colors.text.primary
                  }
                }}
                onMouseLeave={(e) => {
                  if (activeView !== 'registrations') {
                    e.currentTarget.style.background = 'transparent'
                    e.currentTarget.style.color = colors.text.secondary
                  }
                }}
              >
                <Users 
                  size={sidebarCollapsed ? 21 : 20} 
                  style={{ 
                    minWidth: sidebarCollapsed ? '21px' : '20px',
                    minHeight: sidebarCollapsed ? '21px' : '20px'
                  }}
                />
                {!sidebarCollapsed && (
                  <div style={{ flex: 1 }}>
                    <div style={{ fontSize: '14px', fontWeight: 600 }}>Inscritos</div>
                    <div style={{ 
                      fontSize: '11px', 
                      opacity: 0.8,
                      marginTop: '2px'
                    }}>
                      Gestionar participantes
                    </div>
                  </div>
                )}
                {sidebarCollapsed && (
                  <div className="sidebar-tooltip" style={{
                    position: 'absolute',
                    left: '100%',
                    marginLeft: '12px',
                    padding: '8px 12px',
                    background: colors.neutral[900],
                    color: 'white',
                    borderRadius: '8px',
                    fontSize: '13px',
                    fontWeight: 500,
                    whiteSpace: 'nowrap',
                    opacity: 0,
                    pointerEvents: 'none',
                    transition: 'opacity 0.2s',
                    zIndex: 1000,
                    boxShadow: '0 4px 12px rgba(0,0,0,0.15)'
                  }}>
                    Inscritos
                    <div style={{
                      position: 'absolute',
                      left: '-4px',
                      top: '50%',
                      transform: 'translateY(-50%)',
                      width: 0,
                      height: 0,
                      borderStyle: 'solid',
                      borderWidth: '4px 4px 4px 0',
                      borderColor: `transparent ${colors.neutral[900]} transparent transparent`
                    }} />
                  </div>
                )}
              </div>

              {/* Modo Recepción - Solo visible el día del torneo */}
              <div
                onClick={() => {
                  setActiveView('reception')
                  fetchRegistrations()
                }}
                className="sidebar-item"
                style={{
                  display: 'flex',
                  alignItems: 'center',
                  padding: sidebarCollapsed ? '16px' : '12px 16px',
                  borderRadius: '12px',
                  cursor: 'pointer',
                  transition: 'all 0.2s',
                  background: activeView === 'reception' 
                    ? 'linear-gradient(135deg, #8B5CF6, #7C3AED)'
                    : 'transparent',
                  color: activeView === 'reception' ? 'white' : colors.text.secondary,
                  gap: '12px',
                  position: 'relative',
                  justifyContent: sidebarCollapsed ? 'center' : 'flex-start'
                }}
                onMouseEnter={(e) => {
                  if (activeView !== 'reception') {
                    e.currentTarget.style.background = colors.neutral[100]
                    e.currentTarget.style.color = colors.text.primary
                  }
                }}
                onMouseLeave={(e) => {
                  if (activeView !== 'reception') {
                    e.currentTarget.style.background = 'transparent'
                    e.currentTarget.style.color = colors.text.secondary
                  }
                }}
              >
                <CheckCircle 
                  size={sidebarCollapsed ? 21 : 20} 
                  style={{ 
                    minWidth: sidebarCollapsed ? '21px' : '20px',
                    minHeight: sidebarCollapsed ? '21px' : '20px'
                  }}
                />
                {!sidebarCollapsed && (
                  <div style={{ flex: 1 }}>
                    <div style={{ fontSize: '14px', fontWeight: 600 }}>Recepción</div>
                    <div style={{ 
                      fontSize: '11px', 
                      opacity: 0.8,
                      marginTop: '2px'
                    }}>
                      Check-in de equipos
                    </div>
                  </div>
                )}
                {sidebarCollapsed && (
                  <div className="sidebar-tooltip" style={{
                    position: 'absolute',
                    left: '100%',
                    marginLeft: '12px',
                    padding: '8px 12px',
                    background: colors.neutral[900],
                    color: 'white',
                    borderRadius: '8px',
                    fontSize: '13px',
                    fontWeight: 500,
                    whiteSpace: 'nowrap',
                    opacity: 0,
                    pointerEvents: 'none',
                    transition: 'opacity 0.2s',
                    zIndex: 1000,
                    boxShadow: '0 4px 12px rgba(0,0,0,0.15)'
                  }}>
                    Modo Recepción
                    <div style={{
                      position: 'absolute',
                      left: '-4px',
                      top: '50%',
                      transform: 'translateY(-50%)',
                      width: 0,
                      height: 0,
                      borderStyle: 'solid',
                      borderWidth: '4px 4px 4px 0',
                      borderColor: `transparent ${colors.neutral[900]} transparent transparent`
                    }} />
                  </div>
                )}
              </div>

              {/* Programación */}
              <div
                onClick={() => setActiveView('schedule')}
                className="sidebar-item"
                style={{
                  display: 'flex',
                  alignItems: 'center',
                  padding: sidebarCollapsed ? '16px' : '12px 16px',
                  borderRadius: '12px',
                  cursor: 'pointer',
                  transition: 'all 0.2s',
                  background: activeView === 'schedule' 
                    ? 'linear-gradient(135deg, #047857, #059669)'
                    : 'transparent',
                  color: activeView === 'schedule' ? 'white' : colors.text.secondary,
                  gap: '12px',
                  position: 'relative',
                  justifyContent: sidebarCollapsed ? 'center' : 'flex-start'
                }}
                onMouseEnter={(e) => {
                  if (activeView !== 'schedule') {
                    e.currentTarget.style.background = colors.neutral[100]
                    e.currentTarget.style.color = colors.text.primary
                  }
                }}
                onMouseLeave={(e) => {
                  if (activeView !== 'schedule') {
                    e.currentTarget.style.background = 'transparent'
                    e.currentTarget.style.color = colors.text.secondary
                  }
                }}
              >
                <Calendar 
                  size={sidebarCollapsed ? 21 : 20} 
                  style={{ 
                    minWidth: sidebarCollapsed ? '21px' : '20px',
                    minHeight: sidebarCollapsed ? '21px' : '20px'
                  }}
                />
                {!sidebarCollapsed && (
                  <div style={{ flex: 1 }}>
                    <div style={{ fontSize: '14px', fontWeight: 600 }}>Programación</div>
                    <div style={{ 
                      fontSize: '11px', 
                      opacity: 0.8,
                      marginTop: '2px'
                    }}>
                      Calendario de partidos
                    </div>
                  </div>
                )}
                {sidebarCollapsed && (
                  <div className="sidebar-tooltip" style={{
                    position: 'absolute',
                    left: '100%',
                    marginLeft: '12px',
                    padding: '8px 12px',
                    background: colors.neutral[900],
                    color: 'white',
                    borderRadius: '8px',
                    fontSize: '13px',
                    fontWeight: 500,
                    whiteSpace: 'nowrap',
                    opacity: 0,
                    pointerEvents: 'none',
                    transition: 'opacity 0.2s',
                    zIndex: 1000,
                    boxShadow: '0 4px 12px rgba(0,0,0,0.15)'
                  }}>
                    Programación
                    <div style={{
                      position: 'absolute',
                      left: '-4px',
                      top: '50%',
                      transform: 'translateY(-50%)',
                      width: 0,
                      height: 0,
                      borderStyle: 'solid',
                      borderWidth: '4px 4px 4px 0',
                      borderColor: `transparent ${colors.neutral[900]} transparent transparent`
                    }} />
                  </div>
                )}
              </div>

              {/* Vista Kanban */}
              <div
                onClick={() => setActiveView('kanban')}
                className="sidebar-item"
                style={{
                  display: 'flex',
                  alignItems: 'center',
                  padding: sidebarCollapsed ? '16px' : '12px 16px',
                  borderRadius: '12px',
                  cursor: 'pointer',
                  transition: 'all 0.2s',
                  background: activeView === 'kanban' 
                    ? 'linear-gradient(135deg, #047857, #059669)'
                    : 'transparent',
                  color: activeView === 'kanban' ? 'white' : colors.text.secondary,
                  gap: '12px',
                  position: 'relative',
                  justifyContent: sidebarCollapsed ? 'center' : 'flex-start'
                }}
                onMouseEnter={(e) => {
                  if (activeView !== 'kanban') {
                    e.currentTarget.style.background = colors.neutral[100]
                    e.currentTarget.style.color = colors.text.primary
                  }
                }}
                onMouseLeave={(e) => {
                  if (activeView !== 'kanban') {
                    e.currentTarget.style.background = 'transparent'
                    e.currentTarget.style.color = colors.text.secondary
                  }
                }}
              >
                <Columns3 
                  size={sidebarCollapsed ? 21 : 20} 
                  style={{ 
                    minWidth: sidebarCollapsed ? '21px' : '20px',
                    minHeight: sidebarCollapsed ? '21px' : '20px'
                  }}
                />
                {!sidebarCollapsed && (
                  <div style={{ flex: 1 }}>
                    <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                      <span style={{ fontSize: '14px', fontWeight: 600 }}>Vista Kanban</span>
                      <span style={{
                        padding: '2px 6px',
                        borderRadius: '6px',
                        background: activeView === 'kanban' 
                          ? 'rgba(255,255,255,0.2)' 
                          : 'linear-gradient(135deg, #a855f7, #9333ea)',
                        color: 'white',
                        fontSize: '10px',
                        fontWeight: 600
                      }}>PRO</span>
                    </div>
                    <div style={{ 
                      fontSize: '11px', 
                      opacity: 0.8,
                      marginTop: '2px'
                    }}>
                      Estado de canchas
                    </div>
                  </div>
                )}
                {sidebarCollapsed && (
                  <div className="sidebar-tooltip" style={{
                    position: 'absolute',
                    left: '100%',
                    marginLeft: '12px',
                    padding: '8px 12px',
                    background: colors.neutral[900],
                    color: 'white',
                    borderRadius: '8px',
                    fontSize: '13px',
                    fontWeight: 500,
                    whiteSpace: 'nowrap',
                    opacity: 0,
                    pointerEvents: 'none',
                    transition: 'opacity 0.2s',
                    zIndex: 1000,
                    boxShadow: '0 4px 12px rgba(0,0,0,0.15)'
                  }}>
                    Vista Kanban
                    <div style={{
                      position: 'absolute',
                      left: '-4px',
                      top: '50%',
                      transform: 'translateY(-50%)',
                      width: 0,
                      height: 0,
                      borderStyle: 'solid',
                      borderWidth: '4px 4px 4px 0',
                      borderColor: `transparent ${colors.neutral[900]} transparent transparent`
                    }} />
                  </div>
                )}
              </div>

              {/* Captura Masiva */}
              <div
                onClick={() => setActiveView('capture')}
                className="sidebar-item"
                style={{
                  display: 'flex',
                  alignItems: 'center',
                  padding: sidebarCollapsed ? '16px' : '12px 16px',
                  borderRadius: '12px',
                  cursor: 'pointer',
                  transition: 'all 0.2s',
                  background: activeView === 'capture' 
                    ? 'linear-gradient(135deg, #047857, #059669)'
                    : 'transparent',
                  color: activeView === 'capture' ? 'white' : colors.text.secondary,
                  gap: '12px',
                  position: 'relative',
                  justifyContent: sidebarCollapsed ? 'center' : 'flex-start'
                }}
                onMouseEnter={(e) => {
                  if (activeView !== 'capture') {
                    e.currentTarget.style.background = colors.neutral[100]
                    e.currentTarget.style.color = colors.text.primary
                  }
                }}
                onMouseLeave={(e) => {
                  if (activeView !== 'capture') {
                    e.currentTarget.style.background = 'transparent'
                    e.currentTarget.style.color = colors.text.secondary
                  }
                }}
              >
                <Camera 
                  size={sidebarCollapsed ? 21 : 20} 
                  style={{ 
                    minWidth: sidebarCollapsed ? '21px' : '20px',
                    minHeight: sidebarCollapsed ? '21px' : '20px'
                  }}
                />
                {!sidebarCollapsed && (
                  <div style={{ flex: 1 }}>
                    <div style={{ fontSize: '14px', fontWeight: 600 }}>Captura Masiva</div>
                    <div style={{ 
                      fontSize: '11px', 
                      opacity: 0.8,
                      marginTop: '2px'
                    }}>
                      Registrar resultados
                    </div>
                  </div>
                )}
                {sidebarCollapsed && (
                  <div className="sidebar-tooltip" style={{
                    position: 'absolute',
                    left: '100%',
                    marginLeft: '12px',
                    padding: '8px 12px',
                    background: colors.neutral[900],
                    color: 'white',
                    borderRadius: '8px',
                    fontSize: '13px',
                    fontWeight: 500,
                    whiteSpace: 'nowrap',
                    opacity: 0,
                    pointerEvents: 'none',
                    transition: 'opacity 0.2s',
                    zIndex: 1000,
                    boxShadow: '0 4px 12px rgba(0,0,0,0.15)'
                  }}>
                    Captura Masiva
                    <div style={{
                      position: 'absolute',
                      left: '-4px',
                      top: '50%',
                      transform: 'translateY(-50%)',
                      width: 0,
                      height: 0,
                      borderStyle: 'solid',
                      borderWidth: '4px 4px 4px 0',
                      borderColor: `transparent ${colors.neutral[900]} transparent transparent`
                    }} />
                  </div>
                )}
              </div>

              {/* Modo TV */}
              <div
                onClick={() => setActiveView('tv')}
                className="sidebar-item"
                style={{
                  display: 'flex',
                  alignItems: 'center',
                  padding: sidebarCollapsed ? '16px' : '12px 16px',
                  borderRadius: '12px',
                  cursor: 'pointer',
                  transition: 'all 0.2s',
                  background: activeView === 'tv' 
                    ? 'linear-gradient(135deg, #047857, #059669)'
                    : 'transparent',
                  color: activeView === 'tv' ? 'white' : colors.text.secondary,
                  gap: '12px',
                  position: 'relative',
                  justifyContent: sidebarCollapsed ? 'center' : 'flex-start'
                }}
                onMouseEnter={(e) => {
                  if (activeView !== 'tv') {
                    e.currentTarget.style.background = colors.neutral[100]
                    e.currentTarget.style.color = colors.text.primary
                  }
                }}
                onMouseLeave={(e) => {
                  if (activeView !== 'tv') {
                    e.currentTarget.style.background = 'transparent'
                    e.currentTarget.style.color = colors.text.secondary
                  }
                }}
              >
                <Tv2 
                  size={sidebarCollapsed ? 21 : 20} 
                  style={{ 
                    minWidth: sidebarCollapsed ? '21px' : '20px',
                    minHeight: sidebarCollapsed ? '21px' : '20px'
                  }}
                />
                {!sidebarCollapsed && (
                  <div style={{ flex: 1 }}>
                    <div style={{ fontSize: '14px', fontWeight: 600 }}>Modo TV</div>
                    <div style={{ 
                      fontSize: '11px', 
                      opacity: 0.8,
                      marginTop: '2px'
                    }}>
                      Pantalla pública
                    </div>
                  </div>
                )}
                {sidebarCollapsed && (
                  <div className="sidebar-tooltip" style={{
                    position: 'absolute',
                    left: '100%',
                    marginLeft: '12px',
                    padding: '8px 12px',
                    background: colors.neutral[900],
                    color: 'white',
                    borderRadius: '8px',
                    fontSize: '13px',
                    fontWeight: 500,
                    whiteSpace: 'nowrap',
                    opacity: 0,
                    pointerEvents: 'none',
                    transition: 'opacity 0.2s',
                    zIndex: 1000,
                    boxShadow: '0 4px 12px rgba(0,0,0,0.15)'
                  }}>
                    Modo TV
                    <div style={{
                      position: 'absolute',
                      left: '-4px',
                      top: '50%',
                      transform: 'translateY(-50%)',
                      width: 0,
                      height: 0,
                      borderStyle: 'solid',
                      borderWidth: '4px 4px 4px 0',
                      borderColor: `transparent ${colors.neutral[900]} transparent transparent`
                    }} />
                  </div>
                )}
              </div>

              {/* QR & Conflictos */}
              <div
                onClick={() => setActiveView('qr-conflicts')}
                className="sidebar-item"
                style={{
                  display: 'flex',
                  alignItems: 'center',
                  padding: sidebarCollapsed ? '16px' : '12px 16px',
                  borderRadius: '12px',
                  cursor: 'pointer',
                  transition: 'all 0.2s',
                  background: activeView === 'qr-conflicts' 
                    ? 'linear-gradient(135deg, #047857, #059669)'
                    : 'transparent',
                  color: activeView === 'qr-conflicts' ? 'white' : colors.text.secondary,
                  gap: '12px',
                  position: 'relative',
                  justifyContent: sidebarCollapsed ? 'center' : 'flex-start'
                }}
                onMouseEnter={(e) => {
                  if (activeView !== 'qr-conflicts') {
                    e.currentTarget.style.background = colors.neutral[100]
                    e.currentTarget.style.color = colors.text.primary
                  }
                }}
                onMouseLeave={(e) => {
                  if (activeView !== 'qr-conflicts') {
                    e.currentTarget.style.background = 'transparent'
                    e.currentTarget.style.color = colors.text.secondary
                  }
                }}
              >
                <div style={{ position: 'relative' }}>
                  <QrCode 
                    size={sidebarCollapsed ? 21 : 20} 
                    style={{ 
                      minWidth: sidebarCollapsed ? '21px' : '20px',
                      minHeight: sidebarCollapsed ? '21px' : '20px'
                    }}
                  />
                  {sidebarCollapsed && conflictsCount > 0 && (
                    <div style={{
                      position: 'absolute',
                      top: '-4px',
                      right: '-4px',
                      background: '#DC2626',
                      color: 'white',
                      fontSize: '10px',
                      fontWeight: 600,
                      padding: '1px 4px',
                      borderRadius: '8px',
                      minWidth: '14px',
                      textAlign: 'center',
                      border: '1px solid white'
                    }}>
                      {conflictsCount}
                    </div>
                  )}
                </div>
                {!sidebarCollapsed && (
                  <div style={{ flex: 1, display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
                    <div>
                      <div style={{ fontSize: '14px', fontWeight: 600 }}>QR & Conflictos</div>
                      <div style={{ 
                        fontSize: '11px', 
                        opacity: 0.8,
                        marginTop: '2px'
                      }}>
                        Códigos QR y resolución
                      </div>
                    </div>
                    {conflictsCount > 0 && (
                      <div style={{
                        background: '#DC2626',
                        color: 'white',
                        fontSize: '11px',
                        fontWeight: 600,
                        padding: '2px 6px',
                        borderRadius: '10px',
                        minWidth: '20px',
                        textAlign: 'center'
                      }}>
                        {conflictsCount}
                      </div>
                    )}
                  </div>
                )}
                {sidebarCollapsed && (
                  <div className="sidebar-tooltip" style={{
                    position: 'absolute',
                    left: '100%',
                    marginLeft: '12px',
                    padding: '8px 12px',
                    background: colors.neutral[900],
                    color: 'white',
                    borderRadius: '8px',
                    fontSize: '13px',
                    fontWeight: 500,
                    whiteSpace: 'nowrap',
                    opacity: 0,
                    pointerEvents: 'none',
                    transition: 'opacity 0.2s',
                    zIndex: 1000,
                    boxShadow: '0 4px 12px rgba(0,0,0,0.15)'
                  }}>
                    QR & Conflictos
                    <div style={{
                      position: 'absolute',
                      left: '-4px',
                      top: '50%',
                      transform: 'translateY(-50%)',
                      width: 0,
                      height: 0,
                      borderTop: '4px solid transparent',
                      borderBottom: '4px solid transparent',
                      borderRight: `4px solid ${colors.neutral[900]}`
                    }} />
                  </div>
                )}
              </div>
            </nav>
          </div>

          {/* Categorías Section */}
          <div style={{ marginTop: '24px' }}>
            {!sidebarCollapsed && (
              <div 
                style={{ 
                  display: 'flex', 
                  alignItems: 'center', 
                  justifyContent: 'space-between',
                  cursor: 'pointer',
                  padding: '8px 12px',
                  marginBottom: '12px',
                  borderRadius: '6px',
                  transition: 'background 0.2s'
                }}
                onClick={() => setCategoriesExpanded(!categoriesExpanded)}
                onMouseEnter={(e) => {
                  e.currentTarget.style.background = colors.neutral[100]
                }}
                onMouseLeave={(e) => {
                  e.currentTarget.style.background = 'transparent'
                }}
              >
                <span style={{ 
                  fontSize: '11px', 
                  fontWeight: 600, 
                  color: colors.text.tertiary,
                  textTransform: 'uppercase',
                  letterSpacing: '0.5px'
                }}>
                  CATEGORÍAS
                </span>
                <ChevronDown 
                  size={14} 
                  style={{ 
                    color: colors.text.tertiary,
                    transform: categoriesExpanded ? 'rotate(0deg)' : 'rotate(-90deg)',
                    transition: 'transform 0.2s'
                  }} 
                />
              </div>
            )}
            
            {categoriesExpanded && !sidebarCollapsed && (
            <div style={{ 
              marginTop: '-8px',
              animation: 'slideDown 0.2s ease-out'
            }}>
              {/* Submenú Masculino */}
              {(() => {
                const masculineCategories = tournamentData?.categories?.filter(cat => cat.modality === 'masculine') || []
                if (masculineCategories.length === 0) return null
                
                return (
                  <div style={{ marginBottom: '8px' }}>
                    <div 
                      style={{ 
                        display: 'flex', 
                        alignItems: 'center', 
                        justifyContent: 'space-between',
                        cursor: 'pointer',
                        padding: '6px 12px',
                        marginBottom: '4px',
                        borderRadius: '6px',
                        background: masculineExpanded ? 'rgba(59, 130, 246, 0.05)' : 'transparent',
                        transition: 'all 0.2s',
                      }}
                      onClick={() => setMasculineExpanded(!masculineExpanded)}
                      onMouseEnter={(e) => {
                        e.currentTarget.style.background = masculineExpanded 
                          ? 'rgba(59, 130, 246, 0.08)' 
                          : colors.neutral[100]
                      }}
                      onMouseLeave={(e) => {
                        e.currentTarget.style.background = masculineExpanded 
                          ? 'rgba(59, 130, 246, 0.05)' 
                          : 'transparent'
                      }}
                    >
                      <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                        <span style={{ fontSize: '16px' }}>♂️</span>
                        <span style={{ 
                          fontSize: '12px', 
                          fontWeight: 600, 
                          color: colors.text.secondary
                        }}>
                          Masculino
                        </span>
                        <span style={{
                          padding: '2px 6px',
                          borderRadius: '10px',
                          background: 'rgba(59, 130, 246, 0.1)',
                          color: 'rgb(59, 130, 246)',
                          fontSize: '10px',
                          fontWeight: 600
                        }}>
                          {masculineCategories.length}
                        </span>
                      </div>
                      <ChevronDown 
                        size={12} 
                        style={{ 
                          color: colors.text.tertiary,
                          transform: masculineExpanded ? 'rotate(0deg)' : 'rotate(-90deg)',
                          transition: 'transform 0.2s'
                        }} 
                      />
                    </div>
                    {masculineExpanded && (
                      <div style={{ paddingLeft: '20px', animation: 'slideDown 0.2s ease-out' }}>
                        {masculineCategories.map((cat, idx) => (
                          <div
                            key={`m-${idx}`}
                            onClick={() => setSelectedCategory(`${cat.code}-${cat.modality}`)}
                            style={{
                              display: 'flex',
                              alignItems: 'center',
                              justifyContent: 'space-between',
                              padding: '8px 12px',
                              marginBottom: '4px',
                              borderRadius: '8px',
                              cursor: 'pointer',
                              transition: 'all 0.2s',
                              background: selectedCategory === `${cat.code}-${cat.modality}`
                                ? 'rgba(59, 130, 246, 0.1)'
                                : 'transparent',
                              color: selectedCategory === `${cat.code}-${cat.modality}`
                                ? 'rgb(59, 130, 246)'
                                : colors.text.secondary
                            }}
                            onMouseEnter={(e) => {
                              if (selectedCategory !== `${cat.code}-${cat.modality}`) {
                                e.currentTarget.style.background = 'rgba(59, 130, 246, 0.05)'
                              }
                            }}
                            onMouseLeave={(e) => {
                              if (selectedCategory !== `${cat.code}-${cat.modality}`) {
                                e.currentTarget.style.background = 'transparent'
                              }
                            }}
                          >
                            <span style={{ fontSize: '12px', fontWeight: 500 }}>{cat.code}</span>
                            <span style={{
                              padding: '2px 6px',
                              borderRadius: '10px',
                              background: selectedCategory === `${cat.code}-${cat.modality}` 
                                ? 'rgb(59, 130, 246)' 
                                : 'rgba(59, 130, 246, 0.1)',
                              color: selectedCategory === `${cat.code}-${cat.modality}` 
                                ? 'white' 
                                : 'rgb(59, 130, 246)',
                              fontSize: '10px',
                              fontWeight: 600
                            }}>
                              {cat.teams}
                            </span>
                          </div>
                        ))}
                      </div>
                    )}
                  </div>
                )
              })()}

              {/* Submenú Femenino */}
              {(() => {
                const feminineCategories = tournamentData?.categories?.filter(cat => cat.modality === 'feminine') || []
                if (feminineCategories.length === 0) return null
                
                return (
                  <div style={{ marginBottom: '8px' }}>
                    <div 
                      style={{ 
                        display: 'flex', 
                        alignItems: 'center', 
                        justifyContent: 'space-between',
                        cursor: 'pointer',
                        padding: '6px 12px',
                        marginBottom: '4px',
                        borderRadius: '6px',
                        background: feminineExpanded ? 'rgba(236, 72, 153, 0.05)' : 'transparent',
                        transition: 'all 0.2s',
                      }}
                      onClick={() => setFeminineExpanded(!feminineExpanded)}
                      onMouseEnter={(e) => {
                        e.currentTarget.style.background = feminineExpanded 
                          ? 'rgba(236, 72, 153, 0.08)' 
                          : colors.neutral[100]
                      }}
                      onMouseLeave={(e) => {
                        e.currentTarget.style.background = feminineExpanded 
                          ? 'rgba(236, 72, 153, 0.05)' 
                          : 'transparent'
                      }}
                    >
                      <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                        <span style={{ fontSize: '16px' }}>♀️</span>
                        <span style={{ 
                          fontSize: '12px', 
                          fontWeight: 600, 
                          color: colors.text.secondary
                        }}>
                          Femenino
                        </span>
                        <span style={{
                          padding: '2px 6px',
                          borderRadius: '10px',
                          background: 'rgba(236, 72, 153, 0.1)',
                          color: 'rgb(236, 72, 153)',
                          fontSize: '10px',
                          fontWeight: 600
                        }}>
                          {feminineCategories.length}
                        </span>
                      </div>
                      <ChevronDown 
                        size={12} 
                        style={{ 
                          color: colors.text.tertiary,
                          transform: feminineExpanded ? 'rotate(0deg)' : 'rotate(-90deg)',
                          transition: 'transform 0.2s'
                        }} 
                      />
                    </div>
                    {feminineExpanded && (
                      <div style={{ paddingLeft: '20px', animation: 'slideDown 0.2s ease-out' }}>
                        {feminineCategories.map((cat, idx) => (
                          <div
                            key={`f-${idx}`}
                            onClick={() => setSelectedCategory(`${cat.code}-${cat.modality}`)}
                            style={{
                              display: 'flex',
                              alignItems: 'center',
                              justifyContent: 'space-between',
                              padding: '8px 12px',
                              marginBottom: '4px',
                              borderRadius: '8px',
                              cursor: 'pointer',
                              transition: 'all 0.2s',
                              background: selectedCategory === `${cat.code}-${cat.modality}`
                                ? 'rgba(236, 72, 153, 0.1)'
                                : 'transparent',
                              color: selectedCategory === `${cat.code}-${cat.modality}`
                                ? 'rgb(236, 72, 153)'
                                : colors.text.secondary
                            }}
                            onMouseEnter={(e) => {
                              if (selectedCategory !== `${cat.code}-${cat.modality}`) {
                                e.currentTarget.style.background = 'rgba(236, 72, 153, 0.05)'
                              }
                            }}
                            onMouseLeave={(e) => {
                              if (selectedCategory !== `${cat.code}-${cat.modality}`) {
                                e.currentTarget.style.background = 'transparent'
                              }
                            }}
                          >
                            <span style={{ fontSize: '12px', fontWeight: 500 }}>{cat.code}</span>
                            <span style={{
                              padding: '2px 6px',
                              borderRadius: '10px',
                              background: selectedCategory === `${cat.code}-${cat.modality}` 
                                ? 'rgb(236, 72, 153)' 
                                : 'rgba(236, 72, 153, 0.1)',
                              color: selectedCategory === `${cat.code}-${cat.modality}` 
                                ? 'white' 
                                : 'rgb(236, 72, 153)',
                              fontSize: '10px',
                              fontWeight: 600
                            }}>
                              {cat.teams}
                            </span>
                          </div>
                        ))}
                      </div>
                    )}
                  </div>
                )
              })()}

              {/* Submenú Mixto */}
              {(() => {
                const mixedCategories = tournamentData?.categories?.filter(cat => cat.modality === 'mixed') || []
                if (mixedCategories.length === 0) return null
                
                return (
                  <div style={{ marginBottom: '8px' }}>
                    <div 
                      style={{ 
                        display: 'flex', 
                        alignItems: 'center', 
                        justifyContent: 'space-between',
                        cursor: 'pointer',
                        padding: '6px 12px',
                        marginBottom: '4px',
                        borderRadius: '6px',
                        background: mixedExpanded ? 'rgba(168, 85, 247, 0.05)' : 'transparent',
                        transition: 'all 0.2s',
                      }}
                      onClick={() => setMixedExpanded(!mixedExpanded)}
                      onMouseEnter={(e) => {
                        e.currentTarget.style.background = mixedExpanded 
                          ? 'rgba(168, 85, 247, 0.08)' 
                          : colors.neutral[100]
                      }}
                      onMouseLeave={(e) => {
                        e.currentTarget.style.background = mixedExpanded 
                          ? 'rgba(168, 85, 247, 0.05)' 
                          : 'transparent'
                      }}
                    >
                      <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                        <span style={{ fontSize: '16px' }}>⚥</span>
                        <span style={{ 
                          fontSize: '12px', 
                          fontWeight: 600, 
                          color: colors.text.secondary
                        }}>
                          Mixto
                        </span>
                        <span style={{
                          padding: '2px 6px',
                          borderRadius: '10px',
                          background: 'rgba(168, 85, 247, 0.1)',
                          color: 'rgb(168, 85, 247)',
                          fontSize: '10px',
                          fontWeight: 600
                        }}>
                          {mixedCategories.length}
                        </span>
                      </div>
                      <ChevronDown 
                        size={12} 
                        style={{ 
                          color: colors.text.tertiary,
                          transform: mixedExpanded ? 'rotate(0deg)' : 'rotate(-90deg)',
                          transition: 'transform 0.2s'
                        }} 
                      />
                    </div>
                    {mixedExpanded && (
                      <div style={{ paddingLeft: '20px', animation: 'slideDown 0.2s ease-out' }}>
                        {mixedCategories.map((cat, idx) => (
                          <div
                            key={`x-${idx}`}
                            onClick={() => setSelectedCategory(`${cat.code}-${cat.modality}`)}
                            style={{
                              display: 'flex',
                              alignItems: 'center',
                              justifyContent: 'space-between',
                              padding: '8px 12px',
                              marginBottom: '4px',
                              borderRadius: '8px',
                              cursor: 'pointer',
                              transition: 'all 0.2s',
                              background: selectedCategory === `${cat.code}-${cat.modality}`
                                ? 'rgba(168, 85, 247, 0.1)'
                                : 'transparent',
                              color: selectedCategory === `${cat.code}-${cat.modality}`
                                ? 'rgb(168, 85, 247)'
                                : colors.text.secondary
                            }}
                            onMouseEnter={(e) => {
                              if (selectedCategory !== `${cat.code}-${cat.modality}`) {
                                e.currentTarget.style.background = 'rgba(168, 85, 247, 0.05)'
                              }
                            }}
                            onMouseLeave={(e) => {
                              if (selectedCategory !== `${cat.code}-${cat.modality}`) {
                                e.currentTarget.style.background = 'transparent'
                              }
                            }}
                          >
                            <span style={{ fontSize: '12px', fontWeight: 500 }}>{cat.code}</span>
                            <span style={{
                              padding: '2px 6px',
                              borderRadius: '10px',
                              background: selectedCategory === `${cat.code}-${cat.modality}` 
                                ? 'rgb(168, 85, 247)' 
                                : 'rgba(168, 85, 247, 0.1)',
                              color: selectedCategory === `${cat.code}-${cat.modality}` 
                                ? 'white' 
                                : 'rgb(168, 85, 247)',
                              fontSize: '10px',
                              fontWeight: 600
                            }}>
                              {cat.teams}
                            </span>
                          </div>
                        ))}
                      </div>
                    )}
                  </div>
                )
              })()}
            </div>
          )}
          {sidebarCollapsed && (
            <div style={{ 
              display: 'flex',
              flexDirection: 'column',
              alignItems: 'center',
              gap: '4px',
              padding: '8px 0'
            }}>
              <div style={{
                width: '32px',
                height: '32px',
                borderRadius: '8px',
                background: colors.neutral[100],
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                fontSize: '10px',
                fontWeight: 600,
                color: colors.text.secondary
              }}>
                {tournamentData?.categories?.length || 0}
              </div>
            </div>
          )}
          </div>
        </div>

        {/* Footer */}
        <div style={{ 
          padding: '16px',
          borderTop: `1px solid ${colors.border.light}`,
          marginTop: 'auto'
        }}>
          <div
            className="sidebar-item"
            style={{
              display: 'flex',
              alignItems: 'center',
              padding: sidebarCollapsed ? '12px' : '12px 16px',
              borderRadius: '12px',
              cursor: 'pointer',
              transition: 'all 0.2s',
              color: colors.text.secondary,
              gap: '12px',
              position: 'relative',
              justifyContent: sidebarCollapsed ? 'center' : 'flex-start'
            }}
            onMouseEnter={(e) => {
              e.currentTarget.style.background = colors.neutral[100]
              e.currentTarget.style.color = colors.text.primary
            }}
            onMouseLeave={(e) => {
              e.currentTarget.style.background = 'transparent'
              e.currentTarget.style.color = colors.text.secondary
            }}
          >
            <Settings 
              size={sidebarCollapsed ? 21 : 20} 
              style={{ 
                minWidth: sidebarCollapsed ? '21px' : '20px',
                minHeight: sidebarCollapsed ? '21px' : '20px'
              }}
            />
            {!sidebarCollapsed && (
              <span style={{ fontSize: '14px', fontWeight: 500 }}>Configuración</span>
            )}
            {sidebarCollapsed && (
              <div className="sidebar-tooltip" style={{
                position: 'absolute',
                left: '100%',
                marginLeft: '12px',
                padding: '8px 12px',
                background: colors.neutral[900],
                color: 'white',
                borderRadius: '8px',
                fontSize: '13px',
                fontWeight: 500,
                whiteSpace: 'nowrap',
                opacity: 0,
                pointerEvents: 'none',
                transition: 'opacity 0.2s',
                zIndex: 1000,
                boxShadow: '0 4px 12px rgba(0,0,0,0.15)'
              }}>
                Configuración
                <div style={{
                  position: 'absolute',
                  left: '-4px',
                  top: '50%',
                  transform: 'translateY(-50%)',
                  width: 0,
                  height: 0,
                  borderStyle: 'solid',
                  borderWidth: '4px 4px 4px 0',
                  borderColor: `transparent ${colors.neutral[900]} transparent transparent`
                }} />
              </div>
            )}
          </div>
        </div>
      </aside>

      {/* Main Content */}
      <div style={{ 
        flex: 1, 
        overflow: 'auto',
        padding: '32px'
      }}>
        {/* Header */}
        <div style={{ 
          marginBottom: '32px',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'space-between'
        }}>
          <div>
            <h1 style={{ 
              fontSize: '32px', 
              fontWeight: 700,
              color: colors.text.primary,
              letterSpacing: '-0.03em',
              marginBottom: '8px'
            }}>
              {tournamentData.tournament.name}
            </h1>
            <p style={{ 
              fontSize: '14px',
              color: colors.text.secondary
            }}>
              {tournamentData.tournament.club.name} • Gestiona todas las operaciones del torneo
            </p>
          </div>

          <div style={{ display: 'flex', gap: '12px' }}>
            <button 
              onClick={() => window.location.href = '/dashboard'}
              style={{
                padding: '10px 20px',
                borderRadius: '12px',
                background: '#10b981',
                color: '#1f2937',
                border: 'none',
                cursor: 'pointer',
                fontSize: '14px',
                fontWeight: 600,
                display: 'flex',
                alignItems: 'center',
                gap: '8px',
                transition: 'all 0.2s'
              }}
              onMouseEnter={(e) => {
                e.currentTarget.style.background = '#059669'
              }}
              onMouseLeave={(e) => {
                e.currentTarget.style.background = '#10b981'
              }}
            >
              ← Volver a Club
            </button>
          </div>
        </div>

        {/* Vista General */}
        {activeView === 'overview' && (
          <>
            {/* Panel de Estado Principal - Diseño moderno y minimalista */}
            <CardModern variant="glass" padding="none" style={{ 
              marginBottom: '32px',
              boxShadow: '0 4px 24px rgba(0,0,0,0.06)',
              border: `1px solid ${colors.border.light}`,
              overflow: 'hidden'
            }}>
              {/* Header con información básica */}
              <div style={{
                padding: '24px 32px',
                borderBottom: `1px solid ${colors.border.light}`,
                background: 'white'
              }}>
                <div style={{ 
                  display: 'flex', 
                  justifyContent: 'space-between',
                  alignItems: 'center'
                }}>
                  <div>
                    <h2 style={{ 
                      fontSize: '20px', 
                      fontWeight: 600,
                      color: colors.text.primary,
                      marginBottom: '4px'
                    }}>
                      Estado del Torneo
                    </h2>
                    <p style={{ 
                      fontSize: '13px',
                      color: colors.text.secondary
                    }}>
                      {new Date().toLocaleDateString('es-MX', { 
                        weekday: 'long',
                        day: 'numeric',
                        month: 'long',
                        year: 'numeric'
                      })}
                    </p>
                  </div>
                  <div style={{
                    display: 'flex',
                    alignItems: 'center',
                    gap: '12px'
                  }}>
                    <div style={{
                      padding: '8px 16px',
                      borderRadius: '8px',
                      background: tournamentData.tournament.status === 'active' 
                        ? `${colors.accent[600]}15`
                        : tournamentData.tournament.status === 'pending'
                        ? `${colors.warning[600]}15`
                        : `${colors.danger[600]}15`,
                      fontSize: '13px',
                      fontWeight: 500,
                      display: 'flex',
                      alignItems: 'center',
                      gap: '6px',
                      color: tournamentData.tournament.status === 'active' 
                        ? colors.accent[600]
                        : tournamentData.tournament.status === 'pending'
                        ? colors.warning[600]
                        : colors.danger[600]
                    }}>
                      {tournamentData.tournament.status === 'active' ? (
                        <>
                          <div style={{
                            width: '8px',
                            height: '8px',
                            borderRadius: '50%',
                            background: colors.accent[600],
                            boxShadow: `0 0 0 3px ${colors.accent[600]}30`
                          }} />
                          Activo
                        </>
                      ) : tournamentData.tournament.status === 'pending' ? (
                        <>
                          <div style={{
                            width: '8px',
                            height: '8px',
                            borderRadius: '50%',
                            background: colors.warning[600],
                            boxShadow: `0 0 0 3px ${colors.warning[600]}30`
                          }} />
                          Pendiente
                        </>
                      ) : (
                        <>
                          <div style={{
                            width: '8px',
                            height: '8px',
                            borderRadius: '50%',
                            background: colors.danger[600],
                            boxShadow: `0 0 0 3px ${colors.danger[600]}30`
                          }} />
                          Finalizado
                        </>
                      )}
                    </div>
                  </div>
                </div>
              </div>
              
              {/* Barra de Progreso Principal */}
              <div style={{
                padding: '28px 32px',
                background: 'linear-gradient(180deg, #FAFAFA, #FFFFFF)'
              }}>
                <div style={{ marginBottom: '20px' }}>
                  <div style={{ 
                    display: 'flex', 
                    justifyContent: 'space-between',
                    alignItems: 'baseline',
                    marginBottom: '16px'
                  }}>
                    <div>
                      <span style={{ 
                        fontSize: '14px', 
                        fontWeight: 500,
                        color: colors.text.secondary,
                        marginRight: '12px'
                      }}>
                        Progreso General
                      </span>
                      <span style={{ 
                        fontSize: '32px', 
                        fontWeight: 700,
                        color: colors.primary[700]
                      }}>
                        {tournamentData.stats.totalMatches > 0 
                          ? Math.round((tournamentData.stats.completedMatches / tournamentData.stats.totalMatches) * 100)
                          : 0}%
                      </span>
                    </div>
                    <div style={{
                      textAlign: 'right'
                    }}>
                      <p style={{
                        fontSize: '13px',
                        color: colors.text.secondary,
                        marginBottom: '4px'
                      }}>
                        {tournamentData.stats.completedMatches} de {tournamentData.stats.totalMatches} partidos
                      </p>
                      <p style={{
                        fontSize: '12px',
                        color: colors.text.tertiary
                      }}>
                        Tiempo estimado: {Math.round((tournamentData.stats.totalMatches - tournamentData.stats.completedMatches) * 1.5)} horas
                      </p>
                    </div>
                  </div>
                  
                  {/* Barra de progreso mejorada */}
                  <div style={{
                    position: 'relative',
                    height: '12px',
                    background: colors.neutral[200],
                    borderRadius: '100px',
                    overflow: 'hidden'
                  }}>
                    <div style={{
                      position: 'absolute',
                      top: 0,
                      left: 0,
                      height: '100%',
                      width: tournamentData.stats.totalMatches > 0 
                        ? `${(tournamentData.stats.completedMatches / tournamentData.stats.totalMatches) * 100}%`
                        : '0%',
                      background: `linear-gradient(90deg, ${colors.primary[600]}, ${colors.accent[400]})`,
                      borderRadius: '100px',
                      transition: 'width 1.5s cubic-bezier(0.4, 0, 0.2, 1)',
                      boxShadow: '0 2px 8px rgba(0,0,0,0.1)'
                    }}>
                      {/* Efecto de brillo animado */}
                      <div style={{
                        position: 'absolute',
                        top: 0,
                        left: 0,
                        right: 0,
                        height: '100%',
                        background: 'linear-gradient(90deg, transparent, rgba(255,255,255,0.3), transparent)',
                        animation: 'shimmer 2s infinite'
                      }} />
                    </div>
                  </div>
                </div>
              </div>
              
              {/* Métricas con iconos */}
              <div style={{
                display: 'grid',
                gridTemplateColumns: 'repeat(4, 1fr)',
                borderTop: `1px solid ${colors.border.light}`,
                background: 'white'
              }}>
                <div style={{
                  padding: '24px',
                  borderRight: `1px solid ${colors.border.light}`,
                  textAlign: 'center'
                }}>
                  <div style={{
                    display: 'inline-flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    width: '48px',
                    height: '48px',
                    borderRadius: '12px',
                    background: `linear-gradient(135deg, ${colors.primary[100]}, ${colors.primary[50]})`,
                    marginBottom: '12px'
                  }}>
                    <Users size={24} style={{ color: colors.primary[600] }} />
                  </div>
                  <p style={{ 
                    fontSize: '11px', 
                    color: colors.text.tertiary,
                    marginBottom: '4px',
                    fontWeight: 500,
                    textTransform: 'uppercase',
                    letterSpacing: '0.5px'
                  }}>
                    Equipos
                  </p>
                  <p style={{ 
                    fontSize: '28px', 
                    fontWeight: 700,
                    color: colors.text.primary,
                    lineHeight: 1
                  }}>
                    {tournamentData.stats.totalTeams}
                  </p>
                </div>
                
                <div style={{
                  padding: '24px',
                  borderRight: `1px solid ${colors.border.light}`,
                  textAlign: 'center'
                }}>
                  <div style={{
                    display: 'inline-flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    width: '48px',
                    height: '48px',
                    borderRadius: '12px',
                    background: `linear-gradient(135deg, ${colors.accent[100]}, ${colors.accent[50]})`,
                    marginBottom: '12px'
                  }}>
                    <Calendar size={24} style={{ color: colors.accent[600] }} />
                  </div>
                  <p style={{ 
                    fontSize: '11px', 
                    color: colors.text.tertiary,
                    marginBottom: '4px',
                    fontWeight: 500,
                    textTransform: 'uppercase',
                    letterSpacing: '0.5px'
                  }}>
                    Partidos Hoy
                  </p>
                  <p style={{ 
                    fontSize: '28px', 
                    fontWeight: 700,
                    color: colors.text.primary,
                    lineHeight: 1
                  }}>
                    {tournamentData.stats.todayMatches}
                  </p>
                </div>
                
                <div style={{
                  padding: '24px',
                  borderRight: `1px solid ${colors.border.light}`,
                  textAlign: 'center'
                }}>
                  <div style={{
                    display: 'inline-flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    width: '48px',
                    height: '48px',
                    borderRadius: '12px',
                    background: `linear-gradient(135deg, ${colors.warning[100]}, ${colors.warning[50]})`,
                    marginBottom: '12px'
                  }}>
                    <PlayCircle size={24} style={{ color: colors.warning[600] }} />
                  </div>
                  <p style={{ 
                    fontSize: '11px', 
                    color: colors.text.tertiary,
                    marginBottom: '4px',
                    fontWeight: 500,
                    textTransform: 'uppercase',
                    letterSpacing: '0.5px'
                  }}>
                    En Juego
                  </p>
                  <p style={{ 
                    fontSize: '28px', 
                    fontWeight: 700,
                    color: colors.text.primary,
                    lineHeight: 1
                  }}>
                    {tournamentData.stats.inProgressMatches}
                  </p>
                </div>
                
                <div style={{
                  padding: '24px',
                  textAlign: 'center'
                }}>
                  <div style={{
                    display: 'inline-flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    width: '48px',
                    height: '48px',
                    borderRadius: '12px',
                    background: colors.neutral[100],
                    marginBottom: '12px'
                  }}>
                    <Clock size={24} style={{ color: colors.text.secondary }} />
                  </div>
                  <p style={{ 
                    fontSize: '11px', 
                    color: colors.text.tertiary,
                    marginBottom: '4px',
                    fontWeight: 500,
                    textTransform: 'uppercase',
                    letterSpacing: '0.5px'
                  }}>
                    Pendientes
                  </p>
                  <p style={{ 
                    fontSize: '28px', 
                    fontWeight: 700,
                    color: colors.text.primary,
                    lineHeight: 1
                  }}>
                    {tournamentData.stats.pendingMatches}
                  </p>
                </div>
              </div>
            </CardModern>

            {/* Grid de información */}
            {/* Removido: Panel de Estado de Canchas y Próximos Partidos */}
            
            {/* Categories Grid */}
            <CardModern variant="glass" padding="lg">
              <CardModernHeader>
                <div style={{ 
                  display: 'flex', 
                  alignItems: 'center',
                  justifyContent: 'space-between'
                }}>
                  <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>
                    <div style={{
                      width: '36px',
                      height: '36px',
                      borderRadius: '10px',
                      background: `linear-gradient(135deg, ${colors.primary[600]}15, ${colors.accent[300]}15)`,
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center'
                    }}>
                      <Trophy size={20} style={{ color: colors.primary[600] }} />
                    </div>
                    <div>
                      <CardModernTitle>Categorías del Torneo</CardModernTitle>
                      <CardModernDescription>
                        Vista rápida del estado de cada categoría
                      </CardModernDescription>
                    </div>
                  </div>
                  <button style={{
                    padding: '8px 16px',
                    borderRadius: '8px',
                    border: `1px solid ${colors.border.default}`,
                    background: 'white',
                    color: colors.text.secondary,
                    fontSize: '13px',
                    fontWeight: 500,
                    cursor: 'pointer',
                    display: 'flex',
                    alignItems: 'center',
                    gap: '6px'
                  }}>
                    Ver todas
                    <ChevronRight size={16} />
                  </button>
                </div>
              </CardModernHeader>

              <CardModernContent>
                {/* Filtros de género */}
                <div style={{
                  display: 'flex',
                  gap: '8px',
                  marginBottom: '20px',
                  padding: '4px',
                  background: colors.neutral[100],
                  borderRadius: '10px',
                  width: 'fit-content'
                }}>
                  {(['all', 'M', 'F', 'X'] as const).map(gender => (
                    <button
                      key={gender}
                      onClick={() => setCategoryGenderFilter(gender)}
                      style={{
                        padding: '8px 16px',
                        borderRadius: '8px',
                        background: categoryGenderFilter === gender ? 'white' : 'transparent',
                        border: 'none',
                        fontSize: '13px',
                        fontWeight: categoryGenderFilter === gender ? 600 : 500,
                        color: categoryGenderFilter === gender ? colors.text.primary : colors.text.secondary,
                        cursor: 'pointer',
                        transition: 'all 0.2s',
                        boxShadow: categoryGenderFilter === gender ? '0 2px 8px rgba(0,0,0,0.08)' : 'none'
                      }}
                    >
                      {gender === 'all' ? 'Todas' : 
                       gender === 'M' ? 'Masculino' : 
                       gender === 'F' ? 'Femenino' : 'Mixto'}
                    </button>
                  ))}
                </div>
                <div style={{ 
                  display: 'grid',
                  gridTemplateColumns: 'repeat(auto-fill, minmax(280px, 1fr))',
                  gap: '16px'
                }}>
                  {tournamentData?.categories
                    .filter(cat => {
                      if (categoryGenderFilter === 'all') return true
                      if (categoryGenderFilter === 'M') return cat.modality === 'M' || cat.modality === 'masculine'
                      if (categoryGenderFilter === 'F') return cat.modality === 'F' || cat.modality === 'feminine'
                      if (categoryGenderFilter === 'X') return cat.modality === 'X' || cat.modality === 'mixed'
                      return false
                    })
                    .map((category, idx) => {
                    // Determinar la fase actual basado en partidos completados
                    const progressPercent = category.totalMatches > 0 
                      ? (category.completedMatches / category.totalMatches) * 100 
                      : 0
                    const getCurrentPhase = () => {
                      if (progressPercent === 100) return 'Final Completada'
                      if (progressPercent >= 87.5) return 'Final'
                      if (progressPercent >= 75) return 'Semifinales'
                      if (progressPercent >= 50) return 'Cuartos de Final'
                      if (progressPercent >= 25) return 'Octavos de Final'
                      return 'Fase de Grupos'
                    }
                    
                    // Obtener próximo partido importante de esta categoría
                    const categoryKey = `${category.code}-${category.modality}`
                    const nextImportantMatch = tournamentData.matches.upcoming.find((m: any) => {
                      const matchCategory = m.round?.split('-')[0] || ''
                      const matchModality = m.round?.includes('FEM') ? 'F' : 'M'
                      return `${matchCategory}-${matchModality}` === categoryKey
                    })
                    
                    // Usar el mismo color verde oscuro para todas las categorías
                    const getCategoryGradient = () => {
                      return `linear-gradient(135deg, #064E3B, #065F46)`
                    }
                    
                    // Texto siempre blanco con el fondo oscuro
                    const getTextColor = () => {
                      return 'white'
                    }
                    
                    return (
                      <div
                        key={idx}
                        style={{
                          borderRadius: '16px',
                          background: 'white',
                          border: `1px solid ${colors.border.light}`,
                          cursor: 'pointer',
                          transition: 'all 0.3s',
                          position: 'relative',
                          overflow: 'hidden',
                          boxShadow: '0 2px 8px rgba(0,0,0,0.04)'
                        }}
                        onMouseEnter={(e) => {
                          e.currentTarget.style.transform = 'translateY(-4px)'
                          e.currentTarget.style.boxShadow = '0 12px 32px rgba(0,0,0,0.08)'
                        }}
                        onMouseLeave={(e) => {
                          e.currentTarget.style.transform = 'translateY(0)'
                          e.currentTarget.style.boxShadow = '0 2px 8px rgba(0,0,0,0.04)'
                        }}
                        onClick={() => {
                          setSelectedCategory(categoryKey)
                          setActiveView('category-detail')
                        }}
                      >
                        {/* Header con gradiente */}
                        <div style={{
                          background: getCategoryGradient(),
                          padding: '16px 20px',
                          color: getTextColor()
                        }}>
                          <div style={{ 
                            display: 'flex', 
                            alignItems: 'center',
                            justifyContent: 'space-between',
                            marginBottom: '8px'
                          }}>
                            <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                              <h3 style={{ 
                                fontSize: '16px',
                                fontWeight: 700,
                                margin: 0
                              }}>
                                {category.name}
                              </h3>
                              <div style={{
                                background: getTextColor() === 'white' ? 'rgba(255,255,255,0.2)' : 'rgba(6,78,59,0.15)',
                                padding: '2px 8px',
                                borderRadius: '12px',
                                fontSize: '11px',
                                fontWeight: 600,
                                color: getTextColor()
                              }}>
                                {category.modality === 'M' ? 'MASCULINO' : 'FEMENINO'}
                              </div>
                            </div>
                            <div style={{
                              fontSize: '18px',
                              fontWeight: 700
                            }}>
                              {Math.round(progressPercent)}%
                            </div>
                          </div>
                          
                          {/* Barra de progreso */}
                          <div style={{
                            height: '6px',
                            background: getTextColor() === 'white' ? 'rgba(255,255,255,0.3)' : 'rgba(6,78,59,0.2)',
                            borderRadius: '100px',
                            overflow: 'hidden'
                          }}>
                            <div style={{
                              height: '100%',
                              width: `${progressPercent}%`,
                              background: getTextColor() === 'white' ? 'white' : '#064E3B',
                              borderRadius: '100px',
                              transition: 'width 1s ease',
                              boxShadow: getTextColor() === 'white' ? '0 0 10px rgba(255,255,255,0.5)' : 'none'
                            }} />
                          </div>
                        </div>
                        
                        {/* Contenido */}
                        <div style={{ padding: '16px 20px' }}>
                          {/* Fase actual */}
                          <div style={{
                            display: 'flex',
                            alignItems: 'center',
                            gap: '8px',
                            marginBottom: '16px'
                          }}>
                            <div style={{
                              width: '8px',
                              height: '8px',
                              borderRadius: '50%',
                              background: category.status === 'active' ? colors.accent[600] : colors.neutral[400],
                              animation: category.status === 'active' ? 'pulse 2s infinite' : 'none'
                            }} />
                            <span style={{
                              fontSize: '13px',
                              fontWeight: 600,
                              color: colors.text.primary
                            }}>
                              {getCurrentPhase()}
                            </span>
                          </div>
                          
                            {/* Mini visualización de bracket simplificada */}
                          <div style={{
                            display: 'flex',
                            gap: '3px',
                            marginBottom: '16px'
                          }}>
                            {[...Array(8)].map((_, i) => (
                              <div
                                key={i}
                                style={{
                                  flex: 1,
                                  height: '3px',
                                  background: i < Math.floor(progressPercent / 12.5) ? 
                                    colors.accent[600] : colors.neutral[200],
                                  borderRadius: '2px',
                                  transition: 'all 0.3s'
                                }}
                              />
                            ))}
                          </div>
                          
                          {/* Estadísticas */}
                          <div style={{ 
                            display: 'flex',
                            justifyContent: 'space-between',
                            paddingTop: '12px',
                            borderTop: `1px solid ${colors.border.light}`
                          }}>
                            <div style={{ textAlign: 'center' }}>
                              <p style={{ 
                                fontSize: '16px',
                                fontWeight: 600,
                                color: colors.text.primary,
                                margin: 0
                              }}>
                                {category.teams}
                              </p>
                              <p style={{ 
                                fontSize: '11px',
                                color: colors.text.tertiary,
                                marginTop: '2px'
                              }}>
                                Equipos
                              </p>
                            </div>
                            <div style={{ textAlign: 'center' }}>
                              <p style={{ 
                                fontSize: '16px',
                                fontWeight: 600,
                                color: colors.text.primary,
                                margin: 0
                              }}>
                                {category.completedMatches}
                              </p>
                              <p style={{ 
                                fontSize: '11px',
                                color: colors.text.tertiary,
                                marginTop: '2px'
                              }}>
                                Jugados
                              </p>
                            </div>
                            <div style={{ textAlign: 'center' }}>
                              <p style={{ 
                                fontSize: '16px',
                                fontWeight: 600,
                                color: colors.warning[600],
                                margin: 0
                              }}>
                                {category.totalMatches - category.completedMatches}
                              </p>
                              <p style={{ 
                                fontSize: '11px',
                                color: colors.text.tertiary,
                                marginTop: '2px'
                              }}>
                                Restantes
                              </p>
                            </div>
                          </div>
                        </div>
                        
                        {/* Indicador de acción */}
                        <div style={{
                          position: 'absolute',
                          bottom: '16px',
                          right: '16px',
                          width: '24px',
                          height: '24px',
                          borderRadius: '50%',
                          background: colors.neutral[100],
                          display: 'flex',
                          alignItems: 'center',
                          justifyContent: 'center'
                        }}>
                          <ChevronRight size={14} style={{ color: colors.text.tertiary }} />
                        </div>
                      </div>
                    )
                  })}
                </div>
              </CardModernContent>
            </CardModern>

          </>
        )}

        {/* Vista Kanban de Partidos */}
        {activeView === 'kanban' && (
          <div style={{ marginTop: '24px' }}>
            {/* Header con estilo verde oscuro */}
            <div style={{
              background: 'linear-gradient(135deg, #047857, #059669)',
              borderRadius: '16px 16px 0 0',
              padding: '24px',
              color: 'white'
            }}>
              <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', marginBottom: '20px' }}>
                <div style={{ display: 'flex', alignItems: 'center', gap: '16px' }}>
                  <div style={{
                    width: '48px',
                    height: '48px',
                    borderRadius: '12px',
                    background: 'rgba(255,255,255,0.15)',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center'
                  }}>
                    <Columns3 size={24} color="white" />
                  </div>
                  <div>
                    <h2 style={{ 
                      fontSize: '24px', 
                      fontWeight: 700,
                      margin: '0 0 4px 0',
                      color: 'white'
                    }}>
                      Tablero de Partidos
                    </h2>
                    <p style={{ 
                      fontSize: '14px', 
                      margin: 0,
                      opacity: 0.9 
                    }}>
                      Vista estilo Kanban de todos los partidos del torneo
                    </p>
                  </div>
                </div>
                
                <div style={{ display: 'flex', gap: '12px' }}>
                  {/* Botón de vista compacta */}
                  <button
                    onClick={() => setKanbanCompactView(!kanbanCompactView)}
                    style={{
                      display: 'flex',
                      alignItems: 'center',
                      gap: '6px',
                      padding: '8px 16px',
                      background: 'rgba(255, 255, 255, 0.2)',
                      border: '1px solid rgba(255, 255, 255, 0.3)',
                      borderRadius: '8px',
                      color: 'white',
                      fontSize: '13px',
                      fontWeight: 500,
                      cursor: 'pointer',
                      transition: 'all 0.2s'
                    }}
                    onMouseEnter={(e) => e.currentTarget.style.background = 'rgba(255, 255, 255, 0.3)'}
                    onMouseLeave={(e) => e.currentTarget.style.background = 'rgba(255, 255, 255, 0.2)'}
                  >
                    {kanbanCompactView ? <Grid3x3 size={16} /> : <Columns3 size={16} />}
                    {kanbanCompactView ? 'Vista Expandida' : 'Vista Compacta'}
                  </button>
                  
                  {/* Botón de exportación */}
                  <button
                    onClick={() => {
                      const data = {
                        tournament: tournamentData.tournament?.name,
                        exportDate: new Date().toISOString(),
                        matches: {
                          scheduled: tournamentData.matches?.upcoming || [],
                          inProgress: tournamentData.matches?.inProgress || [],
                          completed: tournamentData.matches?.completed || [],
                          conflicts: tournamentData.matches?.conflicts || []
                        },
                        statistics: {
                          totalMatches: (tournamentData.matches?.upcoming?.length || 0) + 
                                       (tournamentData.matches?.inProgress?.length || 0) + 
                                       (tournamentData.matches?.completed?.length || 0) + 
                                       (tournamentData.matches?.conflicts?.length || 0),
                          completionPercentage: Math.round(((tournamentData.matches?.completed?.length || 0) / 
                            Math.max(1, (tournamentData.matches?.upcoming?.length || 0) + 
                                       (tournamentData.matches?.inProgress?.length || 0) + 
                                       (tournamentData.matches?.completed?.length || 0))) * 100)
                        }
                      };
                      
                      const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
                      const url = URL.createObjectURL(blob);
                      const a = document.createElement('a');
                      a.href = url;
                      a.download = `torneo-${tournamentData.tournament?.name || 'datos'}-${new Date().toISOString().split('T')[0]}.json`;
                      document.body.appendChild(a);
                      a.click();
                      document.body.removeChild(a);
                      URL.revokeObjectURL(url);
                    }}
                    style={{
                      display: 'flex',
                      alignItems: 'center',
                      gap: '6px',
                      padding: '8px 16px',
                      background: 'rgba(255, 255, 255, 0.2)',
                      border: '1px solid rgba(255, 255, 255, 0.3)',
                      borderRadius: '8px',
                      color: 'white',
                      fontSize: '13px',
                      fontWeight: 500,
                      cursor: 'pointer',
                      transition: 'all 0.2s'
                    }}
                    onMouseEnter={(e) => e.currentTarget.style.background = 'rgba(255, 255, 255, 0.3)'}
                    onMouseLeave={(e) => e.currentTarget.style.background = 'rgba(255, 255, 255, 0.2)'}
                  >
                    <Download size={16} />
                    Exportar
                  </button>
                </div>
              </div>
              
              {/* Estadísticas rápidas y última actualización */}
              <div style={{ display: 'flex', gap: '24px', alignItems: 'center', marginTop: '16px' }}>
                <div style={{ display: 'flex', gap: '16px' }}>
                  <div style={{ textAlign: 'center' }}>
                    <div style={{ fontSize: '20px', fontWeight: 700, color: 'white' }}>
                      {(tournamentData.matches?.upcoming?.length || 0) + 
                       (tournamentData.matches?.inProgress?.length || 0) + 
                       (tournamentData.matches?.completed?.length || 0) + 
                       (tournamentData.matches?.conflicts?.length || 0)}
                    </div>
                    <div style={{ fontSize: '11px', opacity: 0.8 }}>Total Partidos</div>
                  </div>
                  <div style={{ textAlign: 'center' }}>
                    <div style={{ fontSize: '20px', fontWeight: 700, color: 'white' }}>
                      {tournamentData.matches?.inProgress?.length || 0}
                    </div>
                    <div style={{ fontSize: '11px', opacity: 0.8 }}>En Juego</div>
                  </div>
                  <div style={{ textAlign: 'center' }}>
                    <div style={{ fontSize: '20px', fontWeight: 700, color: 'white' }}>
                      {Math.round(((tournamentData.matches?.completed?.length || 0) / 
                        Math.max(1, (tournamentData.matches?.upcoming?.length || 0) + 
                                   (tournamentData.matches?.inProgress?.length || 0) + 
                                   (tournamentData.matches?.completed?.length || 0))) * 100)}%
                    </div>
                    <div style={{ fontSize: '11px', opacity: 0.8 }}>Completado</div>
                  </div>
                  {(tournamentData.matches?.conflicts?.length || 0) > 0 && (
                    <div style={{ textAlign: 'center' }}>
                      <div style={{ fontSize: '20px', fontWeight: 700, color: '#FCA5A5' }}>
                        {tournamentData.matches?.conflicts?.length || 0}
                      </div>
                      <div style={{ fontSize: '11px', opacity: 0.8 }}>Conflictos</div>
                    </div>
                  )}
                </div>
                
                <div style={{
                  height: '40px',
                  width: '1px',
                  background: 'rgba(255,255,255,0.3)'
                }} />
                
                <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                  <Clock size={14} style={{ opacity: 0.8 }} />
                  <div style={{ fontSize: '12px', opacity: 0.8 }}>
                    Última actualización: {lastUpdated.toLocaleTimeString('es-MX', { 
                      hour: '2-digit', 
                      minute: '2-digit',
                      second: '2-digit'
                    })}
                  </div>
                </div>
              </div>
            </div>

            {/* Filtros */}
            <div style={{
              background: 'white',
              padding: '16px 24px',
              borderBottom: '1px solid #e5e7eb',
              display: 'flex',
              gap: '12px',
              flexWrap: 'wrap'
            }}>
              <select
                value={kanbanCategoryFilter}
                onChange={(e) => setKanbanCategoryFilter(e.target.value)}
                style={{
                  padding: '8px 12px',
                  borderRadius: '8px',
                  border: '1px solid #e5e7eb',
                  fontSize: '14px',
                  minWidth: '150px'
                }}
              >
                <option value="all">Todas las categorías</option>
                {tournamentData?.categories?.map((cat: any) => (
                  <option key={`${cat.name}-${cat.modality}`} value={`${cat.name}-${cat.modality === 'feminine' ? 'F' : 'M'}`}>
                    {cat.name} {cat.modality === 'feminine' ? 'Femenino' : 'Masculino'}
                  </option>
                ))}
              </select>

              <input
                type="text"
                placeholder="Buscar equipo o jugador..."
                value={kanbanSearchTerm}
                onChange={(e) => setKanbanSearchTerm(e.target.value)}
                style={{
                  padding: '8px 12px',
                  borderRadius: '8px',
                  border: '1px solid #e5e7eb',
                  fontSize: '14px',
                  minWidth: '200px',
                  flex: 1,
                  maxWidth: '300px'
                }}
              />
            </div>

            {/* Tablero Kanban de 3 columnas */}
            <div style={{
              background: '#f9fafb',
              padding: '24px',
              borderRadius: '0 0 16px 16px',
              minHeight: '600px'
            }}>
              <div style={{ 
                display: 'flex',
                gap: '20px',
                alignItems: 'flex-start',
                overflowX: 'auto'
              }}>
                {/* Columna Programados */}
                <div 
                  onDragOver={handleDragOver}
                  onDragEnter={() => handleDragEnter('scheduled')}
                  onDragLeave={handleDragLeave}
                  onDrop={(e) => handleDrop(e, 'scheduled')}
                  style={{
                    flex: '1',
                    minWidth: '350px',
                    background: dragOverColumn === 'scheduled' ? '#EFF6FF' : '#ffffff',
                    borderRadius: '12px',
                    border: dragOverColumn === 'scheduled' ? '2px dashed #3B82F6' : '1px solid #e5e7eb',
                    overflow: 'hidden',
                    transition: 'all 0.3s'
                  }}>
                  <div style={{
                    background: 'linear-gradient(135deg, #3B82F6, #60A5FA)',
                    padding: '16px',
                    color: 'white'
                  }}>
                    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                      <h3 style={{ fontSize: '16px', fontWeight: 600, margin: 0 }}>
                        📅 Programados
                      </h3>
                      <span style={{
                        background: 'rgba(255,255,255,0.2)',
                        padding: '4px 12px',
                        borderRadius: '20px',
                        fontSize: '13px',
                        fontWeight: 600
                      }}>
                        {tournamentData.matches?.upcoming?.length || 0}
                      </span>
                    </div>
                  </div>
                  <div style={{ 
                    padding: '12px',
                    maxHeight: '600px',
                    overflowY: 'auto'
                  }}>
                    {(() => {
                      // Filtrar partidos por búsqueda y categoría
                      const filteredMatches = tournamentData.matches?.upcoming?.filter((match: any) => {
                        const searchMatch = kanbanSearchTerm === '' || 
                          match.team1Name?.toLowerCase().includes(kanbanSearchTerm.toLowerCase()) ||
                          match.team2Name?.toLowerCase().includes(kanbanSearchTerm.toLowerCase()) ||
                          match.team1Player1?.toLowerCase().includes(kanbanSearchTerm.toLowerCase()) ||
                          match.team1Player2?.toLowerCase().includes(kanbanSearchTerm.toLowerCase()) ||
                          match.team2Player1?.toLowerCase().includes(kanbanSearchTerm.toLowerCase()) ||
                          match.team2Player2?.toLowerCase().includes(kanbanSearchTerm.toLowerCase());
                        
                        const categoryMatch = kanbanCategoryFilter === 'all' || 
                          match.category === kanbanCategoryFilter;
                        
                        return searchMatch && categoryMatch;
                      }) || [];
                      
                      return filteredMatches.map((match: any) => (
                      <div 
                        key={match.id}
                        draggable
                        onDragStart={(e) => handleDragStart(e, match, 'scheduled')}
                        onDragEnd={handleDragEnd}
                        onClick={() => {
                          if (!draggedMatch) {
                            setSelectedMatchDetails(match);
                            setShowMatchDetailsModal(true);
                          }
                        }}
                        onMouseEnter={(e) => {
                          if (!draggedMatch) {
                            e.currentTarget.style.boxShadow = '0 4px 12px rgba(0,0,0,0.1)';
                            e.currentTarget.style.transform = 'translateY(-2px)';
                            e.currentTarget.style.cursor = 'move';
                          }
                        }}
                        onMouseLeave={(e) => {
                          e.currentTarget.style.boxShadow = 'none';
                          e.currentTarget.style.transform = 'translateY(0)';
                          e.currentTarget.style.cursor = 'pointer';
                        }}
                        style={{
                          background: 'white',
                          border: '1px solid #e5e7eb',
                          borderRadius: '8px',
                          padding: kanbanCompactView ? '8px' : '12px',
                          marginBottom: '8px',
                          cursor: 'move',
                          transition: 'all 0.2s',
                          userSelect: 'none'
                        }}>
                        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', marginBottom: '8px' }}>
                          <span style={{ 
                            fontSize: '10px', 
                            fontWeight: 600,
                            color: '#3B82F6',
                            textTransform: 'uppercase',
                            background: 'rgba(59, 130, 246, 0.1)',
                            padding: '2px 6px',
                            borderRadius: '4px'
                          }}>
                            {match.round}
                          </span>
                          {match.scheduledAt && (
                            <span style={{ fontSize: '11px', color: '#6B7280' }}>
                              {new Date(match.scheduledAt).toLocaleTimeString('es-MX', { 
                                hour: '2-digit', 
                                minute: '2-digit' 
                              })}
                            </span>
                          )}
                        </div>
                        <div style={{ fontWeight: 500, fontSize: '14px', marginBottom: '6px' }}>
                          {match.team1Name}
                        </div>
                        <div style={{ 
                          fontSize: '12px', 
                          color: '#6B7280',
                          padding: '0 8px',
                          marginBottom: '6px'
                        }}>
                          vs
                        </div>
                        <div style={{ fontWeight: 500, fontSize: '14px', marginBottom: '8px' }}>
                          {match.team2Name}
                        </div>
                        <div style={{ 
                          display: 'flex', 
                          justifyContent: 'space-between', 
                          alignItems: 'center',
                          paddingTop: '8px',
                          borderTop: '1px solid #f3f4f6'
                        }}>
                          <span style={{ 
                            fontSize: '11px', 
                            color: '#6B7280',
                            display: 'flex',
                            alignItems: 'center',
                            gap: '4px'
                          }}>
                            <span>🎾</span> Cancha {match.courtNumber}
                          </span>
                        </div>
                      </div>
                    ));
                    })()}
                    {(() => {
                      const filteredMatches = tournamentData.matches?.upcoming?.filter((match: any) => {
                        const searchMatch = kanbanSearchTerm === '' || 
                          match.team1Name?.toLowerCase().includes(kanbanSearchTerm.toLowerCase()) ||
                          match.team2Name?.toLowerCase().includes(kanbanSearchTerm.toLowerCase());
                        const categoryMatch = kanbanCategoryFilter === 'all' || 
                          match.category === kanbanCategoryFilter;
                        return searchMatch && categoryMatch;
                      }) || [];
                      return filteredMatches.length === 0;
                    })() && (
                      <div style={{
                        padding: '32px',
                        textAlign: 'center',
                        color: '#9CA3AF'
                      }}>
                        <p style={{ fontSize: '13px' }}>No hay partidos programados</p>
                      </div>
                    )}
                  </div>
                </div>

                {/* Columna En Juego */}
                <div 
                  onDragOver={handleDragOver}
                  onDragEnter={() => handleDragEnter('in_progress')}
                  onDragLeave={handleDragLeave}
                  onDrop={(e) => handleDrop(e, 'in_progress')}
                  style={{
                    flex: '1',
                    minWidth: '350px',
                    background: dragOverColumn === 'in_progress' ? '#F0FDF4' : '#ffffff',
                    borderRadius: '12px',
                    border: dragOverColumn === 'in_progress' ? '2px dashed #16A34A' : '1px solid #e5e7eb',
                    overflow: 'hidden',
                    transition: 'all 0.3s'
                  }}>
                  <div style={{
                    background: 'linear-gradient(135deg, #16A34A, #A4DF4E)',
                    padding: '16px',
                    color: 'white'
                  }}>
                    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                      <h3 style={{ fontSize: '16px', fontWeight: 600, margin: 0 }}>
                        ⚡ En Juego
                      </h3>
                      <span style={{
                        background: 'rgba(255,255,255,0.2)',
                        padding: '4px 12px',
                        borderRadius: '20px',
                        fontSize: '13px',
                        fontWeight: 600
                      }}>
                        {tournamentData.matches?.inProgress?.length || 0}
                      </span>
                    </div>
                  </div>
                  <div style={{ 
                    padding: '12px',
                    maxHeight: '600px',
                    overflowY: 'auto'
                  }}>
                    {(() => {
                      const filteredMatches = tournamentData.matches?.inProgress?.filter((match: any) => {
                        const searchMatch = kanbanSearchTerm === '' || 
                          match.team1Name?.toLowerCase().includes(kanbanSearchTerm.toLowerCase()) ||
                          match.team2Name?.toLowerCase().includes(kanbanSearchTerm.toLowerCase());
                        const categoryMatch = kanbanCategoryFilter === 'all' || 
                          match.category === kanbanCategoryFilter;
                        return searchMatch && categoryMatch;
                      }) || [];
                      
                      return filteredMatches.map((match: any) => (
                      <div 
                        key={match.id}
                        draggable
                        onDragStart={(e) => handleDragStart(e, match, 'in_progress')}
                        onDragEnd={handleDragEnd}
                        onClick={() => {
                          if (!draggedMatch) {
                            setSelectedMatchDetails(match);
                            setShowMatchDetailsModal(true);
                          }
                        }}
                        onMouseEnter={(e) => {
                          if (!draggedMatch) {
                            e.currentTarget.style.transform = 'scale(1.02)';
                            e.currentTarget.style.cursor = 'move';
                          }
                        }}
                        onMouseLeave={(e) => {
                          e.currentTarget.style.transform = 'scale(1)';
                          e.currentTarget.style.cursor = 'pointer';
                        }}
                        style={{
                        background: 'white',
                        border: '2px solid #A4DF4E',
                        borderRadius: '8px',
                        padding: '12px',
                        marginBottom: '8px',
                        cursor: 'move',
                        transition: 'all 0.2s',
                        position: 'relative',
                        userSelect: 'none'
                      }}>
                        <div style={{
                          position: 'absolute',
                          top: '8px',
                          right: '8px',
                          display: 'flex',
                          alignItems: 'center',
                          gap: '4px',
                          padding: '2px 8px',
                          background: 'rgba(164, 223, 78, 0.2)',
                          borderRadius: '12px',
                          fontSize: '10px',
                          fontWeight: 600,
                          color: '#16A34A'
                        }}>
                          <div style={{
                            width: '6px',
                            height: '6px',
                            borderRadius: '50%',
                            background: '#16A34A',
                            animation: 'pulse 2s infinite'
                          }} />
                          LIVE
                        </div>
                        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', marginBottom: '8px' }}>
                          <span style={{ 
                            fontSize: '10px', 
                            fontWeight: 600,
                            color: '#16A34A',
                            textTransform: 'uppercase',
                            background: 'rgba(22, 163, 74, 0.1)',
                            padding: '2px 6px',
                            borderRadius: '4px'
                          }}>
                            {match.round}
                          </span>
                        </div>
                        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '8px' }}>
                          <div style={{ fontWeight: 500, fontSize: '14px' }}>
                            {match.team1Name}
                          </div>
                          {match.team1Score !== null && (
                            <span style={{ fontSize: '20px', fontWeight: 700, color: '#16A34A' }}>
                              {match.team1Score}
                            </span>
                          )}
                        </div>
                        <div style={{ 
                          fontSize: '12px', 
                          color: '#6B7280',
                          textAlign: 'center',
                          marginBottom: '8px'
                        }}>
                          vs
                        </div>
                        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '8px' }}>
                          <div style={{ fontWeight: 500, fontSize: '14px' }}>
                            {match.team2Name}
                          </div>
                          {match.team2Score !== null && (
                            <span style={{ fontSize: '20px', fontWeight: 700, color: '#16A34A' }}>
                              {match.team2Score}
                            </span>
                          )}
                        </div>
                        <div style={{ 
                          display: 'flex', 
                          justifyContent: 'space-between', 
                          alignItems: 'center',
                          paddingTop: '8px',
                          borderTop: '1px solid #f3f4f6'
                        }}>
                          <span style={{ 
                            fontSize: '11px', 
                            color: '#6B7280',
                            display: 'flex',
                            alignItems: 'center',
                            gap: '4px'
                          }}>
                            <span>🎾</span> Cancha {match.courtNumber}
                          </span>
                          {match.startTime && (
                            <span style={{ fontSize: '11px', color: '#6B7280' }}>
                              Inicio: {new Date(match.startTime).toLocaleTimeString('es-MX', { 
                                hour: '2-digit', 
                                minute: '2-digit' 
                              })}
                            </span>
                          )}
                        </div>
                      </div>
                    ));
                    })()}
                    {(() => {
                      const filteredMatches = tournamentData.matches?.inProgress?.filter((match: any) => {
                        const searchMatch = kanbanSearchTerm === '' || 
                          match.team1Name?.toLowerCase().includes(kanbanSearchTerm.toLowerCase()) ||
                          match.team2Name?.toLowerCase().includes(kanbanSearchTerm.toLowerCase());
                        const categoryMatch = kanbanCategoryFilter === 'all' || 
                          match.category === kanbanCategoryFilter;
                        return searchMatch && categoryMatch;
                      }) || [];
                      return filteredMatches.length === 0;
                    })() && (
                      <div style={{
                        padding: '32px',
                        textAlign: 'center',
                        color: '#9CA3AF'
                      }}>
                        <p style={{ fontSize: '13px' }}>No hay partidos en juego</p>
                      </div>
                    )}
                  </div>
                </div>

                {/* Columna Completados */}
                <div 
                  onDragOver={handleDragOver}
                  onDragEnter={() => handleDragEnter('completed')}
                  onDragLeave={handleDragLeave}
                  onDrop={(e) => handleDrop(e, 'completed')}
                  style={{
                    flex: '1',
                    minWidth: '350px',
                    background: dragOverColumn === 'completed' ? '#F9FAFB' : '#ffffff',
                    borderRadius: '12px',
                    border: dragOverColumn === 'completed' ? '2px dashed #6B7280' : '1px solid #e5e7eb',
                    overflow: 'hidden',
                    transition: 'all 0.3s'
                  }}>
                  <div style={{
                    background: 'linear-gradient(135deg, #6B7280, #9CA3AF)',
                    padding: '16px',
                    color: 'white'
                  }}>
                    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                      <h3 style={{ fontSize: '16px', fontWeight: 600, margin: 0 }}>
                        ✅ Completados
                      </h3>
                      <span style={{
                        background: 'rgba(255,255,255,0.2)',
                        padding: '4px 12px',
                        borderRadius: '20px',
                        fontSize: '13px',
                        fontWeight: 600
                      }}>
                        {tournamentData.matches?.completed?.length || 0}
                      </span>
                    </div>
                  </div>
                  <div style={{ 
                    padding: '12px',
                    maxHeight: '600px',
                    overflowY: 'auto'
                  }}>
                    {(() => {
                      const filteredMatches = tournamentData.matches?.completed?.filter((match: any) => {
                        const searchMatch = kanbanSearchTerm === '' || 
                          match.team1Name?.toLowerCase().includes(kanbanSearchTerm.toLowerCase()) ||
                          match.team2Name?.toLowerCase().includes(kanbanSearchTerm.toLowerCase());
                        const categoryMatch = kanbanCategoryFilter === 'all' || 
                          match.category === kanbanCategoryFilter;
                        return searchMatch && categoryMatch;
                      }) || [];
                      
                      return filteredMatches.map((match: any) => (
                      <div 
                        key={match.id}
                        draggable
                        onDragStart={(e) => handleDragStart(e, match, 'completed')}
                        onDragEnd={handleDragEnd}
                        onClick={() => {
                          if (!draggedMatch) {
                            setSelectedMatchDetails(match);
                            setShowMatchDetailsModal(true);
                          }
                        }}
                        onMouseEnter={(e) => {
                          if (!draggedMatch) {
                            e.currentTarget.style.opacity = '1';
                            e.currentTarget.style.transform = 'translateY(-2px)';
                            e.currentTarget.style.boxShadow = '0 4px 12px rgba(0,0,0,0.1)';
                            e.currentTarget.style.cursor = 'move';
                          }
                        }}
                        onMouseLeave={(e) => {
                          e.currentTarget.style.opacity = '0.8';
                          e.currentTarget.style.transform = 'translateY(0)';
                          e.currentTarget.style.boxShadow = 'none';
                          e.currentTarget.style.cursor = 'pointer';
                        }}
                        style={{
                        background: 'white',
                        border: '1px solid #e5e7eb',
                        borderRadius: '8px',
                        padding: '12px',
                        marginBottom: '8px',
                        cursor: 'move',
                        transition: 'all 0.2s',
                        opacity: 0.8,
                        userSelect: 'none'
                      }}>
                        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', marginBottom: '8px' }}>
                          <span style={{ 
                            fontSize: '10px', 
                            fontWeight: 600,
                            color: '#6B7280',
                            textTransform: 'uppercase',
                            background: 'rgba(107, 114, 128, 0.1)',
                            padding: '2px 6px',
                            borderRadius: '4px'
                          }}>
                            {match.round}
                          </span>
                          {match.winner && (
                            <span style={{ 
                              fontSize: '10px',
                              fontWeight: 600,
                              color: '#16A34A',
                              display: 'flex',
                              alignItems: 'center',
                              gap: '4px'
                            }}>
                              🏆 Ganador
                            </span>
                          )}
                        </div>
                        <div style={{ 
                          display: 'flex', 
                          justifyContent: 'space-between', 
                          alignItems: 'center', 
                          marginBottom: '8px',
                          fontWeight: match.winner === match.team1Name ? 700 : 400
                        }}>
                          <div style={{ fontSize: '14px' }}>
                            {match.team1Name}
                          </div>
                          <span style={{ fontSize: '18px', fontWeight: 700 }}>
                            {match.team1Score || 0}
                          </span>
                        </div>
                        <div style={{ 
                          fontSize: '12px', 
                          color: '#6B7280',
                          textAlign: 'center',
                          marginBottom: '8px'
                        }}>
                          vs
                        </div>
                        <div style={{ 
                          display: 'flex', 
                          justifyContent: 'space-between', 
                          alignItems: 'center', 
                          marginBottom: '8px',
                          fontWeight: match.winner === match.team2Name ? 700 : 400
                        }}>
                          <div style={{ fontSize: '14px' }}>
                            {match.team2Name}
                          </div>
                          <span style={{ fontSize: '18px', fontWeight: 700 }}>
                            {match.team2Score || 0}
                          </span>
                        </div>
                        <div style={{ 
                          display: 'flex', 
                          justifyContent: 'space-between', 
                          alignItems: 'center',
                          paddingTop: '8px',
                          borderTop: '1px solid #f3f4f6'
                        }}>
                          <span style={{ 
                            fontSize: '11px', 
                            color: '#6B7280',
                            display: 'flex',
                            alignItems: 'center',
                            gap: '4px'
                          }}>
                            <span>🎾</span> Cancha {match.courtNumber}
                          </span>
                          {match.duration && (
                            <span style={{ fontSize: '11px', color: '#6B7280' }}>
                              ⏱ {match.duration} min
                            </span>
                          )}
                        </div>
                      </div>
                    ));
                    })()}
                    {(() => {
                      const filteredMatches = tournamentData.matches?.completed?.filter((match: any) => {
                        const searchMatch = kanbanSearchTerm === '' || 
                          match.team1Name?.toLowerCase().includes(kanbanSearchTerm.toLowerCase()) ||
                          match.team2Name?.toLowerCase().includes(kanbanSearchTerm.toLowerCase());
                        const categoryMatch = kanbanCategoryFilter === 'all' || 
                          match.category === kanbanCategoryFilter;
                        return searchMatch && categoryMatch;
                      }) || [];
                      return filteredMatches.length === 0;
                    })() && (
                      <div style={{
                        padding: '32px',
                        textAlign: 'center',
                        color: '#9CA3AF'
                      }}>
                        <p style={{ fontSize: '13px' }}>No hay partidos completados</p>
                      </div>
                    )}
                  </div>
                </div>

                {/* Columna Conflictos/Pendientes */}
                <div 
                  onDragOver={handleDragOver}
                  onDragEnter={() => handleDragEnter('conflicts')}
                  onDragLeave={handleDragLeave}
                  onDrop={(e) => handleDrop(e, 'conflicts')}
                  style={{
                    flex: '1',
                    minWidth: '350px',
                    background: dragOverColumn === 'conflicts' ? '#FEF2F2' : '#ffffff',
                    borderRadius: '12px',
                    border: dragOverColumn === 'conflicts' ? '2px dashed #DC2626' : '1px solid #e5e7eb',
                    overflow: 'hidden',
                    transition: 'all 0.3s'
                  }}>
                  <div style={{
                    background: 'linear-gradient(135deg, #DC2626, #F87171)',
                    padding: '16px',
                    color: 'white'
                  }}>
                    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                      <h3 style={{ fontSize: '16px', fontWeight: 600, margin: 0 }}>
                        ⚠️ Conflictos
                      </h3>
                      <span style={{
                        background: 'rgba(255,255,255,0.2)',
                        padding: '4px 12px',
                        borderRadius: '20px',
                        fontSize: '13px',
                        fontWeight: 600
                      }}>
                        {tournamentData.matches?.conflicts?.length || 0}
                      </span>
                    </div>
                  </div>
                  <div style={{ 
                    padding: '12px',
                    maxHeight: '600px',
                    overflowY: 'auto'
                  }}>
                    {(() => {
                      const conflictMatches = tournamentData.matches?.conflicts || 
                        tournamentData.matches?.pending || [];
                      
                      const filteredMatches = conflictMatches.filter((match: any) => {
                        const searchMatch = kanbanSearchTerm === '' || 
                          match.team1Name?.toLowerCase().includes(kanbanSearchTerm.toLowerCase()) ||
                          match.team2Name?.toLowerCase().includes(kanbanSearchTerm.toLowerCase());
                        const categoryMatch = kanbanCategoryFilter === 'all' || 
                          match.category === kanbanCategoryFilter;
                        return searchMatch && categoryMatch;
                      });
                      
                      return filteredMatches.map((match: any) => (
                      <div 
                        key={match.id}
                        draggable
                        onDragStart={(e) => handleDragStart(e, match, 'conflicts')}
                        onDragEnd={handleDragEnd}
                        onClick={() => {
                          if (!draggedMatch) {
                            setSelectedMatchDetails(match);
                            setShowMatchDetailsModal(true);
                          }
                        }}
                        onMouseEnter={(e) => {
                          if (!draggedMatch) {
                            e.currentTarget.style.boxShadow = '0 4px 12px rgba(220, 38, 38, 0.2)';
                            e.currentTarget.style.transform = 'translateY(-2px)';
                            e.currentTarget.style.cursor = 'move';
                          }
                        }}
                        onMouseLeave={(e) => {
                          e.currentTarget.style.boxShadow = 'none';
                          e.currentTarget.style.transform = 'translateY(0)';
                          e.currentTarget.style.cursor = 'pointer';
                        }}
                        style={{
                          background: 'white',
                          border: '2px solid #FCA5A5',
                          borderRadius: '8px',
                          padding: '12px',
                          marginBottom: '8px',
                          cursor: 'move',
                          transition: 'all 0.2s',
                          userSelect: 'none',
                          position: 'relative'
                        }}>
                        <div style={{
                          position: 'absolute',
                          top: '8px',
                          right: '8px',
                          display: 'flex',
                          alignItems: 'center',
                          gap: '4px',
                          padding: '2px 8px',
                          background: 'rgba(220, 38, 38, 0.1)',
                          borderRadius: '12px',
                          fontSize: '10px',
                          fontWeight: 600,
                          color: '#DC2626'
                        }}>
                          <AlertTriangle size={12} />
                          CONFLICTO
                        </div>
                        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', marginBottom: '8px', marginTop: '20px' }}>
                          <span style={{ 
                            fontSize: '10px', 
                            fontWeight: 600,
                            color: '#DC2626',
                            textTransform: 'uppercase',
                            background: 'rgba(220, 38, 38, 0.1)',
                            padding: '2px 6px',
                            borderRadius: '4px'
                          }}>
                            {match.round}
                          </span>
                        </div>
                        <div style={{ fontWeight: 500, fontSize: '14px', marginBottom: '6px' }}>
                          {match.team1Name}
                          {match.team1Score !== null && match.team1Score !== undefined && (
                            <span style={{ marginLeft: '8px', fontWeight: 700, color: '#DC2626' }}>
                              ({match.team1Score})
                            </span>
                          )}
                        </div>
                        <div style={{ 
                          fontSize: '12px', 
                          color: '#6B7280',
                          textAlign: 'center',
                          marginBottom: '6px'
                        }}>
                          vs
                        </div>
                        <div style={{ fontWeight: 500, fontSize: '14px', marginBottom: '8px' }}>
                          {match.team2Name}
                          {match.team2Score !== null && match.team2Score !== undefined && (
                            <span style={{ marginLeft: '8px', fontWeight: 700, color: '#DC2626' }}>
                              ({match.team2Score})
                            </span>
                          )}
                        </div>
                        <div style={{ 
                          display: 'flex', 
                          justifyContent: 'space-between', 
                          alignItems: 'center',
                          paddingTop: '8px',
                          borderTop: '1px solid #f3f4f6'
                        }}>
                          <span style={{ 
                            fontSize: '11px', 
                            color: '#DC2626',
                            fontWeight: 500
                          }}>
                            ⚠️ Requiere resolución
                          </span>
                          <span style={{ 
                            fontSize: '11px', 
                            color: '#6B7280',
                            display: 'flex',
                            alignItems: 'center',
                            gap: '4px'
                          }}>
                            <span>🎾</span> Cancha {match.courtNumber}
                          </span>
                        </div>
                      </div>
                    ));
                    })()}
                    {(() => {
                      const conflictMatches = tournamentData.matches?.conflicts || 
                        tournamentData.matches?.pending || [];
                      const filteredMatches = conflictMatches.filter((match: any) => {
                        const searchMatch = kanbanSearchTerm === '' || 
                          match.team1Name?.toLowerCase().includes(kanbanSearchTerm.toLowerCase()) ||
                          match.team2Name?.toLowerCase().includes(kanbanSearchTerm.toLowerCase());
                        const categoryMatch = kanbanCategoryFilter === 'all' || 
                          match.category === kanbanCategoryFilter;
                        return searchMatch && categoryMatch;
                      });
                      return filteredMatches.length === 0;
                    })() && (
                      <div style={{
                        padding: '32px',
                        textAlign: 'center',
                        color: '#9CA3AF'
                      }}>
                        <CheckCircle size={24} style={{ color: '#16A34A', marginBottom: '8px' }} />
                        <p style={{ fontSize: '13px', color: '#16A34A', fontWeight: 500 }}>
                          Sin conflictos pendientes
                        </p>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Vista de Programación */}
        {activeView === 'schedule' && (
          <div style={{ marginTop: '24px' }}>
            {/* Header con estilo verde oscuro */}
            <div style={{
              background: 'linear-gradient(135deg, #047857, #059669)',
              borderRadius: '16px 16px 0 0',
              padding: '24px',
              color: 'white'
            }}>
              <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
                <div style={{ display: 'flex', alignItems: 'center', gap: '16px' }}>
                  <div style={{
                    width: '48px',
                    height: '48px',
                    borderRadius: '12px',
                    background: 'rgba(255,255,255,0.15)',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center'
                  }}>
                    <Calendar size={24} color="white" />
                  </div>
                  <div>
                    <h2 style={{ 
                      fontSize: '24px', 
                      fontWeight: 700,
                      margin: '0 0 4px 0',
                      color: 'white'
                    }}>
                      Programación de Partidos
                    </h2>
                    <p style={{ 
                      fontSize: '14px', 
                      margin: 0,
                      opacity: 0.9 
                    }}>
                      Calendario completo del torneo
                    </p>
                  </div>
                </div>
                
                <div style={{ display: 'flex', gap: '12px' }}>
                  <button 
                    onClick={() => setSelectedDate(new Date())}
                    style={{
                      padding: '10px 20px',
                      borderRadius: '8px',
                      background: 'rgba(255,255,255,0.2)',
                      border: 'none',
                      color: 'white',
                      fontSize: '14px',
                      fontWeight: 500,
                      cursor: 'pointer',
                      transition: 'all 0.2s'
                    }}
                  >
                    Hoy
                  </button>
                  
                  <button 
                    onClick={() => {
                      console.log('Programación Automática clicked')
                      setShowAutoScheduleWizard(true)
                    }}
                    style={{
                      padding: '10px 20px',
                      borderRadius: '8px',
                      background: colors.primary[600],
                      border: 'none',
                      color: 'white',
                      fontSize: '14px',
                      fontWeight: 500,
                      cursor: 'pointer',
                      transition: 'all 0.2s',
                      display: 'flex',
                      alignItems: 'center',
                      gap: '6px'
                    }}
                  >
                    <Settings size={16} />
                    Programación Automática
                  </button>
                </div>
              </div>
            </div>

            {/* Fechas disponibles del torneo */}
            <div style={{
              background: 'white',
              padding: '16px 24px',
              borderBottom: '1px solid #e5e7eb'
            }}>
              {/* Fechas con partidos */}
              <div style={{ marginBottom: '16px' }}>
                <label style={{ 
                  display: 'block', 
                  fontSize: '14px', 
                  fontWeight: 600, 
                  color: colors.text.primary,
                  marginBottom: '12px'
                }}>
                  📅 Fechas del Torneo
                </label>
                
                {/* Información de capacidad de canchas */}
                <div style={{
                  display: 'flex',
                  alignItems: 'center',
                  gap: '12px',
                  padding: '10px 14px',
                  background: `linear-gradient(135deg, ${colors.accent[400]}10, ${colors.primary[600]}10)`,
                  borderRadius: '8px',
                  marginBottom: '12px',
                  fontSize: '13px',
                  border: `1px solid ${colors.accent[400]}30`
                }}>
                  <div style={{ 
                    display: 'flex', 
                    alignItems: 'center', 
                    gap: '6px',
                    color: colors.primary[700] 
                  }}>
                    <Grid3x3 size={16} />
                    <strong>{tournamentData?.courts?.length || 0} canchas</strong>
                  </div>
                  <div style={{ color: colors.text.secondary, fontSize: '12px' }}>
                    •
                  </div>
                  <div style={{ color: colors.text.secondary, fontSize: '12px' }}>
                    Capacidad máxima: <strong>{((tournamentData?.courts?.length || 0) * Math.floor(((endHour - startHour) * 60) / (matchDuration + preparationTime)))}</strong> partidos/día
                  </div>
                  <div style={{ color: colors.text.secondary, fontSize: '12px' }}>
                    •
                  </div>
                  <div style={{ 
                    color: colors.text.tertiary, 
                    fontSize: '11px'
                  }}>
                    ({matchDuration}min partido + {preparationTime}min prep, {startHour}h-{endHour}h)
                  </div>
                </div>
                
                <div style={{ display: 'flex', flexWrap: 'wrap', gap: '8px' }}>
                  {(() => {
                    // Obtener fechas únicas de los partidos
                    const allMatches = [
                      ...(tournamentData?.matches?.inProgress || []),
                      ...(tournamentData?.matches?.upcoming || [])
                    ]
                    
                    const datesWithMatches = new Set<string>()
                    
                    // Agregar fechas de partidos programados
                    allMatches.forEach((match: any) => {
                      if (match.scheduledAt) {
                        const matchDate = new Date(match.scheduledAt).toDateString()
                        datesWithMatches.add(matchDate)
                      }
                    })
                    
                    // Si no hay fechas, mostrar rango del torneo
                    if (datesWithMatches.size === 0 && tournamentData?.tournament) {
                      const startDate = new Date(tournamentData.tournament.startDate)
                      const endDate = new Date(tournamentData.tournament.endDate)
                      const currentDate = new Date(startDate)
                      
                      while (currentDate <= endDate) {
                        datesWithMatches.add(currentDate.toDateString())
                        currentDate.setDate(currentDate.getDate() + 1)
                      }
                    }
                    
                    const availableDates = Array.from(datesWithMatches).sort((a, b) => 
                      new Date(a).getTime() - new Date(b).getTime()
                    )
                    
                    const selectedDateString = selectedDate.toDateString()
                    
                    return availableDates.map(dateString => {
                      const date = new Date(dateString)
                      const isSelected = dateString === selectedDateString
                      const dayName = date.toLocaleDateString('es-ES', { weekday: 'short' })
                      const dayNumber = date.getDate()
                      const monthName = date.toLocaleDateString('es-ES', { month: 'short' })
                      
                      // Contar partidos en esta fecha
                      const matchesOnDate = allMatches.filter((match: any) => 
                        match.scheduledAt && new Date(match.scheduledAt).toDateString() === dateString
                      ).length
                      
                      // Calcular si es factible jugar estos partidos
                      const courtsCount = tournamentData?.courts?.length || 0
                      const hoursAvailable = endHour - startHour // Horas disponibles configurables
                      const totalTimePerMatch = matchDuration + preparationTime // Tiempo total por partido
                      const maxMatchesPerCourt = Math.floor((hoursAvailable * 60) / totalTimePerMatch)
                      const maxMatchesPerDay = courtsCount * maxMatchesPerCourt
                      const isFeasible = matchesOnDate <= maxMatchesPerDay
                      
                      return (
                        <button
                          key={dateString}
                          onClick={() => setSelectedDate(date)}
                          style={{
                            display: 'flex',
                            flexDirection: 'column',
                            alignItems: 'center',
                            padding: '12px 16px',
                            borderRadius: '12px',
                            border: isSelected 
                              ? `2px solid ${colors.primary[600]}` 
                              : `1px solid ${colors.border.light}`,
                            background: isSelected 
                              ? colors.primary[100] || '#f0f9ff'
                              : 'white',
                            color: isSelected 
                              ? colors.primary[700] 
                              : colors.text.secondary,
                            cursor: 'pointer',
                            fontSize: '13px',
                            fontWeight: isSelected ? 600 : 500,
                            transition: 'all 0.2s',
                            minWidth: '100px'
                          }}
                          onMouseEnter={(e) => {
                            if (!isSelected) {
                              e.currentTarget.style.background = colors.neutral[100]
                              e.currentTarget.style.borderColor = colors.primary[300] || '#93c5fd'
                            }
                          }}
                          onMouseLeave={(e) => {
                            if (!isSelected) {
                              e.currentTarget.style.background = 'white'
                              e.currentTarget.style.borderColor = colors.border.light
                            }
                          }}
                        >
                          <div style={{ fontSize: '11px', textTransform: 'capitalize', marginBottom: '2px' }}>
                            {dayName}
                          </div>
                          <div style={{ fontSize: '18px', fontWeight: 600, marginBottom: '2px' }}>
                            {dayNumber}
                          </div>
                          <div style={{ fontSize: '11px', textTransform: 'capitalize', marginBottom: '4px' }}>
                            {monthName}
                          </div>
                          {matchesOnDate > 0 && (
                            <div style={{ 
                              fontSize: '10px', 
                              background: !isFeasible ? colors.warning[600] : colors.accent[600],
                              color: 'white',
                              padding: '2px 6px',
                              borderRadius: '10px',
                              display: 'flex',
                              alignItems: 'center',
                              gap: '2px'
                            }}>
                              {!isFeasible && '⚠️ '}
                              {matchesOnDate}
                            </div>
                          )}
                        </button>
                      )
                    })
                  })()}
                </div>
              </div>
              
              {/* Filtros jerárquicos tipo tabs */}
              <div style={{ display: 'flex', flexDirection: 'column', gap: '12px', alignItems: 'flex-start' }}>
                {/* Contenedor de filtros de modalidad y nivel */}
                <div style={{ display: 'flex', gap: '16px', alignItems: 'center', flexWrap: 'wrap' }}>
                  {/* Filtro de Modalidad */}
                  <div style={{
                    display: 'inline-flex',
                    background: colors.neutral[100],
                    borderRadius: '12px',
                    padding: '4px',
                    gap: '2px',
                    boxShadow: 'inset 0 1px 3px rgba(0,0,0,0.08)'
                  }}>
                    <button
                      type="button"
                      onClick={() => {
                        setSelectedModalities(['M', 'F', 'X'])
                        setScheduleCategoryFilter('all')
                      }}
                      style={{
                        padding: '8px 16px',
                        borderRadius: '8px',
                        border: 'none',
                        background: scheduleCategoryFilter === 'all' ? 'white' : 'transparent',
                        color: scheduleCategoryFilter === 'all' ? colors.text.primary : colors.text.secondary,
                        fontWeight: 500,
                        fontSize: '13px',
                        cursor: 'pointer',
                        transition: 'all 0.2s',
                        boxShadow: scheduleCategoryFilter === 'all' ? '0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.08)' : 'none'
                      }}
                    >
                      Todas
                    </button>
                    <button
                      type="button"
                      onClick={() => {
                        setSelectedModalities(['M'])
                        setScheduleCategoryFilter('M')
                      }}
                      style={{
                        padding: '8px 16px',
                        borderRadius: '8px',
                        border: 'none',
                        background: scheduleCategoryFilter === 'M' ? 'white' : 'transparent',
                        color: scheduleCategoryFilter === 'M' ? colors.primary[600] : colors.text.secondary,
                        fontWeight: 500,
                        fontSize: '13px',
                        cursor: 'pointer',
                        transition: 'all 0.2s',
                        boxShadow: scheduleCategoryFilter === 'M' ? '0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.08)' : 'none'
                      }}
                    >
                      Masculino
                    </button>
                    <button
                      type="button"
                      onClick={() => {
                        setSelectedModalities(['F'])
                        setScheduleCategoryFilter('F')
                      }}
                      style={{
                        padding: '8px 16px',
                        borderRadius: '8px',
                        border: 'none',
                        background: scheduleCategoryFilter === 'F' ? 'white' : 'transparent',
                        color: scheduleCategoryFilter === 'F' ? '#EC4899' : colors.text.secondary,
                        fontWeight: 500,
                        fontSize: '13px',
                        cursor: 'pointer',
                        transition: 'all 0.2s',
                        boxShadow: scheduleCategoryFilter === 'F' ? '0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.08)' : 'none'
                      }}
                    >
                      Femenino
                    </button>
                    <button
                      type="button"
                      onClick={() => {
                        setSelectedModalities(['X'])
                        setScheduleCategoryFilter('X')
                      }}
                      style={{
                        padding: '8px 16px',
                        borderRadius: '8px',
                        border: 'none',
                        background: scheduleCategoryFilter === 'X' ? 'white' : 'transparent',
                        color: scheduleCategoryFilter === 'X' ? colors.accent[600] : colors.text.secondary,
                        fontWeight: 500,
                        fontSize: '13px',
                        cursor: 'pointer',
                        transition: 'all 0.2s',
                        boxShadow: scheduleCategoryFilter === 'X' ? '0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.08)' : 'none'
                      }}
                    >
                      Mixto
                    </button>
                  </div>
                  
                  {/* Filtro de Nivel de Fuerza */}
                  {scheduleCategoryFilter !== 'all' && (
                    <div style={{
                      display: 'inline-flex',
                      background: colors.neutral[100],
                      borderRadius: '12px',
                      padding: '4px',
                      gap: '2px',
                      boxShadow: 'inset 0 1px 3px rgba(0,0,0,0.08)'
                    }}>
                    <button
                      type="button"
                      onClick={() => setSelectedLevels([])}
                      style={{
                        padding: '6px 12px',
                        borderRadius: '8px',
                        border: 'none',
                        background: selectedLevels.length === 0 ? 'white' : 'transparent',
                        color: selectedLevels.length === 0 ? colors.text.primary : colors.text.secondary,
                        fontWeight: 500,
                        fontSize: '12px',
                        cursor: 'pointer',
                        transition: 'all 0.2s',
                        boxShadow: selectedLevels.length === 0 ? '0 1px 2px rgba(0,0,0,0.1)' : 'none'
                      }}
                    >
                      Todos
                    </button>
                    {['OPEN', '1F', '2F', '3F', '4F', '5F', '6F'].map(level => (
                      <button
                        key={level}
                        type="button"
                        onClick={() => {
                          if (selectedLevels.includes(level)) {
                            setSelectedLevels(selectedLevels.filter(l => l !== level))
                          } else {
                            setSelectedLevels([...selectedLevels, level])
                          }
                        }}
                        style={{
                          padding: '6px 12px',
                          borderRadius: '8px',
                          border: 'none',
                          background: selectedLevels.includes(level) ? 'white' : 'transparent',
                          color: selectedLevels.includes(level) ? colors.primary[600] : colors.text.secondary,
                          fontWeight: 500,
                          fontSize: '12px',
                          cursor: 'pointer',
                          transition: 'all 0.2s',
                          boxShadow: selectedLevels.includes(level) ? '0 1px 2px rgba(0,0,0,0.1)' : 'none'
                        }}
                      >
                        {level === 'OPEN' ? 'Open' : level}
                      </button>
                    ))}
                  </div>
                  )}
                </div>
                
                {/* Filtro de Estado (mantenerlo como select) */}
                <div style={{ display: 'flex', gap: '12px' }}>
                  <select
                    value={scheduleFilter}
                    onChange={(e) => setScheduleFilter(e.target.value as any)}
                    style={{
                      padding: '8px 12px',
                      borderRadius: '8px',
                      border: '1px solid #e5e7eb',
                      fontSize: '14px',
                      minWidth: '150px'
                    }}
                  >
                    <option value="all">Todos los partidos</option>
                    <option value="SCHEDULED">Programados</option>
                    <option value="IN_PROGRESS">En juego</option>
                    <option value="COMPLETED">Finalizados</option>
                  </select>
                </div>
              </div>
            </div>

            {/* Lista de partidos por horario */}
            <div style={{
              background: 'white',
              padding: '24px',
              borderRadius: '0 0 16px 16px'
            }}>
              <h3 style={{
                fontSize: '18px',
                fontWeight: 600,
                marginBottom: '20px',
                color: '#111827'
              }}>
                {selectedDate.toLocaleDateString('es-MX', { 
                  weekday: 'long', 
                  day: 'numeric', 
                  month: 'long' 
                })}
              </h3>
              
              <div style={{ display: 'flex', flexDirection: 'column', gap: '24px' }}>
                {/* Agrupar partidos por hora */}
                {Object.entries(
                  tournamentData.matches?.upcoming
                  ?.filter((match: any) => {
                    if (!match.scheduledAt) return false;
                    const matchDate = new Date(match.scheduledAt);
                    if (matchDate.toDateString() !== selectedDate.toDateString()) return false;
                    
                    // Filtrar por modalidad - Verificar en el texto del round
                    if (scheduleCategoryFilter !== 'all') {
                      const roundUpper = match.round?.toUpperCase() || '';
                      let matchModality = 'M'; // Por defecto masculino
                      
                      if (roundUpper.includes('FEMENINO') || roundUpper.includes('FEM')) {
                        matchModality = 'F';
                      } else if (roundUpper.includes('MIXTO') || roundUpper.includes('MIX')) {
                        matchModality = 'X';
                      }
                      
                      if (matchModality !== scheduleCategoryFilter) return false;
                    }
                    
                    // Filtrar por nivel de fuerza SOLO si hay niveles específicos seleccionados
                    if (selectedLevels.length > 0) {
                      const roundUpper = match.round?.toUpperCase() || '';
                      let matchLevel = null;
                      
                      // Buscar el nivel en el texto
                      if (roundUpper.includes('OPEN')) {
                        matchLevel = 'OPEN';
                      } else if (roundUpper.includes('PRIMERA') || roundUpper.includes('1ERA')) {
                        matchLevel = '1F';
                      } else if (roundUpper.includes('SEGUNDA') || roundUpper.includes('2DA')) {
                        matchLevel = '2F';
                      } else if (roundUpper.includes('TERCERA') || roundUpper.includes('3ERA') || roundUpper.includes('3RA')) {
                        matchLevel = '3F';
                      } else if (roundUpper.includes('CUARTA') || roundUpper.includes('4TA')) {
                        matchLevel = '4F';
                      } else if (roundUpper.includes('QUINTA') || roundUpper.includes('5TA')) {
                        matchLevel = '5F';
                      } else if (roundUpper.includes('SEXTA') || roundUpper.includes('6TA')) {
                        matchLevel = '6F';
                      }
                      
                      // Solo filtrar si se encontró un nivel y NO está en la lista seleccionada
                      if (matchLevel && !selectedLevels.includes(matchLevel)) return false;
                    }
                    // Si no hay niveles seleccionados (length = 0), mostrar todos los niveles de la modalidad
                    
                    // Filtrar por estado
                    if (scheduleFilter !== 'all' && match.status !== scheduleFilter) {
                      return false;
                    }
                    
                    return true;
                  })
                  .reduce((groups: any, match: any) => {
                    const time = new Date(match.scheduledAt).toLocaleTimeString('es-MX', {
                      hour: '2-digit',
                      minute: '2-digit'
                    });
                    if (!groups[time]) {
                      groups[time] = [];
                    }
                    groups[time].push(match);
                    return groups;
                  }, {}) || {}
                )
                .map(([time, matches]: [string, any]) => (
                    <div key={time}>
                      <div style={{
                        display: 'flex',
                        alignItems: 'center',
                        gap: '12px',
                        marginBottom: '16px'
                      }}>
                        <div style={{
                          padding: '6px 16px',
                          background: colors.primary[600],
                          borderRadius: '20px',
                          color: 'white',
                          fontSize: '14px',
                          fontWeight: 600
                        }}>
                          {time}
                        </div>
                        <span style={{
                          fontSize: '12px',
                          color: '#6B7280'
                        }}>
                          {matches.length} partido{matches.length !== 1 ? 's' : ''}
                        </span>
                      </div>
                      
                      <div style={{
                        display: 'grid',
                        gridTemplateColumns: 'repeat(auto-fill, minmax(380px, 1fr))',
                        gap: '20px'
                      }}>
                        {matches.map((match: any) => (
                          <div key={match.id} style={{
                            borderRadius: '16px',
                            border: '1px solid #e5e7eb',
                            background: 'white',
                            overflow: 'hidden',
                            transition: 'all 0.3s',
                            boxShadow: '0 1px 3px rgba(0,0,0,0.05)'
                          }}
                          onMouseEnter={(e) => {
                            e.currentTarget.style.boxShadow = '0 4px 12px rgba(0,0,0,0.1)'
                            e.currentTarget.style.transform = 'translateY(-2px)'
                          }}
                          onMouseLeave={(e) => {
                            e.currentTarget.style.boxShadow = '0 1px 3px rgba(0,0,0,0.05)'
                            e.currentTarget.style.transform = 'translateY(0)'
                          }}>
                            {/* Header con gradiente */}
                            <div style={{
                              background: 'linear-gradient(135deg, #f9fafb 0%, #ffffff 100%)',
                              borderBottom: '1px solid #f3f4f6',
                              padding: '12px 16px',
                              display: 'flex',
                              justifyContent: 'space-between',
                              alignItems: 'center'
                            }}>
                              <span style={{
                                fontSize: '12px',
                                fontWeight: 600,
                                color: '#6B7280',
                                textTransform: 'uppercase',
                                letterSpacing: '0.5px',
                                flex: 1
                              }}>
                                {match.round?.replace(/\s*\([^)]*\)/g, '').trim()}
                              </span>
                              <div style={{
                                display: 'flex',
                                alignItems: 'center',
                                gap: '6px',
                                padding: '4px 10px',
                                borderRadius: '20px',
                                background: 'rgba(164,223,78,0.1)',
                                border: '1px solid rgba(164,223,78,0.2)'
                              }}>
                                <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="#16A34A" strokeWidth="2">
                                  <rect x="3" y="3" width="18" height="18" rx="2"/>
                                  <line x1="3" y1="12" x2="21" y2="12"/>
                                  <line x1="12" y1="3" x2="12" y2="21"/>
                                </svg>
                                <span style={{
                                  fontSize: '11px',
                                  fontWeight: 600,
                                  color: '#16A34A'
                                }}>
                                  Cancha {match.courtNumber || '?'}
                                </span>
                              </div>
                            </div>
                            
                            {/* Body con equipos */}
                            <div style={{ padding: '20px' }}>
                              <div style={{ display: 'flex', flexDirection: 'column', gap: '16px' }}>
                                {/* Equipo 1 */}
                                <div style={{
                                  display: 'flex',
                                  alignItems: 'center',
                                  justifyContent: 'space-between'
                                }}>
                                  <div style={{
                                    display: 'flex',
                                    alignItems: 'center',
                                    gap: '12px',
                                    flex: 1
                                  }}>
                                    <div style={{
                                      position: 'relative'
                                    }}>
                                      <div style={{
                                        width: '40px',
                                        height: '40px',
                                        borderRadius: '50%',
                                        background: 'linear-gradient(135deg, #3B82F6 0%, #2563EB 100%)',
                                        display: 'flex',
                                        alignItems: 'center',
                                        justifyContent: 'center',
                                        boxShadow: '0 2px 4px rgba(59,130,246,0.2)'
                                      }}>
                                        <span style={{
                                          fontSize: '14px',
                                          fontWeight: 700,
                                          color: 'white'
                                        }}>
                                          {match.team1Name?.substring(0, 2).toUpperCase() || 'T1'}
                                        </span>
                                      </div>
                                      {match.status === 'IN_PROGRESS' && (
                                        <div style={{
                                          position: 'absolute',
                                          bottom: '-2px',
                                          right: '-2px',
                                          width: '12px',
                                          height: '12px',
                                          borderRadius: '50%',
                                          background: '#10B981',
                                          border: '2px solid white',
                                          animation: 'pulse 2s infinite'
                                        }} />
                                      )}
                                    </div>
                                    <div>
                                      <div style={{
                                        fontSize: '15px',
                                        fontWeight: 600,
                                        color: '#111827',
                                        marginBottom: '2px'
                                      }}>
                                        {match.team1Name || 'Equipo 1'}
                                      </div>
                                      <div style={{
                                        fontSize: '12px',
                                        color: '#6B7280'
                                      }}>
                                        {match.team1Player1 && match.team1Player2 
                                          ? `${match.team1Player1} • ${match.team1Player2}`
                                          : 'Jugadores por confirmar'}
                                      </div>
                                    </div>
                                  </div>
                                  {match.status === 'COMPLETED' ? (
                                    <div style={{
                                      display: 'flex',
                                      alignItems: 'center',
                                      gap: '8px'
                                    }}>
                                      <span style={{
                                        fontSize: '24px',
                                        fontWeight: 700,
                                        color: match.winner === match.team1Name ? '#16A34A' : '#9CA3AF'
                                      }}>
                                        {match.team1Score || 0}
                                      </span>
                                      {match.winner === match.team1Name && (
                                        <svg width="20" height="20" viewBox="0 0 20 20" fill="#16A34A">
                                          <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd"/>
                                        </svg>
                                      )}
                                    </div>
                                  ) : (
                                    <div style={{
                                      width: '36px',
                                      height: '36px',
                                      border: '2px solid #e5e7eb',
                                      borderRadius: '8px',
                                      background: '#fafafa'
                                    }} />
                                  )}
                                </div>
                                
                                {/* Separador VS elegante */}
                                <div style={{
                                  display: 'flex',
                                  alignItems: 'center',
                                  gap: '12px',
                                  padding: '0 40px'
                                }}>
                                  <div style={{
                                    flex: 1,
                                    height: '1px',
                                    background: 'linear-gradient(90deg, transparent, #e5e7eb, transparent)'
                                  }} />
                                  <span style={{
                                    fontSize: '11px',
                                    fontWeight: 700,
                                    color: '#D1D5DB',
                                    letterSpacing: '1px'
                                  }}>
                                    VS
                                  </span>
                                  <div style={{
                                    flex: 1,
                                    height: '1px',
                                    background: 'linear-gradient(90deg, transparent, #e5e7eb, transparent)'
                                  }} />
                                </div>
                                
                                {/* Equipo 2 */}
                                <div style={{
                                  display: 'flex',
                                  alignItems: 'center',
                                  justifyContent: 'space-between'
                                }}>
                                  <div style={{
                                    display: 'flex',
                                    alignItems: 'center',
                                    gap: '12px',
                                    flex: 1
                                  }}>
                                    <div style={{
                                      position: 'relative'
                                    }}>
                                      <div style={{
                                        width: '40px',
                                        height: '40px',
                                        borderRadius: '50%',
                                        background: 'linear-gradient(135deg, #10B981 0%, #059669 100%)',
                                        display: 'flex',
                                        alignItems: 'center',
                                        justifyContent: 'center',
                                        boxShadow: '0 2px 4px rgba(16,185,129,0.2)'
                                      }}>
                                        <span style={{
                                          fontSize: '14px',
                                          fontWeight: 700,
                                          color: 'white'
                                        }}>
                                          {match.team2Name?.substring(0, 2).toUpperCase() || 'T2'}
                                        </span>
                                      </div>
                                      {match.status === 'IN_PROGRESS' && (
                                        <div style={{
                                          position: 'absolute',
                                          bottom: '-2px',
                                          right: '-2px',
                                          width: '12px',
                                          height: '12px',
                                          borderRadius: '50%',
                                          background: '#10B981',
                                          border: '2px solid white',
                                          animation: 'pulse 2s infinite'
                                        }} />
                                      )}
                                    </div>
                                    <div>
                                      <div style={{
                                        fontSize: '15px',
                                        fontWeight: 600,
                                        color: '#111827',
                                        marginBottom: '2px'
                                      }}>
                                        {match.team2Name || 'Equipo 2'}
                                      </div>
                                      <div style={{
                                        fontSize: '12px',
                                        color: '#6B7280'
                                      }}>
                                        {match.team2Player1 && match.team2Player2
                                          ? `${match.team2Player1} • ${match.team2Player2}`
                                          : 'Jugadores por confirmar'}
                                      </div>
                                    </div>
                                  </div>
                                  {match.status === 'COMPLETED' ? (
                                    <div style={{
                                      display: 'flex',
                                      alignItems: 'center',
                                      gap: '8px'
                                    }}>
                                      <span style={{
                                        fontSize: '24px',
                                        fontWeight: 700,
                                        color: match.winner === match.team2Name ? '#16A34A' : '#9CA3AF'
                                      }}>
                                        {match.team2Score || 0}
                                      </span>
                                      {match.winner === match.team2Name && (
                                        <svg width="20" height="20" viewBox="0 0 20 20" fill="#16A34A">
                                          <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd"/>
                                        </svg>
                                      )}
                                    </div>
                                  ) : (
                                    <div style={{
                                      width: '36px',
                                      height: '36px',
                                      border: '2px solid #e5e7eb',
                                      borderRadius: '8px',
                                      background: '#fafafa'
                                    }} />
                                  )}
                                </div>
                              </div>
                              
                              {/* Footer con estado y acciones */}
                              <div style={{
                                marginTop: '20px',
                                paddingTop: '16px',
                                borderTop: '1px solid #f3f4f6',
                                display: 'flex',
                                alignItems: 'center',
                                justifyContent: 'space-between'
                              }}>
                                <div style={{
                                  display: 'flex',
                                  alignItems: 'center',
                                  gap: '12px'
                                }}>
                                  {match.status === 'IN_PROGRESS' ? (
                                    <div style={{
                                      padding: '6px 12px',
                                      borderRadius: '20px',
                                      background: 'linear-gradient(135deg, rgba(164,223,78,0.15), rgba(164,223,78,0.05))',
                                      border: '1px solid rgba(164,223,78,0.3)',
                                      display: 'flex',
                                      alignItems: 'center',
                                      gap: '6px'
                                    }}>
                                      <div style={{
                                        width: '6px',
                                        height: '6px',
                                        borderRadius: '50%',
                                        background: '#16A34A',
                                        animation: 'pulse 2s infinite'
                                      }} />
                                      <span style={{
                                        fontSize: '12px',
                                        fontWeight: 600,
                                        color: '#16A34A'
                                      }}>
                                        EN JUEGO
                                      </span>
                                    </div>
                                  ) : match.status === 'COMPLETED' ? (
                                    <span style={{
                                      padding: '6px 12px',
                                      borderRadius: '20px',
                                      background: 'rgba(16,185,129,0.1)',
                                      fontSize: '12px',
                                      fontWeight: 600,
                                      color: '#059669'
                                    }}>
                                      FINALIZADO
                                    </span>
                                  ) : (
                                    <span style={{
                                      padding: '6px 12px',
                                      borderRadius: '20px',
                                      background: '#f3f4f6',
                                      fontSize: '12px',
                                      fontWeight: 600,
                                      color: '#6B7280'
                                    }}>
                                      PENDIENTE
                                    </span>
                                  )}
                                  {match.duration && (
                                    <span style={{
                                      display: 'flex',
                                      alignItems: 'center',
                                      gap: '4px',
                                      fontSize: '11px',
                                      color: '#9CA3AF'
                                    }}>
                                      <Clock size={11} />
                                      {match.duration} min
                                    </span>
                                  )}
                                </div>
                                {match.status !== 'COMPLETED' && (
                                  <button
                                    onClick={() => {
                                      setSelectedMatch(match)
                                      setShowScheduleModal(true)
                                    }}
                                    style={{
                                      padding: '6px 12px',
                                      borderRadius: '8px',
                                      border: 'none',
                                      background: 'transparent',
                                      color: '#6B7280',
                                      fontSize: '12px',
                                      cursor: 'pointer',
                                      display: 'flex',
                                      alignItems: 'center',
                                      gap: '6px',
                                      transition: 'all 0.2s'
                                    }}
                                    onMouseEnter={(e) => {
                                      e.currentTarget.style.background = '#f3f4f6'
                                      e.currentTarget.style.color = '#111827'
                                    }}
                                    onMouseLeave={(e) => {
                                      e.currentTarget.style.background = 'transparent'
                                      e.currentTarget.style.color = '#6B7280'
                                    }}
                                  >
                                    <Calendar size={12} />
                                    Reprogramar
                                  </button>
                                )}
                              </div>
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                  ))
                }
                
                {(!tournamentData.matches?.upcoming || 
                  tournamentData.matches.upcoming.filter((m: any) => {
                    if (!m.scheduledAt) return false;
                    const matchDate = new Date(m.scheduledAt);
                    return matchDate.toDateString() === selectedDate.toDateString();
                  }).length === 0) && (
                  <div style={{
                    padding: '48px',
                    textAlign: 'center',
                    color: '#9CA3AF'
                  }}>
                    <Calendar size={48} style={{ margin: '0 auto 16px', opacity: 0.5 }} />
                    <p style={{ fontSize: '16px', fontWeight: 500 }}>
                      No hay partidos programados para esta fecha
                    </p>
                  </div>
                )}
              </div>
            </div>
          </div>
        )}

        {/* Vista de Captura Masiva */}
        {activeView === 'capture' && (
          <div style={{ marginTop: '24px' }}>
            <CardModern variant="glass" padding="lg">
              <CardModernHeader>
                <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
                  <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>
                    <div style={{
                      width: '36px',
                      height: '36px',
                      borderRadius: '10px',
                      background: `linear-gradient(135deg, ${colors.primary[600]}15, ${colors.accent[300]}15)`,
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center'
                    }}>
                      <Camera size={20} style={{ color: colors.primary[600] }} />
                    </div>
                    <div>
                      <CardModernTitle>Captura Masiva de Resultados</CardModernTitle>
                      <CardModernDescription>
                        Registra múltiples resultados de forma rápida y eficiente
                      </CardModernDescription>
                    </div>
                  </div>
                  <div style={{ display: 'flex', gap: '8px' }}>
                    <button 
                      onClick={() => {
                        // Obtener todos los partidos filtrados actuales
                        const allMatches = [...tournamentData.matches.upcoming, ...tournamentData.matches.inProgress]
                        const filteredMatches = allMatches.filter((m: any) => {
                          if (captureCategoryFilter !== 'all') {
                            const matchCategory = m.round?.split('-')[0] || ''
                            const matchModality = m.round?.includes('FEM') ? 'F' : 'M'
                            const categoryKey = `${matchCategory}-${matchModality}`
                            if (categoryKey !== captureCategoryFilter) return false
                          }
                          if (captureStatusFilter === 'pending' && m.status !== 'pending') {
                            return false
                          } else if (captureStatusFilter === 'completed' && m.status !== 'completed') {
                            return false
                          }
                          return true
                        })
                        
                        // Toggle selección: si todos están seleccionados, deseleccionar todo; si no, seleccionar todo
                        const allSelected = filteredMatches.every((m: any) => selectedMatches.has(m.id))
                        if (allSelected) {
                          setSelectedMatches(new Set()) // Deseleccionar todo
                        } else {
                          setSelectedMatches(new Set(filteredMatches.map((m: any) => m.id))) // Seleccionar todo
                        }
                      }}
                      style={{
                        padding: '8px 16px',
                        borderRadius: '8px',
                        border: `1px solid ${colors.border.default}`,
                        background: 'white',
                        color: colors.text.secondary,
                        fontSize: '13px',
                        fontWeight: 500,
                        cursor: 'pointer',
                        display: 'flex',
                        alignItems: 'center',
                        gap: '6px'
                      }}
                    >
                      <CheckCircle size={16} />
                      {selectedMatches.size > 0 ? 'Deseleccionar todos' : 'Seleccionar todos'}
                    </button>
                    <button style={{
                      padding: '8px 16px',
                      borderRadius: '8px',
                      background: `linear-gradient(135deg, ${colors.accent[600]}, ${colors.accent[300]})`,
                      color: 'white',
                      border: 'none',
                      fontSize: '13px',
                      fontWeight: 500,
                      cursor: 'pointer',
                      display: 'flex',
                      alignItems: 'center',
                      gap: '6px'
                    }}>
                      <Camera size={16} />
                      Guardar seleccionados
                    </button>
                  </div>
                </div>
              </CardModernHeader>

              <CardModernContent>
                {/* Filtros */}
                <div style={{
                  display: 'flex',
                  gap: '12px',
                  marginBottom: '20px',
                  padding: '16px',
                  background: 'rgba(255, 255, 255, 0.5)',
                  borderRadius: '12px',
                  border: `1px solid ${colors.border.light}`
                }}>
                  <select 
                    value={captureCategoryFilter}
                    onChange={(e) => setCaptureCategoryFilter(e.target.value)}
                    style={{
                      padding: '8px 12px',
                      borderRadius: '8px',
                      border: `1px solid ${colors.border.default}`,
                      background: 'white',
                      fontSize: '13px',
                      color: colors.text.primary,
                      cursor: 'pointer'
                    }}
                  >
                    <option value="all">Todas las categorías</option>
                    {tournamentData?.categories.map((cat: any) => (
                      <option key={`${cat.code}-${cat.modality}`} value={`${cat.code}-${cat.modality}`}>
                        {cat.name} {cat.modality === 'M' ? 'Masculino' : 'Femenino'}
                      </option>
                    ))}
                  </select>
                  <select 
                    value={captureStatusFilter}
                    onChange={(e) => setCaptureStatusFilter(e.target.value as any)}
                    style={{
                      padding: '8px 12px',
                      borderRadius: '8px',
                      border: `1px solid ${colors.border.default}`,
                      background: 'white',
                      fontSize: '13px',
                      color: colors.text.primary,
                      cursor: 'pointer'
                    }}
                  >
                    <option value="pending">Solo pendientes</option>
                    <option value="all">Todos los partidos</option>
                    <option value="completed">Completados</option>
                  </select>
                  <span style={{
                    marginLeft: 'auto',
                    padding: '8px 12px',
                    borderRadius: '8px',
                    background: `linear-gradient(135deg, ${colors.primary[600]}10, ${colors.accent[300]}10)`,
                    border: `1px solid ${colors.primary[600]}30`,
                    fontSize: '13px',
                    color: colors.primary[700],
                    fontWeight: 500
                  }}>
                    {selectedMatches.size} seleccionados
                  </span>
                </div>

                {/* Lista de partidos pendientes para capturar */}
                <div style={{ display: 'flex', flexDirection: 'column', gap: '12px' }}>
                  {(() => {
                    // Filtrar partidos según los filtros seleccionados
                    const allMatches = [...tournamentData.matches.upcoming, ...tournamentData.matches.inProgress]
                    const filteredMatches = allMatches.filter((m: any) => {
                      // Aplicar filtro de categoría
                      if (captureCategoryFilter !== 'all') {
                        const matchCategory = m.round?.split('-')[0] || ''
                        const matchModality = m.round?.includes('FEM') ? 'F' : 'M'
                        const categoryKey = `${matchCategory}-${matchModality}`
                        if (categoryKey !== captureCategoryFilter) return false
                      }
                      
                      // Aplicar filtro de estado
                      if (captureStatusFilter === 'pending' && m.status !== 'pending') {
                        return false
                      } else if (captureStatusFilter === 'completed' && m.status !== 'completed') {
                        return false
                      }
                      // 'all' muestra todos
                      
                      return true
                    })
                    
                    if (filteredMatches.length === 0) {
                      return (
                        <div style={{
                          padding: '32px',
                          textAlign: 'center',
                          color: colors.text.tertiary,
                          borderRadius: '12px',
                          background: 'white',
                          border: `1px solid ${colors.border.light}`
                        }}>
                          No hay partidos que coincidan con los filtros seleccionados
                        </div>
                      )
                    }
                    
                    return filteredMatches.slice(0, 10).map((match: any) => (
                    <div key={match.id} style={{
                      padding: '16px',
                      borderRadius: '12px',
                      background: match.status === 'completed' ? 'rgba(102, 231, 170, 0.05)' : 'white',
                      border: `1px solid ${match.status === 'completed' ? colors.accent[600] + '30' : colors.border.light}`,
                      display: 'flex',
                      alignItems: 'center',
                      gap: '16px'
                    }}>
                      <input
                        type="checkbox"
                        checked={selectedMatches.has(match.id)}
                        onChange={(e) => {
                          const newSelected = new Set(selectedMatches)
                          if (e.target.checked) {
                            newSelected.add(match.id)
                          } else {
                            newSelected.delete(match.id)
                          }
                          setSelectedMatches(newSelected)
                        }}
                        style={{
                          width: '20px',
                          height: '20px',
                          cursor: 'pointer'
                        }}
                      />
                      
                      <div style={{ flex: 1 }}>
                        <div style={{ 
                          display: 'grid',
                          gridTemplateColumns: '2fr 100px 100px 100px 2fr',
                          gap: '16px',
                          alignItems: 'center'
                        }}>
                          <div>
                            <p style={{ 
                              fontSize: '14px',
                              fontWeight: 500,
                              color: colors.text.primary
                            }}>
                              {match.team1Name}
                            </p>
                            <p style={{ 
                              fontSize: '12px',
                              color: colors.text.secondary
                            }}>
                              {match.round}
                            </p>
                          </div>
                          
                          <input
                            type="text"
                            placeholder="Set 1"
                            defaultValue={match.team1Score?.split('-')[0]}
                            style={{
                              padding: '8px',
                              borderRadius: '6px',
                              border: `1px solid ${colors.border.default}`,
                              textAlign: 'center',
                              fontSize: '14px',
                              fontWeight: 500
                            }}
                          />
                          
                          <input
                            type="text"
                            placeholder="Set 2"
                            defaultValue={match.team1Score?.split('-')[1]}
                            style={{
                              padding: '8px',
                              borderRadius: '6px',
                              border: `1px solid ${colors.border.default}`,
                              textAlign: 'center',
                              fontSize: '14px',
                              fontWeight: 500
                            }}
                          />
                          
                          <input
                            type="text"
                            placeholder="Set 3"
                            style={{
                              padding: '8px',
                              borderRadius: '6px',
                              border: `1px solid ${colors.border.default}`,
                              textAlign: 'center',
                              fontSize: '14px',
                              fontWeight: 500
                            }}
                          />
                          
                          <div style={{ textAlign: 'right' }}>
                            <p style={{ 
                              fontSize: '14px',
                              fontWeight: 500,
                              color: colors.text.primary
                            }}>
                              {match.team2Name}
                            </p>
                            <p style={{ 
                              fontSize: '12px',
                              color: colors.text.secondary
                            }}>
                              Cancha {match.courtNumber || '?'}
                            </p>
                          </div>
                        </div>
                      </div>

                      <div style={{
                        padding: '8px 12px',
                        borderRadius: '8px',
                        background: match.status === 'completed' 
                          ? `linear-gradient(135deg, ${colors.accent[600]}20, ${colors.accent[300]}20)`
                          : colors.neutral[100],
                        border: `1px solid ${match.status === 'completed' ? colors.accent[600] + '40' : colors.border.light}`,
                        minWidth: '120px',
                        textAlign: 'center'
                      }}>
                        {match.status === 'completed' ? (
                          <span style={{ 
                            fontSize: '12px',
                            color: colors.accent[700],
                            fontWeight: 500
                          }}>
                            ✓ Completado
                          </span>
                        ) : (
                          <span style={{ 
                            fontSize: '12px',
                            color: colors.text.secondary
                          }}>
                            Pendiente
                          </span>
                        )}
                      </div>
                    </div>
                    ))
                  })()}
                </div>
              </CardModernContent>
            </CardModern>
          </div>
        )}

        {/* Vista Modo Recepción - Check-in rápido el día del torneo */}
        {activeView === 'reception' && (
          <div style={{ marginTop: '24px' }}>
            {/* Header consistente con otros módulos */}
            <div style={{
              background: 'white',
              borderRadius: '16px 16px 0 0',
              padding: '24px',
              borderBottom: `1px solid ${colors.border.light}`
            }}>
              <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', marginBottom: '20px' }}>
                <div style={{ display: 'flex', alignItems: 'center', gap: '16px' }}>
                  <div style={{
                    width: '48px',
                    height: '48px',
                    borderRadius: '12px',
                    background: 'linear-gradient(135deg, #8B5CF6, #7C3AED)',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center'
                  }}>
                    <CheckCircle size={24} style={{ color: 'white' }} />
                  </div>
                  <div>
                    <h2 style={{ 
                      fontSize: '24px', 
                      fontWeight: 700,
                      margin: '0 0 4px 0',
                      color: colors.text.primary
                    }}>
                      Modo Recepción
                    </h2>
                    <p style={{ 
                      fontSize: '14px',
                      margin: 0,
                      color: colors.text.secondary
                    }}>
                      Check-in rápido de equipos • {new Date().toLocaleDateString('es-MX', { weekday: 'long', day: 'numeric', month: 'long' })}
                    </p>
                  </div>
                </div>
                
                {/* Barra de progreso */}
                <div style={{ 
                  minWidth: '250px',
                  textAlign: 'center'
                }}>
                  <div style={{ 
                    fontSize: '24px', 
                    fontWeight: 700,
                    color: colors.text.primary,
                    marginBottom: '8px'
                  }}>
                    {registrations.filter(r => r.checkedIn).length} de {registrations.length}
                  </div>
                  <div style={{
                    height: '8px',
                    background: colors.neutral[200],
                    borderRadius: '100px',
                    overflow: 'hidden',
                    position: 'relative'
                  }}>
                    <div style={{
                      position: 'absolute',
                      top: 0,
                      left: 0,
                      height: '100%',
                      width: registrations.length > 0 
                        ? `${(registrations.filter(r => r.checkedIn).length / registrations.length) * 100}%`
                        : '0%',
                      background: 'linear-gradient(90deg, #8B5CF6, #7C3AED)',
                      borderRadius: '100px',
                      transition: 'width 0.5s ease'
                    }} />
                  </div>
                  <div style={{ 
                    fontSize: '12px', 
                    color: colors.text.tertiary,
                    marginTop: '4px'
                  }}>
                    Equipos confirmados
                  </div>
                </div>
              </div>

              {/* Barra de búsqueda grande */}
              <div style={{
                padding: '24px 32px',
                background: '#F8F9FA',
                borderBottom: '1px solid #E5E7EB'
              }}>
                <div style={{
                  position: 'relative'
                }}>
                  <Search 
                    size={24} 
                    style={{
                      position: 'absolute',
                      left: '20px',
                      top: '50%',
                      transform: 'translateY(-50%)',
                      color: '#9CA3AF'
                    }}
                  />
                  <input
                    type="text"
                    placeholder="Buscar por nombre de equipo o jugador..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    style={{
                      width: '100%',
                      padding: '20px 20px 20px 60px',
                      fontSize: '18px',
                      borderRadius: '16px',
                      border: '2px solid #E5E7EB',
                      background: 'white',
                      outline: 'none',
                      transition: 'all 0.2s'
                    }}
                    onFocus={(e) => {
                      e.currentTarget.style.borderColor = '#8B5CF6'
                      e.currentTarget.style.boxShadow = '0 0 0 3px rgba(139, 92, 246, 0.1)'
                    }}
                    onBlur={(e) => {
                      e.currentTarget.style.borderColor = '#E5E7EB'
                      e.currentTarget.style.boxShadow = 'none'
                    }}
                  />
                </div>
              </div>

              {/* Estadísticas rápidas */}
              <div style={{
                padding: '24px 32px',
                display: 'grid',
                gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))',
                gap: '16px',
                background: '#F8F9FA'
              }}>
                <div style={{
                  background: 'white',
                  padding: '16px',
                  borderRadius: '12px',
                  border: '1px solid #E5E7EB'
                }}>
                  <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>
                    <CheckCircle size={20} style={{ color: '#10B981' }} />
                    <div>
                      <div style={{ fontSize: '24px', fontWeight: 600 }}>
                        {registrations.filter(r => r.checkedIn).length}
                      </div>
                      <div style={{ fontSize: '12px', color: '#6B7280' }}>
                        Confirmados
                      </div>
                    </div>
                  </div>
                </div>
                
                <div style={{
                  background: 'white',
                  padding: '16px',
                  borderRadius: '12px',
                  border: '1px solid #E5E7EB'
                }}>
                  <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>
                    <Clock size={20} style={{ color: '#F59E0B' }} />
                    <div>
                      <div style={{ fontSize: '24px', fontWeight: 600 }}>
                        {registrations.filter(r => !r.checkedIn).length}
                      </div>
                      <div style={{ fontSize: '12px', color: '#6B7280' }}>
                        Pendientes
                      </div>
                    </div>
                  </div>
                </div>
                
                <div style={{
                  background: 'white',
                  padding: '16px',
                  borderRadius: '12px',
                  border: '1px solid #E5E7EB'
                }}>
                  <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>
                    <DollarSign size={20} style={{ color: '#10B981' }} />
                    <div>
                      <div style={{ fontSize: '24px', fontWeight: 600 }}>
                        {registrations.filter(r => r.paymentStatus === 'completed').length}
                      </div>
                      <div style={{ fontSize: '12px', color: '#6B7280' }}>
                        Pagados
                      </div>
                    </div>
                  </div>
                </div>
                
                <div style={{
                  background: 'white',
                  padding: '16px',
                  borderRadius: '12px',
                  border: '1px solid #E5E7EB'
                }}>
                  <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>
                    <AlertCircle size={20} style={{ color: '#EF4444' }} />
                    <div>
                      <div style={{ fontSize: '24px', fontWeight: 600 }}>
                        {registrations.filter(r => r.paymentStatus !== 'completed').length}
                      </div>
                      <div style={{ fontSize: '12px', color: '#6B7280' }}>
                        Pago Pendiente
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              {/* Lista de equipos para check-in */}
              <div style={{
                padding: '32px',
                maxHeight: '600px',
                overflowY: 'auto'
              }}>
                {(() => {
                  const filteredTeams = registrations.filter(reg => 
                    reg.teamName?.toLowerCase().includes(searchTerm.toLowerCase()) ||
                    reg.player1Name?.toLowerCase().includes(searchTerm.toLowerCase()) ||
                    reg.player2Name?.toLowerCase().includes(searchTerm.toLowerCase())
                  )

                  // Función para obtener la hora del próximo partido de un equipo
                  const getNextMatchTime = (teamName: string) => {
                    const nextMatch = tournamentData?.matches?.upcoming?.find((match: any) => 
                      match.team1Name === teamName || match.team2Name === teamName
                    )
                    return nextMatch ? new Date(nextMatch.scheduledAt).getTime() : new Date('9999-12-31').getTime() // Si no hay partido, ponerlo al final
                  }
                  
                  // Filtrar y ordenar equipos por horario cronológico
                  const pendingTeams = filteredTeams
                    .filter(r => !r.checkedIn)
                    .sort((a, b) => getNextMatchTime(a.teamName) - getNextMatchTime(b.teamName))
                  
                  const confirmedTeams = filteredTeams
                    .filter(r => r.checkedIn)
                    .sort((a, b) => getNextMatchTime(a.teamName) - getNextMatchTime(b.teamName))

                  return (
                    <>
                      {/* Equipos pendientes primero */}
                      {pendingTeams.length > 0 && (
                        <>
                          <h3 style={{
                            fontSize: '18px',
                            fontWeight: 600,
                            color: '#374151',
                            marginBottom: '16px'
                          }}>
                            Pendientes de Check-in ({pendingTeams.length})
                          </h3>
                          <div style={{ display: 'flex', flexDirection: 'column', gap: '12px', marginBottom: '32px' }}>
                            {pendingTeams.map((reg, index) => (
                              <div
                                key={reg.id || index}
                                style={{
                                  background: 'white',
                                  border: '2px solid #E5E7EB',
                                  borderRadius: '16px',
                                  padding: '20px',
                                  display: 'flex',
                                  justifyContent: 'space-between',
                                  alignItems: 'center',
                                  transition: 'all 0.2s',
                                  cursor: 'pointer'
                                }}
                                onMouseEnter={e => {
                                  e.currentTarget.style.borderColor = '#8B5CF6'
                                  e.currentTarget.style.transform = 'translateX(4px)'
                                  e.currentTarget.style.boxShadow = '0 4px 12px rgba(139, 92, 246, 0.15)'
                                }}
                                onMouseLeave={e => {
                                  e.currentTarget.style.borderColor = '#E5E7EB'
                                  e.currentTarget.style.transform = 'translateX(0)'
                                  e.currentTarget.style.boxShadow = 'none'
                                }}
                              >
                                <div style={{ flex: 1 }}>
                                  <div style={{ display: 'flex', alignItems: 'center', gap: '12px', marginBottom: '8px' }}>
                                    <h4 style={{
                                      fontSize: '20px',
                                      fontWeight: 600,
                                      margin: 0
                                    }}>
                                      {reg.teamName}
                                    </h4>
                                    <span style={{
                                      background: reg.paymentStatus === 'completed' ? '#10B981' : '#F59E0B',
                                      color: 'white',
                                      padding: '4px 12px',
                                      borderRadius: '20px',
                                      fontSize: '12px',
                                      fontWeight: 600
                                    }}>
                                      {reg.paymentStatus === 'completed' ? 'PAGADO' : 'PAGO PENDIENTE'}
                                    </span>
                                  </div>
                                  <div style={{
                                    fontSize: '16px',
                                    color: '#6B7280'
                                  }}>
                                    {reg.player1Name} & {reg.player2Name}
                                  </div>
                                  <div style={{
                                    fontSize: '14px',
                                    color: '#9CA3AF',
                                    marginTop: '4px'
                                  }}>
                                    {reg.category} • {translateModality(reg.modality || 'M')}
                                  </div>
                                  {(() => {
                                    // Buscar el próximo partido de este equipo
                                    const nextMatch = tournamentData?.matches?.upcoming?.find((match: any) => 
                                      match.team1Name === reg.teamName || match.team2Name === reg.teamName
                                    )
                                    
                                    if (nextMatch) {
                                      return (
                                        <div style={{
                                          marginTop: '8px',
                                          display: 'flex',
                                          alignItems: 'center',
                                          gap: '16px'
                                        }}>
                                          <div style={{
                                            display: 'flex',
                                            alignItems: 'center',
                                            gap: '6px'
                                          }}>
                                            <Clock size={14} style={{ color: '#6B7280' }} />
                                            <span style={{
                                              fontSize: '14px',
                                              color: '#374151',
                                              fontWeight: 500
                                            }}>
                                              {new Date(nextMatch.scheduledAt).toLocaleTimeString('es-MX', {
                                                hour: '2-digit',
                                                minute: '2-digit'
                                              })}
                                            </span>
                                          </div>
                                          <span style={{
                                            fontSize: '14px',
                                            color: '#374151',
                                            fontWeight: 500
                                          }}>
                                            Cancha {nextMatch.courtNumber || nextMatch.courtId || 'TBD'}
                                          </span>
                                        </div>
                                      )
                                    }
                                    return null
                                  })()}
                                </div>
                                
                                <button
                                  onClick={(e) => {
                                    e.stopPropagation()
                                    handleCheckIn(reg.id)
                                  }}
                                  style={{
                                    background: 'linear-gradient(135deg, #10B981, #059669)',
                                    color: 'white',
                                    border: 'none',
                                    padding: '12px 24px',
                                    borderRadius: '12px',
                                    fontSize: '16px',
                                    fontWeight: 600,
                                    cursor: 'pointer',
                                    display: 'flex',
                                    alignItems: 'center',
                                    gap: '8px',
                                    transition: 'all 0.2s'
                                  }}
                                  onMouseEnter={e => {
                                    e.currentTarget.style.transform = 'scale(1.05)'
                                  }}
                                  onMouseLeave={e => {
                                    e.currentTarget.style.transform = 'scale(1)'
                                  }}
                                >
                                  <CheckCircle size={20} />
                                  Confirmar
                                </button>
                              </div>
                            ))}
                          </div>
                        </>
                      )}

                      {/* Equipos confirmados */}
                      {confirmedTeams.length > 0 && (
                        <>
                          <h3 style={{
                            fontSize: '18px',
                            fontWeight: 600,
                            color: '#374151',
                            marginBottom: '16px'
                          }}>
                            Confirmados ({confirmedTeams.length})
                          </h3>
                          <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>
                            {confirmedTeams.map((reg, index) => (
                              <div
                                key={reg.id || index}
                                style={{
                                  background: '#F0FDF4',
                                  border: '1px solid #BBF7D0',
                                  borderRadius: '12px',
                                  padding: '16px',
                                  display: 'flex',
                                  justifyContent: 'space-between',
                                  alignItems: 'center',
                                  opacity: 0.8
                                }}
                              >
                                <div>
                                  <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                                    <CheckCircle size={16} style={{ color: '#10B981' }} />
                                    <span style={{ fontWeight: 600 }}>{reg.teamName}</span>
                                  </div>
                                  <div style={{ fontSize: '14px', color: '#6B7280', marginTop: '4px' }}>
                                    {reg.player1Name} & {reg.player2Name}
                                  </div>
                                  {(() => {
                                    const nextMatch = tournamentData?.matches?.upcoming?.find((match: any) => 
                                      match.team1Name === reg.teamName || match.team2Name === reg.teamName
                                    )
                                    
                                    if (nextMatch) {
                                      return (
                                        <div style={{
                                          fontSize: '13px',
                                          color: '#6B7280',
                                          marginTop: '6px',
                                          display: 'flex',
                                          alignItems: 'center',
                                          gap: '8px'
                                        }}>
                                          <Clock size={14} style={{ color: '#9CA3AF' }} />
                                          <span>
                                            {new Date(nextMatch.scheduledAt).toLocaleTimeString('es-MX', {
                                              hour: '2-digit',
                                              minute: '2-digit'
                                            })} - Cancha {nextMatch.courtNumber || 'TBD'}
                                          </span>
                                        </div>
                                      )
                                    }
                                    return null
                                  })()}
                                </div>
                                <span style={{
                                  color: '#10B981',
                                  fontSize: '14px',
                                  fontWeight: 500
                                }}>
                                  ✓ Confirmado
                                </span>
                              </div>
                            ))}
                          </div>
                        </>
                      )}

                      {filteredTeams.length === 0 && (
                        <div style={{
                          textAlign: 'center',
                          padding: '60px',
                          color: '#9CA3AF'
                        }}>
                          <AlertCircle size={48} style={{ marginBottom: '16px' }} />
                          <p style={{ fontSize: '18px' }}>
                            No se encontraron equipos
                          </p>
                        </div>
                      )}
                    </>
                  )
                })()}
              </div>

            </div>

            {/* Sección de Próximos Partidos Mejorada */}
            <div style={{
              background: 'white',
              borderRadius: '0 0 16px 16px',
              padding: '24px',
              borderTop: `1px solid ${colors.border.light}`
            }}>
              <div style={{ 
                display: 'flex', 
                alignItems: 'center', 
                justifyContent: 'space-between',
                marginBottom: '20px'
              }}>
                <h3 style={{
                  fontSize: '18px',
                  fontWeight: 600,
                  color: colors.text.primary,
                  display: 'flex',
                  alignItems: 'center',
                  gap: '8px',
                  margin: 0
                }}>
                  <Calendar size={20} style={{ color: '#8B5CF6' }} />
                  Orden de Juego - Próximas 2 Horas
                </h3>
                <span style={{
                  fontSize: '14px',
                  color: colors.text.secondary,
                  fontWeight: 500
                }}>
                  {new Date().toLocaleTimeString('es-MX', { hour: '2-digit', minute: '2-digit' })}
                </span>
              </div>
              
              <div style={{ display: 'flex', flexDirection: 'column', gap: '12px' }}>
                {(() => {
                  const now = new Date()
                  const twoHoursLater = new Date(now.getTime() + 2 * 60 * 60 * 1000)
                  
                  const upcomingMatches = tournamentData?.matches?.upcoming
                    ?.filter((match: any) => {
                      if (!match.scheduledAt) return false
                      const matchTime = new Date(match.scheduledAt)
                      return matchTime >= now && matchTime <= twoHoursLater
                    })
                    .sort((a: any, b: any) => 
                      new Date(a.scheduledAt).getTime() - new Date(b.scheduledAt).getTime()
                    )
                    .slice(0, 10) || []

                  if (upcomingMatches.length === 0) {
                    return (
                      <div style={{
                        textAlign: 'center',
                        padding: '40px',
                        color: colors.text.tertiary,
                        background: colors.neutral[100],
                        borderRadius: '12px'
                      }}>
                        <Clock size={32} style={{ marginBottom: '12px', opacity: 0.5 }} />
                        <p style={{ margin: 0, fontSize: '16px' }}>
                          No hay partidos programados en las próximas 2 horas
                        </p>
                      </div>
                    )
                  }

                  return upcomingMatches.map((match: any, index: number) => {
                    const matchTime = new Date(match.scheduledAt)
                    const timeDiff = Math.floor((matchTime.getTime() - now.getTime()) / (1000 * 60))
                    const isNext = index === 0
                    const isStartingSoon = timeDiff <= 15
                    
                    return (
                      <div
                        key={match.id}
                        style={{
                          background: isNext ? 'linear-gradient(135deg, #8B5CF615, #7C3AED15)' : 'white',
                          padding: '16px 20px',
                          borderRadius: '12px',
                          border: isNext 
                            ? '2px solid #8B5CF6' 
                            : `1px solid ${colors.border.light}`,
                          display: 'flex',
                          alignItems: 'center',
                          gap: '20px',
                          transition: 'all 0.2s',
                          position: 'relative',
                          overflow: 'hidden'
                        }}
                        onMouseEnter={e => {
                          if (!isNext) {
                            e.currentTarget.style.borderColor = '#8B5CF6'
                            e.currentTarget.style.transform = 'translateX(4px)'
                          }
                        }}
                        onMouseLeave={e => {
                          if (!isNext) {
                            e.currentTarget.style.borderColor = colors.border.light
                            e.currentTarget.style.transform = 'translateX(0)'
                          }
                        }}
                      >
                        {/* Indicador de tiempo */}
                        <div style={{
                          minWidth: '80px',
                          textAlign: 'center'
                        }}>
                          <div style={{
                            fontSize: '20px',
                            fontWeight: 700,
                            color: isStartingSoon ? '#EF4444' : colors.text.primary
                          }}>
                            {matchTime.toLocaleTimeString('es-MX', {
                              hour: '2-digit',
                              minute: '2-digit'
                            })}
                          </div>
                          <div style={{
                            fontSize: '11px',
                            color: isStartingSoon ? '#EF4444' : colors.text.tertiary,
                            fontWeight: 500,
                            textTransform: 'uppercase',
                            marginTop: '2px'
                          }}>
                            {isNext ? 'SIGUIENTE' : 
                             timeDiff <= 0 ? 'EN CURSO' :
                             timeDiff <= 15 ? `En ${timeDiff} min` :
                             timeDiff <= 60 ? `En ${timeDiff} min` :
                             `En ${Math.floor(timeDiff/60)}h ${timeDiff%60}m`}
                          </div>
                        </div>

                        {/* División visual */}
                        <div style={{
                          width: '1px',
                          height: '40px',
                          background: colors.border.light
                        }} />

                        {/* Información de cancha */}
                        <div style={{
                          background: isNext ? '#8B5CF6' : colors.neutral[100],
                          color: isNext ? 'white' : colors.text.secondary,
                          padding: '8px 12px',
                          borderRadius: '8px',
                          fontSize: '14px',
                          fontWeight: 600,
                          minWidth: '90px',
                          textAlign: 'center'
                        }}>
                          CANCHA {match.courtNumber || match.courtId || 'TBD'}
                        </div>

                        {/* Equipos */}
                        <div style={{ flex: 1 }}>
                          <div style={{
                            display: 'flex',
                            alignItems: 'center',
                            gap: '12px',
                            marginBottom: '4px'
                          }}>
                            <span style={{
                              fontSize: '16px',
                              fontWeight: 600,
                              color: colors.text.primary
                            }}>
                              {match.team1Name || 'Por definir'}
                            </span>
                            <span style={{
                              color: colors.text.tertiary,
                              fontSize: '14px',
                              fontWeight: 500
                            }}>
                              vs
                            </span>
                            <span style={{
                              fontSize: '16px',
                              fontWeight: 600,
                              color: colors.text.primary
                            }}>
                              {match.team2Name || 'Por definir'}
                            </span>
                          </div>
                          <div style={{
                            fontSize: '13px',
                            color: colors.text.secondary,
                            display: 'flex',
                            alignItems: 'center',
                            gap: '8px'
                          }}>
                            <span>{match.round || 'Fase de grupos'}</span>
                            {match.category && (
                              <>
                                <span>•</span>
                                <span>{match.category}</span>
                              </>
                            )}
                          </div>
                        </div>

                        {/* Estado del partido */}
                        <div style={{
                          display: 'flex',
                          alignItems: 'center',
                          gap: '8px'
                        }}>
                          {isStartingSoon && (
                            <span style={{
                              background: '#FEE2E2',
                              color: '#991B1B',
                              padding: '6px 12px',
                              borderRadius: '20px',
                              fontSize: '12px',
                              fontWeight: 600,
                              animation: 'pulse 2s infinite'
                            }}>
                              PRÓXIMO A INICIAR
                            </span>
                          )}
                          {match.status === 'IN_PROGRESS' && (
                            <span style={{
                              background: '#DCFCE7',
                              color: '#166534',
                              padding: '6px 12px',
                              borderRadius: '20px',
                              fontSize: '12px',
                              fontWeight: 600
                            }}>
                              EN JUEGO
                            </span>
                          )}
                        </div>
                      </div>
                    )
                  })
                })()}
              </div>
              
              {/* Nota informativa */}
              <div style={{
                marginTop: '16px',
                padding: '12px',
                background: colors.neutral[100],
                borderRadius: '8px',
                display: 'flex',
                alignItems: 'center',
                gap: '8px'
              }}>
                <AlertCircle size={16} style={{ color: colors.text.secondary }} />
                <span style={{
                  fontSize: '13px',
                  color: colors.text.secondary
                }}>
                  Los equipos deben presentarse 10 minutos antes en la cancha asignada
                </span>
              </div>
            </div>
          </div>
        )}

        {/* Vista de Inscritos - Estilo Verde Oscuro */}
        {activeView === 'registrations' && (
          <div style={{ marginTop: '24px' }}>
            {/* Header con estilo minimalista como vista general */}
            <div style={{
              background: 'white',
              borderRadius: '16px 16px 0 0',
              padding: '24px',
              borderBottom: `1px solid ${colors.border.light}`
            }}>
              <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', marginBottom: '20px' }}>
                <div style={{ display: 'flex', alignItems: 'center', gap: '16px' }}>
                  <div style={{
                    width: '48px',
                    height: '48px',
                    borderRadius: '12px',
                    background: `linear-gradient(135deg, ${colors.primary[600]}15, ${colors.accent[300]}15)`,
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center'
                  }}>
                    <Users size={24} style={{ color: colors.primary[600] }} />
                  </div>
                  <div>
                    <h2 style={{ 
                      fontSize: '24px', 
                      fontWeight: 700,
                      margin: '0 0 4px 0',
                      color: colors.text.primary
                    }}>
                      Equipos Inscritos
                    </h2>
                    <p style={{ 
                      fontSize: '14px',
                      margin: 0,
                      color: colors.text.secondary
                    }}>
                      Gestión de inscripciones y participantes del torneo
                    </p>
                  </div>
                </div>
                <div style={{ display: 'flex', gap: '12px' }}>
                  <button 
                    onClick={fetchRegistrations}
                    disabled={loadingRegistrations}
                    style={{
                      padding: '12px',
                      borderRadius: '12px',
                      border: `1px solid ${colors.border.light}`,
                      background: colors.neutral[100],
                      color: colors.text.secondary,
                      cursor: loadingRegistrations ? 'not-allowed' : 'pointer',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      transition: 'all 0.2s',
                      width: '44px',
                      height: '44px'
                    }}
                    onMouseEnter={(e) => {
                      if (!loadingRegistrations) {
                        e.currentTarget.style.background = colors.neutral[200]
                        e.currentTarget.style.color = colors.text.primary
                      }
                    }}
                    onMouseLeave={(e) => {
                      e.currentTarget.style.background = colors.neutral[100]
                      e.currentTarget.style.color = colors.text.secondary
                    }}
                  >
                    {loadingRegistrations ? (
                      <Loader2 size={20} style={{ animation: 'spin 1s linear infinite' }} />
                    ) : (
                      <TrendingUp size={20} />
                    )}
                  </button>
                  <button 
                  onClick={() => setShowAddTeamModal(true)}
                  style={{
                    padding: '12px',
                    borderRadius: '12px',
                    background: colors.primary[600],
                    border: 'none',
                    color: 'white',
                    cursor: 'pointer',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    transition: 'all 0.2s',
                    width: '44px',
                    height: '44px'
                  }}
                  onMouseEnter={(e) => {
                    e.currentTarget.style.background = colors.primary[700]
                  }}
                  onMouseLeave={(e) => {
                    e.currentTarget.style.background = colors.primary[600]
                  }}>
                    <Plus size={20} />
                  </button>
                </div>
              </div>

              {/* Filtros interactivos */}
              <div style={{
                marginBottom: '20px',
                display: 'flex',
                flexWrap: 'wrap',
                gap: '16px',
                alignItems: 'center'
              }}>
                {/* Filtro de Modalidad */}
                <div style={{
                  display: 'inline-flex',
                  background: colors.neutral[100],
                  borderRadius: '12px',
                  padding: '4px',
                  gap: '2px',
                  boxShadow: 'inset 0 1px 3px rgba(0,0,0,0.08)'
                }}>
                  <button
                    type="button"
                    onClick={() => {
                      setRegistrationsModalityFilter('all')
                      setRegistrationsLevelFilter([])
                    }}
                    style={{
                      padding: '8px 16px',
                      borderRadius: '8px',
                      border: 'none',
                      background: registrationsModalityFilter === 'all' ? 'white' : 'transparent',
                      color: registrationsModalityFilter === 'all' ? colors.text.primary : colors.text.secondary,
                      fontWeight: 500,
                      fontSize: '13px',
                      cursor: 'pointer',
                      transition: 'all 0.2s',
                      boxShadow: registrationsModalityFilter === 'all' ? '0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.08)' : 'none'
                    }}
                  >
                    Todas
                  </button>
                  <button
                    type="button"
                    onClick={() => setRegistrationsModalityFilter('M')}
                    style={{
                      padding: '8px 16px',
                      borderRadius: '8px',
                      border: 'none',
                      background: registrationsModalityFilter === 'M' ? 'white' : 'transparent',
                      color: registrationsModalityFilter === 'M' ? colors.primary[600] : colors.text.secondary,
                      fontWeight: 500,
                      fontSize: '13px',
                      cursor: 'pointer',
                      transition: 'all 0.2s',
                      boxShadow: registrationsModalityFilter === 'M' ? '0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.08)' : 'none'
                    }}
                  >
                    Masculino
                  </button>
                  <button
                    type="button"
                    onClick={() => setRegistrationsModalityFilter('F')}
                    style={{
                      padding: '8px 16px',
                      borderRadius: '8px',
                      border: 'none',
                      background: registrationsModalityFilter === 'F' ? 'white' : 'transparent',
                      color: registrationsModalityFilter === 'F' ? colors.pink[600] : colors.text.secondary,
                      fontWeight: 500,
                      fontSize: '13px',
                      cursor: 'pointer',
                      transition: 'all 0.2s',
                      boxShadow: registrationsModalityFilter === 'F' ? '0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.08)' : 'none'
                    }}
                  >
                    Femenino
                  </button>
                  <button
                    type="button"
                    onClick={() => setRegistrationsModalityFilter('X')}
                    style={{
                      padding: '8px 16px',
                      borderRadius: '8px',
                      border: 'none',
                      background: registrationsModalityFilter === 'X' ? 'white' : 'transparent',
                      color: registrationsModalityFilter === 'X' ? colors.accent[600] : colors.text.secondary,
                      fontWeight: 500,
                      fontSize: '13px',
                      cursor: 'pointer',
                      transition: 'all 0.2s',
                      boxShadow: registrationsModalityFilter === 'X' ? '0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.08)' : 'none'
                    }}
                  >
                    Mixto
                  </button>
                </div>
                
                {/* Filtro de Nivel de Fuerza */}
                {registrationsModalityFilter !== 'all' && (
                  <div style={{
                    display: 'inline-flex',
                    background: colors.neutral[100],
                    borderRadius: '12px',
                    padding: '4px',
                    gap: '2px',
                    boxShadow: 'inset 0 1px 3px rgba(0,0,0,0.08)'
                  }}>
                    <button
                      type="button"
                      onClick={() => setRegistrationsLevelFilter([])}
                      style={{
                        padding: '6px 12px',
                        borderRadius: '8px',
                        border: 'none',
                        background: registrationsLevelFilter.length === 0 ? 'white' : 'transparent',
                        color: registrationsLevelFilter.length === 0 ? colors.text.primary : colors.text.secondary,
                        fontWeight: 500,
                        fontSize: '12px',
                        cursor: 'pointer',
                        transition: 'all 0.2s',
                        boxShadow: registrationsLevelFilter.length === 0 ? '0 1px 2px rgba(0,0,0,0.1)' : 'none'
                      }}
                    >
                      Todos
                    </button>
                    {['OPEN', '1F', '2F', '3F', '4F', '5F', '6F'].map(level => (
                      <button
                        key={level}
                        type="button"
                        onClick={() => {
                          if (registrationsLevelFilter.includes(level)) {
                            setRegistrationsLevelFilter(registrationsLevelFilter.filter(l => l !== level))
                          } else {
                            setRegistrationsLevelFilter([...registrationsLevelFilter, level])
                          }
                        }}
                        style={{
                          padding: '6px 12px',
                          borderRadius: '8px',
                          border: 'none',
                          background: registrationsLevelFilter.includes(level) ? 'white' : 'transparent',
                          color: registrationsLevelFilter.includes(level) ? colors.primary[600] : colors.text.secondary,
                          fontWeight: 500,
                          fontSize: '12px',
                          cursor: 'pointer',
                          transition: 'all 0.2s',
                          boxShadow: registrationsLevelFilter.includes(level) ? '0 1px 2px rgba(0,0,0,0.1)' : 'none'
                        }}
                      >
                        {level === 'OPEN' ? 'Open' : level}
                      </button>
                    ))}
                  </div>
                )}
              </div>

              {/* Barra de búsqueda */}
              <div style={{
                position: 'relative',
                marginBottom: '20px'
              }}>
                <Search 
                  size={20} 
                  style={{
                    position: 'absolute',
                    left: '16px',
                    top: '50%',
                    transform: 'translateY(-50%)',
                    color: colors.text.tertiary
                  }}
                />
                <input
                  type="text"
                  placeholder="Buscar equipos..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  style={{
                    width: '100%',
                    padding: '16px 16px 16px 48px',
                    borderRadius: '12px',
                    border: `1px solid ${colors.border.light}`,
                    background: colors.neutral[100],
                    color: colors.text.primary,
                    fontSize: '16px',
                    outline: 'none'
                  }}
                  onFocus={(e) => {
                    e.currentTarget.style.background = 'white'
                    e.currentTarget.style.borderColor = colors.primary[600]
                  }}
                  onBlur={(e) => {
                    e.currentTarget.style.background = colors.neutral[100]
                    e.currentTarget.style.borderColor = colors.border.light
                  }}
                />
              </div>

              {/* Estadísticas */}
              <div style={{
                display: 'grid',
                gridTemplateColumns: 'repeat(auto-fit, minmax(120px, 1fr))',
                gap: '16px'
              }}>
                <div style={{ 
                  textAlign: 'center',
                  padding: '16px',
                  borderRadius: '12px',
                  background: colors.neutral[100],
                  border: `1px solid ${colors.border.light}`
                }}>
                  <p style={{ fontSize: '28px', fontWeight: 700, color: colors.text.primary, margin: '0 0 4px 0' }}>
                    {registrations.length}
                  </p>
                  <p style={{ fontSize: '12px', color: colors.text.secondary, margin: 0 }}>
                    Total Inscritos (Página {currentPage})
                  </p>
                </div>
                <div style={{ 
                  textAlign: 'center',
                  padding: '16px',
                  borderRadius: '12px',
                  background: colors.neutral[100],
                  border: `1px solid ${colors.border.light}`
                }}>
                  <p style={{ fontSize: '28px', fontWeight: 700, color: colors.text.primary, margin: '0 0 4px 0' }}>
                    {registrations.filter(r => r.confirmed).length}
                  </p>
                  <p style={{ fontSize: '12px', color: colors.text.secondary, margin: 0 }}>
                    Confirmados
                  </p>
                </div>
                <div style={{ 
                  textAlign: 'center',
                  padding: '16px',
                  borderRadius: '12px',
                  background: colors.neutral[100],
                  border: `1px solid ${colors.border.light}`
                }}>
                  <p style={{ fontSize: '28px', fontWeight: 700, color: colors.warning[600], margin: '0 0 4px 0' }}>
                    {registrations.filter(r => r.paymentStatus === 'pending').length}
                  </p>
                  <p style={{ fontSize: '12px', color: colors.text.secondary, margin: 0 }}>
                    Pago Pendiente
                  </p>
                </div>
                <div style={{ 
                  textAlign: 'center',
                  padding: '16px',
                  borderRadius: '12px',
                  background: colors.neutral[100],
                  border: `1px solid ${colors.border.light}`
                }}>
                  <p style={{ fontSize: '28px', fontWeight: 700, color: colors.accent[600], margin: '0 0 4px 0' }}>
                    {registrations.filter(r => r.checkedIn).length}
                  </p>
                  <p style={{ fontSize: '12px', color: colors.text.secondary, margin: 0 }}>
                    Check-in
                  </p>
                </div>
              </div>
            </div>

            {/* Contenido con fondo blanco */}
            <div style={{
              background: 'white',
              borderRadius: '0 0 16px 16px',
              padding: '24px'
            }}>

                {/* Tabla de inscritos */}
                {loadingRegistrations ? (
                  <div style={{ 
                    padding: '48px',
                    textAlign: 'center',
                    color: colors.text.tertiary
                  }}>
                    <Loader2 size={32} style={{ 
                      color: colors.primary[600],
                      animation: 'spin 1s linear infinite',
                      margin: '0 auto 16px'
                    }} />
                    <p>Cargando inscripciones...</p>
                  </div>
                ) : registrations.length === 0 ? (
                  <div style={{
                    padding: '48px',
                    textAlign: 'center',
                    color: colors.text.tertiary,
                    borderRadius: '12px',
                    background: 'white',
                    border: `1px solid ${colors.border.light}`
                  }}>
                    <Users size={48} style={{ 
                      color: colors.neutral[400],
                      margin: '0 auto 16px'
                    }} />
                    <h3 style={{ 
                      fontSize: '18px',
                      fontWeight: 600,
                      color: colors.text.primary,
                      marginBottom: '8px'
                    }}>
                      No hay equipos inscritos
                    </h3>
                    <p style={{ 
                      fontSize: '14px',
                      color: colors.text.secondary
                    }}>
                      Agrega el primer equipo para comenzar
                    </p>
                  </div>
                ) : (() => {
                  // Filtrar equipos basado en el término de búsqueda
                  const filteredRegistrations = registrations.filter(reg => {
                    // Filter by search term
                    const matchesSearch = 
                      reg.teamName?.toLowerCase().includes(searchTerm.toLowerCase()) ||
                      reg.player1Name?.toLowerCase().includes(searchTerm.toLowerCase()) ||
                      reg.player2Name?.toLowerCase().includes(searchTerm.toLowerCase()) ||
                      reg.category?.toLowerCase().includes(searchTerm.toLowerCase())
                    
                    if (!matchesSearch) return false
                    
                    // Filter by modality
                    if (registrationsModalityFilter !== 'all') {
                      if (registrationsModalityFilter === 'M' && reg.modality !== 'masculine' && reg.modality !== 'M') return false
                      if (registrationsModalityFilter === 'F' && reg.modality !== 'feminine' && reg.modality !== 'F') return false
                      if (registrationsModalityFilter === 'X' && reg.modality !== 'mixed' && reg.modality !== 'X') return false
                    }
                    
                    // Filter by level
                    if (registrationsLevelFilter.length > 0) {
                      if (!registrationsLevelFilter.includes(reg.category)) return false
                    }
                    
                    return true
                  })
                  
                  // Calculate pagination
                  const totalPages = Math.ceil(filteredRegistrations.length / registrationsPerPage)
                  const indexOfLastRegistration = currentPage * registrationsPerPage
                  const indexOfFirstRegistration = indexOfLastRegistration - registrationsPerPage
                  const currentRegistrations = filteredRegistrations.slice(indexOfFirstRegistration, indexOfLastRegistration)
                  
                  // DEBUG - Remove after testing
                  console.log('PAGINATION DEBUG:', {
                    filtered: filteredRegistrations.length,
                    currentPage,
                    perPage: registrationsPerPage,
                    showing: currentRegistrations.length,
                    totalPages,
                    range: `${indexOfFirstRegistration}-${indexOfLastRegistration}`
                  })

                  return currentRegistrations.length === 0 && currentPage === 1 ? (
                    <div style={{
                      padding: '48px',
                      textAlign: 'center',
                      color: colors.text.tertiary,
                      borderRadius: '12px',
                      background: colors.neutral[50],
                      border: `1px solid ${colors.border.light}`
                    }}>
                      <Search size={48} style={{ 
                        color: colors.neutral[400],
                        margin: '0 auto 16px'
                      }} />
                      <h3 style={{ 
                        fontSize: '18px',
                        fontWeight: 600,
                        color: colors.text.primary,
                        marginBottom: '8px'
                      }}>
                        No se encontraron resultados
                      </h3>
                      <p style={{ 
                        fontSize: '14px',
                        color: colors.text.secondary
                      }}>
                        Prueba con un término de búsqueda diferente
                      </p>
                    </div>
                  ) : (
                    <div style={{
                      display: 'grid',
                      gap: '16px'
                    }}>
                      {/* Tarjetas de equipos estilo moderno */}
                      {currentRegistrations.map((reg, idx) => (
                        <div key={reg.id} style={{
                          background: 'white',
                          borderRadius: '16px',
                          padding: '20px',
                          border: '1px solid #e5e7eb',
                          transition: 'all 0.3s',
                          cursor: 'pointer',
                          position: 'relative',
                          overflow: 'hidden'
                        }}
                        onMouseEnter={(e) => {
                          e.currentTarget.style.transform = 'translateY(-2px)'
                          e.currentTarget.style.boxShadow = '0 12px 24px rgba(0,0,0,0.1)'
                          e.currentTarget.style.borderColor = '#059669'
                        }}
                        onMouseLeave={(e) => {
                          e.currentTarget.style.transform = 'translateY(0)'
                          e.currentTarget.style.boxShadow = 'none'
                          e.currentTarget.style.borderColor = '#e5e7eb'
                        }}>
                          {/* Franja verde lateral */}
                          <div style={{
                            position: 'absolute',
                            left: 0,
                            top: 0,
                            bottom: 0,
                            width: '4px',
                            background: 'linear-gradient(180deg, #047857, #059669)',
                            borderRadius: '16px 0 0 16px'
                          }} />

                          {/* Contenido de la tarjeta */}
                          <div style={{
                            display: 'flex',
                            gap: '20px',
                            alignItems: 'center',
                            width: '100%'
                          }}>
                            {/* Número del equipo */}
                            <div style={{
                              width: '48px',
                              height: '48px',
                              borderRadius: '12px',
                              background: 'linear-gradient(135deg, #f0fdf4, #dcfce7)',
                              display: 'flex',
                              alignItems: 'center',
                              justifyContent: 'center',
                              fontWeight: 700,
                              fontSize: '20px',
                              color: '#059669',
                              flexShrink: 0
                            }}>
                              {idx + 1}
                            </div>

                            {/* Información del equipo */}
                            <div style={{ flex: 1 }}>
                              <div style={{
                                display: 'flex',
                                alignItems: 'center',
                                gap: '12px',
                                marginBottom: '8px'
                              }}>
                                <h3 style={{
                                  fontSize: '18px',
                                  fontWeight: 700,
                                  color: '#1f2937',
                                  margin: 0
                                }}>
                                  {reg.teamName || `Equipo ${idx + 1}`}
                                </h3>
                                <span style={{
                                  padding: '4px 10px',
                                  borderRadius: '20px',
                                  background: 'linear-gradient(135deg, #047857, #059669)',
                                  color: 'white',
                                  fontSize: '11px',
                                  fontWeight: 600,
                                  textTransform: 'uppercase',
                                  letterSpacing: '0.5px'
                                }}>
                                  {reg.category || 'OPEN'} {translateModality(reg.modality || 'M')}
                                </span>
                              </div>

                              {/* Jugadores */}
                              <div style={{
                                display: 'flex',
                                gap: '20px',
                                alignItems: 'center'
                              }}>
                                <div style={{
                                  display: 'flex',
                                  alignItems: 'center',
                                  gap: '8px'
                                }}>
                                  <Users size={16} color="#6b7280" />
                                  <span style={{
                                    fontSize: '14px',
                                    color: '#4b5563'
                                  }}>
                                    {reg.player1Name}
                                  </span>
                                </div>
                                {reg.player2Name && (
                                  <>
                                    <span style={{ color: '#d1d5db' }}>•</span>
                                    <div style={{
                                      display: 'flex',
                                      alignItems: 'center',
                                      gap: '8px'
                                    }}>
                                      <Users size={16} color="#6b7280" />
                                      <span style={{
                                        fontSize: '14px',
                                        color: '#4b5563'
                                      }}>
                                        {reg.player2Name}
                                      </span>
                                    </div>
                                  </>
                                )}
                              </div>
                            </div>

                            {/* Estado y acciones */}
                            <div style={{
                              display: 'flex',
                              alignItems: 'center',
                              gap: '16px'
                            }}>
                              {/* Estado de pago */}
                              <div style={{
                                padding: '8px 16px',
                                borderRadius: '10px',
                                background: reg.paymentStatus === 'completed' 
                                  ? '#dcfce7'
                                  : reg.paymentStatus === 'pending'
                                  ? '#fef3c7'
                                  : '#fee2e2',
                                fontSize: '13px',
                                fontWeight: 600,
                                color: reg.paymentStatus === 'completed' 
                                  ? '#15803d'
                                  : reg.paymentStatus === 'pending'
                                  ? '#a16207'
                                  : '#dc2626',
                                display: 'flex',
                                alignItems: 'center',
                                gap: '6px'
                              }}>
                                {reg.paymentStatus === 'completed' ? (
                                  <>
                                    <CheckCircle size={14} />
                                    Pagado
                                  </>
                                ) : reg.paymentStatus === 'pending' ? (
                                  <>
                                    <Clock size={14} />
                                    Pendiente
                                  </>
                                ) : (
                                  <>
                                    <XCircle size={14} />
                                    Cancelado
                                  </>
                                )}
                              </div>

                              {/* Acciones */}
                              <div style={{
                                display: 'flex',
                                gap: '8px'
                              }}>
                                <button 
                                  title="Ver detalles"
                                  style={{
                                    width: '36px',
                                    height: '36px',
                                    borderRadius: '10px',
                                    background: 'white',
                                    border: '1px solid #e5e7eb',
                                    color: '#059669',
                                    cursor: 'pointer',
                                    display: 'flex',
                                    alignItems: 'center',
                                    justifyContent: 'center',
                                    transition: 'all 0.2s'
                                  }}
                                  onMouseEnter={(e) => {
                                    e.currentTarget.style.background = '#f0fdf4'
                                    e.currentTarget.style.borderColor = '#059669'
                                    e.currentTarget.style.transform = 'scale(1.05)'
                                  }}
                                  onMouseLeave={(e) => {
                                    e.currentTarget.style.background = 'white'
                                    e.currentTarget.style.borderColor = '#e5e7eb'
                                    e.currentTarget.style.transform = 'scale(1)'
                                  }}
                                >
                                  <Eye size={18} />
                                </button>
                                <button 
                                  title="Editar equipo"
                                  onClick={() => handleEditTeam(reg)}
                                  style={{
                                    width: '36px',
                                    height: '36px',
                                    borderRadius: '10px',
                                    background: 'white',
                                    border: '1px solid #e5e7eb',
                                    color: '#0ea5e9',
                                    cursor: 'pointer',
                                    display: 'flex',
                                    alignItems: 'center',
                                    justifyContent: 'center',
                                    transition: 'all 0.2s'
                                  }}
                                  onMouseEnter={(e) => {
                                    e.currentTarget.style.background = '#f0f9ff'
                                    e.currentTarget.style.borderColor = '#0ea5e9'
                                    e.currentTarget.style.transform = 'scale(1.05)'
                                  }}
                                  onMouseLeave={(e) => {
                                    e.currentTarget.style.background = 'white'
                                    e.currentTarget.style.borderColor = '#e5e7eb'
                                    e.currentTarget.style.transform = 'scale(1)'
                                  }}
                                >
                                  <Edit size={18} />
                                </button>
                                <button 
                                  title="Eliminar equipo"
                                  style={{
                                    width: '36px',
                                    height: '36px',
                                    borderRadius: '10px',
                                    background: 'white',
                                    border: '1px solid #e5e7eb',
                                    color: '#ef4444',
                                    cursor: 'pointer',
                                    display: 'flex',
                                    alignItems: 'center',
                                    justifyContent: 'center',
                                    transition: 'all 0.2s'
                                  }}
                                  onMouseEnter={(e) => {
                                    e.currentTarget.style.background = '#fef2f2'
                                    e.currentTarget.style.borderColor = '#ef4444'
                                    e.currentTarget.style.transform = 'scale(1.05)'
                                  }}
                                  onMouseLeave={(e) => {
                                    e.currentTarget.style.background = 'white'
                                    e.currentTarget.style.borderColor = '#e5e7eb'
                                    e.currentTarget.style.transform = 'scale(1)'
                                  }}
                                  onClick={() => {
                                    if (confirm('¿Estás seguro de eliminar este equipo?')) {
                                      console.log('Eliminar equipo:', reg.id)
                                    }
                                  }}
                                >
                                  <Trash2 size={18} />
                                </button>
                              </div>
                            </div>
                          </div>
                        </div>
                      ))}
                      
                      {/* Pagination Controls */}
                      {totalPages > 1 && (
                        <div style={{
                          display: 'flex',
                          alignItems: 'center',
                          justifyContent: 'center',
                          gap: '12px',
                          marginTop: '24px',
                          padding: '20px',
                          background: 'white',
                          borderRadius: '16px',
                          border: '1px solid #e5e7eb'
                        }}>
                          <button
                            onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}
                            disabled={currentPage === 1}
                            style={{
                              padding: '8px 16px',
                              background: currentPage === 1 ? '#f3f4f6' : '#059669',
                              color: currentPage === 1 ? '#9ca3af' : 'white',
                              border: 'none',
                              borderRadius: '10px',
                              fontWeight: 600,
                              fontSize: '14px',
                              cursor: currentPage === 1 ? 'not-allowed' : 'pointer',
                              opacity: currentPage === 1 ? 0.5 : 1,
                              transition: 'all 0.2s'
                            }}
                          >
                            Anterior
                          </button>
                          
                          <div style={{
                            display: 'flex',
                            alignItems: 'center',
                            gap: '8px'
                          }}>
                            {[...Array(Math.min(5, totalPages))].map((_, idx) => {
                              let pageNum = idx + 1
                              
                              if (totalPages > 5) {
                                if (currentPage <= 3) {
                                  pageNum = idx + 1
                                } else if (currentPage >= totalPages - 2) {
                                  pageNum = totalPages - 4 + idx
                                } else {
                                  pageNum = currentPage - 2 + idx
                                }
                              }
                              
                              return (
                                <button
                                  key={pageNum}
                                  onClick={() => setCurrentPage(pageNum)}
                                  style={{
                                    width: '36px',
                                    height: '36px',
                                    background: currentPage === pageNum ? '#059669' : 'white',
                                    color: currentPage === pageNum ? 'white' : '#374151',
                                    border: currentPage === pageNum ? 'none' : '1px solid #e5e7eb',
                                    borderRadius: '10px',
                                    fontWeight: currentPage === pageNum ? 700 : 500,
                                    fontSize: '14px',
                                    cursor: 'pointer',
                                    transition: 'all 0.2s'
                                  }}
                                >
                                  {pageNum}
                                </button>
                              )
                            })}
                          </div>
                          
                          <button
                            onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))}
                            disabled={currentPage === totalPages}
                            style={{
                              padding: '8px 16px',
                              background: currentPage === totalPages ? '#f3f4f6' : '#059669',
                              color: currentPage === totalPages ? '#9ca3af' : 'white',
                              border: 'none',
                              borderRadius: '10px',
                              fontWeight: 600,
                              fontSize: '14px',
                              cursor: currentPage === totalPages ? 'not-allowed' : 'pointer',
                              opacity: currentPage === totalPages ? 0.5 : 1,
                              transition: 'all 0.2s'
                            }}
                          >
                            Siguiente
                          </button>
                          
                          <div style={{
                            marginLeft: '16px',
                            padding: '0 16px',
                            borderLeft: '1px solid #e5e7eb',
                            color: '#6b7280',
                            fontSize: '14px',
                            fontWeight: 500
                          }}>
                            Mostrando {indexOfFirstRegistration + 1}-{Math.min(indexOfLastRegistration, filteredRegistrations.length)} de {filteredRegistrations.length}
                          </div>
                        </div>
                      )}
                    </div>
                  )
                })()}
            </div>

            {/* Modal para agregar equipo */}
            <Modal
            open={showAddTeamModal}
            onClose={() => setShowAddTeamModal(false)}
            title="Agregar Nuevo Equipo"
            size="lg"
            footer={
              <>
                <button
                  onClick={() => setShowAddTeamModal(false)}
                  style={{
                    padding: '10px 20px',
                    borderRadius: '8px',
                    border: '1px solid #e5e7eb',
                    background: 'white',
                    color: '#374151',
                    fontSize: '14px',
                    fontWeight: 500,
                    cursor: 'pointer',
                    transition: 'all 0.2s'
                  }}
                  onMouseEnter={(e) => {
                    e.currentTarget.style.background = '#f9fafb'
                  }}
                  onMouseLeave={(e) => {
                    e.currentTarget.style.background = 'white'
                  }}
                >
                  Cancelar
                </button>
                <button
                  onClick={handleSaveTeam}
                  disabled={savingTeam}
                  style={{
                    padding: '10px 20px',
                    borderRadius: '8px',
                    background: savingTeam ? '#9ca3af' : '#047857',
                    color: 'white',
                    fontSize: '14px',
                    fontWeight: 500,
                    cursor: savingTeam ? 'not-allowed' : 'pointer',
                    transition: 'all 0.2s',
                    border: 'none',
                    display: 'flex',
                    alignItems: 'center',
                    gap: '8px'
                  }}
                  onMouseEnter={(e) => {
                    if (!savingTeam) {
                      e.currentTarget.style.background = '#059669'
                    }
                  }}
                  onMouseLeave={(e) => {
                    if (!savingTeam) {
                      e.currentTarget.style.background = '#047857'
                    }
                  }}
                >
                  {savingTeam && <Loader2 size={16} style={{ animation: 'spin 1s linear infinite' }} />}
                  {savingTeam ? 'Guardando...' : 'Guardar Equipo'}
                </button>
              </>
            }
          >
            <div style={{ display: 'flex', flexDirection: 'column', gap: '20px' }}>
              <div>
                <label style={{ display: 'block', marginBottom: '6px', fontSize: '14px', fontWeight: 500, color: '#374151' }}>
                  Nombre del Equipo
                </label>
                <input
                  type="text"
                  value={teamForm.teamName}
                  onChange={(e) => setTeamForm({...teamForm, teamName: e.target.value})}
                  style={{
                    width: '100%',
                    padding: '10px 12px',
                    borderRadius: '8px',
                    border: '1px solid #e5e7eb',
                    fontSize: '14px',
                    outline: 'none',
                    transition: 'all 0.2s'
                  }}
                  onFocus={(e) => {
                    e.currentTarget.style.borderColor = '#047857'
                    e.currentTarget.style.boxShadow = '0 0 0 3px rgba(4, 120, 87, 0.1)'
                  }}
                  onBlur={(e) => {
                    e.currentTarget.style.borderColor = '#e5e7eb'
                    e.currentTarget.style.boxShadow = 'none'
                  }}
                  placeholder="Ej: Los Campeones"
                />
              </div>

              <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '16px' }}>
                <div>
                  <label style={{ display: 'block', marginBottom: '6px', fontSize: '14px', fontWeight: 500, color: '#374151' }}>
                    Jugador 1 - Nombre
                  </label>
                  <input
                    type="text"
                    value={teamForm.player1Name}
                    onChange={(e) => setTeamForm({...teamForm, player1Name: e.target.value})}
                    style={{
                      width: '100%',
                      padding: '10px 12px',
                      borderRadius: '8px',
                      border: '1px solid #e5e7eb',
                      fontSize: '14px',
                      outline: 'none',
                      transition: 'all 0.2s'
                    }}
                    onFocus={(e) => {
                      e.currentTarget.style.borderColor = '#047857'
                      e.currentTarget.style.boxShadow = '0 0 0 3px rgba(4, 120, 87, 0.1)'
                    }}
                    onBlur={(e) => {
                      e.currentTarget.style.borderColor = '#e5e7eb'
                      e.currentTarget.style.boxShadow = 'none'
                    }}
                    placeholder="Nombre completo"
                  />
                </div>
                <div>
                  <label style={{ display: 'block', marginBottom: '6px', fontSize: '14px', fontWeight: 500, color: '#374151' }}>
                    Jugador 1 - Email
                  </label>
                  <input
                    type="email"
                    value={teamForm.player1Email}
                    onChange={(e) => setTeamForm({...teamForm, player1Email: e.target.value})}
                    style={{
                      width: '100%',
                      padding: '10px 12px',
                      borderRadius: '8px',
                      border: '1px solid #e5e7eb',
                      fontSize: '14px',
                      outline: 'none',
                      transition: 'all 0.2s'
                    }}
                    onFocus={(e) => {
                      e.currentTarget.style.borderColor = '#047857'
                      e.currentTarget.style.boxShadow = '0 0 0 3px rgba(4, 120, 87, 0.1)'
                    }}
                    onBlur={(e) => {
                      e.currentTarget.style.borderColor = '#e5e7eb'
                      e.currentTarget.style.boxShadow = 'none'
                    }}
                    placeholder="email@ejemplo.com"
                  />
                </div>
              </div>

              <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '16px' }}>
                <div>
                  <label style={{ display: 'block', marginBottom: '6px', fontSize: '14px', fontWeight: 500, color: '#374151' }}>
                    Jugador 2 - Nombre
                  </label>
                  <input
                    type="text"
                    value={teamForm.player2Name}
                    onChange={(e) => setTeamForm({...teamForm, player2Name: e.target.value})}
                    style={{
                      width: '100%',
                      padding: '10px 12px',
                      borderRadius: '8px',
                      border: '1px solid #e5e7eb',
                      fontSize: '14px',
                      outline: 'none',
                      transition: 'all 0.2s'
                    }}
                    onFocus={(e) => {
                      e.currentTarget.style.borderColor = '#047857'
                      e.currentTarget.style.boxShadow = '0 0 0 3px rgba(4, 120, 87, 0.1)'
                    }}
                    onBlur={(e) => {
                      e.currentTarget.style.borderColor = '#e5e7eb'
                      e.currentTarget.style.boxShadow = 'none'
                    }}
                    placeholder="Nombre completo"
                  />
                </div>
                <div>
                  <label style={{ display: 'block', marginBottom: '6px', fontSize: '14px', fontWeight: 500, color: '#374151' }}>
                    Jugador 2 - Email
                  </label>
                  <input
                    type="email"
                    value={teamForm.player2Email}
                    onChange={(e) => setTeamForm({...teamForm, player2Email: e.target.value})}
                    style={{
                      width: '100%',
                      padding: '10px 12px',
                      borderRadius: '8px',
                      border: '1px solid #e5e7eb',
                      fontSize: '14px',
                      outline: 'none',
                      transition: 'all 0.2s'
                    }}
                    onFocus={(e) => {
                      e.currentTarget.style.borderColor = '#047857'
                      e.currentTarget.style.boxShadow = '0 0 0 3px rgba(4, 120, 87, 0.1)'
                    }}
                    onBlur={(e) => {
                      e.currentTarget.style.borderColor = '#e5e7eb'
                      e.currentTarget.style.boxShadow = 'none'
                    }}
                    placeholder="email@ejemplo.com"
                  />
                </div>
              </div>

              <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '16px' }}>
                <div>
                  <label style={{ display: 'block', marginBottom: '6px', fontSize: '14px', fontWeight: 500, color: '#374151' }}>
                    Categoría
                  </label>
                  <select
                    value={teamForm.category}
                    onChange={(e) => setTeamForm({...teamForm, category: e.target.value})}
                    style={{
                      width: '100%',
                      padding: '10px 12px',
                      borderRadius: '8px',
                      border: '1px solid #e5e7eb',
                      fontSize: '14px',
                      outline: 'none',
                      transition: 'all 0.2s',
                      cursor: 'pointer',
                      background: 'white'
                    }}
                    onFocus={(e) => {
                      e.currentTarget.style.borderColor = '#047857'
                      e.currentTarget.style.boxShadow = '0 0 0 3px rgba(4, 120, 87, 0.1)'
                    }}
                    onBlur={(e) => {
                      e.currentTarget.style.borderColor = '#e5e7eb'
                      e.currentTarget.style.boxShadow = 'none'
                    }}
                  >
                    <option value="">Seleccionar categoría</option>
                    <option value="1M">Primera Masculino</option>
                    <option value="2M">Segunda Masculino</option>
                    <option value="3M">Tercera Masculino</option>
                    <option value="4M">Cuarta Masculino</option>
                    <option value="5M">Quinta Masculino</option>
                    <option value="1F">Primera Femenino</option>
                    <option value="2F">Segunda Femenino</option>
                    <option value="3F">Tercera Femenino</option>
                    <option value="MX">Mixto</option>
                  </select>
                </div>
                <div>
                  <label style={{ display: 'block', marginBottom: '6px', fontSize: '14px', fontWeight: 500, color: '#374151' }}>
                    Estado de Pago
                  </label>
                  <select
                    value={teamForm.paymentStatus}
                    onChange={(e) => setTeamForm({...teamForm, paymentStatus: e.target.value})}
                    style={{
                      width: '100%',
                      padding: '10px 12px',
                      borderRadius: '8px',
                      border: '1px solid #e5e7eb',
                      fontSize: '14px',
                      outline: 'none',
                      transition: 'all 0.2s',
                      cursor: 'pointer',
                      background: 'white'
                    }}
                    onFocus={(e) => {
                      e.currentTarget.style.borderColor = '#047857'
                      e.currentTarget.style.boxShadow = '0 0 0 3px rgba(4, 120, 87, 0.1)'
                    }}
                    onBlur={(e) => {
                      e.currentTarget.style.borderColor = '#e5e7eb'
                      e.currentTarget.style.boxShadow = 'none'
                    }}
                  >
                    <option value="pending">Pendiente</option>
                    <option value="completed">Pagado</option>
                  </select>
                </div>
              </div>
            </div>
          </Modal>

          {/* Modal para editar equipo */}
          <Modal
            open={showEditTeamModal}
            onClose={() => setShowEditTeamModal(false)}
            title="Editar Equipo"
            size="lg"
            footer={
              <>
                <button
                  onClick={() => setShowEditTeamModal(false)}
                  style={{
                    padding: '10px 20px',
                    borderRadius: '8px',
                    border: '1px solid #e5e7eb',
                    background: 'white',
                    color: '#374151',
                    fontSize: '14px',
                    fontWeight: 500,
                    cursor: 'pointer',
                    transition: 'all 0.2s'
                  }}
                  onMouseEnter={(e) => {
                    e.currentTarget.style.background = '#f9fafb'
                  }}
                  onMouseLeave={(e) => {
                    e.currentTarget.style.background = 'white'
                  }}
                >
                  Cancelar
                </button>
                <button
                  onClick={handleUpdateTeam}
                  disabled={savingTeam}
                  style={{
                    padding: '10px 20px',
                    borderRadius: '8px',
                    background: savingTeam ? '#9ca3af' : '#047857',
                    color: 'white',
                    fontSize: '14px',
                    fontWeight: 500,
                    cursor: savingTeam ? 'not-allowed' : 'pointer',
                    transition: 'all 0.2s',
                    border: 'none',
                    display: 'flex',
                    alignItems: 'center',
                    gap: '8px'
                  }}
                  onMouseEnter={(e) => {
                    if (!savingTeam) {
                      e.currentTarget.style.background = '#059669'
                    }
                  }}
                  onMouseLeave={(e) => {
                    if (!savingTeam) {
                      e.currentTarget.style.background = '#047857'
                    }
                  }}
                >
                  {savingTeam && <Loader2 size={16} style={{ animation: 'spin 1s linear infinite' }} />}
                  {savingTeam ? 'Actualizando...' : 'Actualizar Equipo'}
                </button>
              </>
            }
          >
            <div style={{ display: 'flex', flexDirection: 'column', gap: '20px' }}>
              <div>
                <label style={{ display: 'block', marginBottom: '6px', fontSize: '14px', fontWeight: 500, color: '#374151' }}>
                  Nombre del Equipo
                </label>
                <input
                  type="text"
                  value={teamForm.teamName}
                  onChange={(e) => setTeamForm({...teamForm, teamName: e.target.value})}
                  style={{
                    width: '100%',
                    padding: '10px 12px',
                    borderRadius: '8px',
                    border: '1px solid #e5e7eb',
                    fontSize: '14px',
                    outline: 'none',
                    transition: 'all 0.2s'
                  }}
                  onFocus={(e) => {
                    e.currentTarget.style.borderColor = '#047857'
                    e.currentTarget.style.boxShadow = '0 0 0 3px rgba(4, 120, 87, 0.1)'
                  }}
                  onBlur={(e) => {
                    e.currentTarget.style.borderColor = '#e5e7eb'
                    e.currentTarget.style.boxShadow = 'none'
                  }}
                  placeholder="Ej: Los Campeones"
                />
              </div>

              <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '16px' }}>
                <div>
                  <label style={{ display: 'block', marginBottom: '6px', fontSize: '14px', fontWeight: 500, color: '#374151' }}>
                    Jugador 1 - Nombre
                  </label>
                  <input
                    type="text"
                    value={teamForm.player1Name}
                    onChange={(e) => setTeamForm({...teamForm, player1Name: e.target.value})}
                    style={{
                      width: '100%',
                      padding: '10px 12px',
                      borderRadius: '8px',
                      border: '1px solid #e5e7eb',
                      fontSize: '14px',
                      outline: 'none',
                      transition: 'all 0.2s'
                    }}
                    onFocus={(e) => {
                      e.currentTarget.style.borderColor = '#047857'
                      e.currentTarget.style.boxShadow = '0 0 0 3px rgba(4, 120, 87, 0.1)'
                    }}
                    onBlur={(e) => {
                      e.currentTarget.style.borderColor = '#e5e7eb'
                      e.currentTarget.style.boxShadow = 'none'
                    }}
                    placeholder="Nombre completo"
                  />
                </div>
                <div>
                  <label style={{ display: 'block', marginBottom: '6px', fontSize: '14px', fontWeight: 500, color: '#374151' }}>
                    Jugador 1 - Email
                  </label>
                  <input
                    type="email"
                    value={teamForm.player1Email}
                    onChange={(e) => setTeamForm({...teamForm, player1Email: e.target.value})}
                    style={{
                      width: '100%',
                      padding: '10px 12px',
                      borderRadius: '8px',
                      border: '1px solid #e5e7eb',
                      fontSize: '14px',
                      outline: 'none',
                      transition: 'all 0.2s'
                    }}
                    onFocus={(e) => {
                      e.currentTarget.style.borderColor = '#047857'
                      e.currentTarget.style.boxShadow = '0 0 0 3px rgba(4, 120, 87, 0.1)'
                    }}
                    onBlur={(e) => {
                      e.currentTarget.style.borderColor = '#e5e7eb'
                      e.currentTarget.style.boxShadow = 'none'
                    }}
                    placeholder="email@ejemplo.com"
                  />
                </div>
              </div>

              <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '16px' }}>
                <div>
                  <label style={{ display: 'block', marginBottom: '6px', fontSize: '14px', fontWeight: 500, color: '#374151' }}>
                    Jugador 2 - Nombre
                  </label>
                  <input
                    type="text"
                    value={teamForm.player2Name}
                    onChange={(e) => setTeamForm({...teamForm, player2Name: e.target.value})}
                    style={{
                      width: '100%',
                      padding: '10px 12px',
                      borderRadius: '8px',
                      border: '1px solid #e5e7eb',
                      fontSize: '14px',
                      outline: 'none',
                      transition: 'all 0.2s'
                    }}
                    onFocus={(e) => {
                      e.currentTarget.style.borderColor = '#047857'
                      e.currentTarget.style.boxShadow = '0 0 0 3px rgba(4, 120, 87, 0.1)'
                    }}
                    onBlur={(e) => {
                      e.currentTarget.style.borderColor = '#e5e7eb'
                      e.currentTarget.style.boxShadow = 'none'
                    }}
                    placeholder="Nombre completo"
                  />
                </div>
                <div>
                  <label style={{ display: 'block', marginBottom: '6px', fontSize: '14px', fontWeight: 500, color: '#374151' }}>
                    Jugador 2 - Email
                  </label>
                  <input
                    type="email"
                    value={teamForm.player2Email}
                    onChange={(e) => setTeamForm({...teamForm, player2Email: e.target.value})}
                    style={{
                      width: '100%',
                      padding: '10px 12px',
                      borderRadius: '8px',
                      border: '1px solid #e5e7eb',
                      fontSize: '14px',
                      outline: 'none',
                      transition: 'all 0.2s'
                    }}
                    onFocus={(e) => {
                      e.currentTarget.style.borderColor = '#047857'
                      e.currentTarget.style.boxShadow = '0 0 0 3px rgba(4, 120, 87, 0.1)'
                    }}
                    onBlur={(e) => {
                      e.currentTarget.style.borderColor = '#e5e7eb'
                      e.currentTarget.style.boxShadow = 'none'
                    }}
                    placeholder="email@ejemplo.com"
                  />
                </div>
              </div>

              <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '16px' }}>
                <div>
                  <label style={{ display: 'block', marginBottom: '6px', fontSize: '14px', fontWeight: 500, color: '#374151' }}>
                    Categoría
                  </label>
                  <select
                    value={teamForm.category}
                    onChange={(e) => setTeamForm({...teamForm, category: e.target.value})}
                    style={{
                      width: '100%',
                      padding: '10px 12px',
                      borderRadius: '8px',
                      border: '1px solid #e5e7eb',
                      fontSize: '14px',
                      outline: 'none',
                      transition: 'all 0.2s',
                      cursor: 'pointer',
                      background: 'white'
                    }}
                    onFocus={(e) => {
                      e.currentTarget.style.borderColor = '#047857'
                      e.currentTarget.style.boxShadow = '0 0 0 3px rgba(4, 120, 87, 0.1)'
                    }}
                    onBlur={(e) => {
                      e.currentTarget.style.borderColor = '#e5e7eb'
                      e.currentTarget.style.boxShadow = 'none'
                    }}
                  >
                    <option value="">Seleccionar categoría</option>
                    <option value="1M">Primera Masculino</option>
                    <option value="2M">Segunda Masculino</option>
                    <option value="3M">Tercera Masculino</option>
                    <option value="4M">Cuarta Masculino</option>
                    <option value="5M">Quinta Masculino</option>
                    <option value="1F">Primera Femenino</option>
                    <option value="2F">Segunda Femenino</option>
                    <option value="3F">Tercera Femenino</option>
                    <option value="MX">Mixto</option>
                  </select>
                </div>
                <div>
                  <label style={{ display: 'block', marginBottom: '6px', fontSize: '14px', fontWeight: 500, color: '#374151' }}>
                    Estado de Pago
                  </label>
                  <select
                    value={teamForm.paymentStatus}
                    onChange={(e) => setTeamForm({...teamForm, paymentStatus: e.target.value})}
                    style={{
                      width: '100%',
                      padding: '10px 12px',
                      borderRadius: '8px',
                      border: '1px solid #e5e7eb',
                      fontSize: '14px',
                      outline: 'none',
                      transition: 'all 0.2s',
                      cursor: 'pointer',
                      background: 'white'
                    }}
                    onFocus={(e) => {
                      e.currentTarget.style.borderColor = '#047857'
                      e.currentTarget.style.boxShadow = '0 0 0 3px rgba(4, 120, 87, 0.1)'
                    }}
                    onBlur={(e) => {
                      e.currentTarget.style.borderColor = '#e5e7eb'
                      e.currentTarget.style.boxShadow = 'none'
                    }}
                  >
                    <option value="pending">Pendiente</option>
                    <option value="completed">Pagado</option>
                  </select>
                </div>
              </div>
            </div>
          </Modal>
          </div>
        )}

        {/* Modo TV */}
        {activeView === 'tv' && (
          <div style={{ marginTop: '24px' }}>
            <CardModern variant="glow" padding="lg">
              <CardModernHeader>
                <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
                  <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>
                    <div style={{
                      width: '36px',
                      height: '36px',
                      borderRadius: '10px',
                      background: `linear-gradient(135deg, ${colors.primary[600]}15, ${colors.accent[300]}15)`,
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center'
                    }}>
                      <Tv2 size={20} style={{ color: colors.primary[600] }} />
                    </div>
                    <div>
                      <CardModernTitle>Modo TV - Visualización Pública</CardModernTitle>
                      <CardModernDescription>
                        Vista optimizada para pantallas grandes en el club
                      </CardModernDescription>
                    </div>
                  </div>
                  <button 
                    onClick={() => {
                      if (document.documentElement.requestFullscreen) {
                        document.documentElement.requestFullscreen()
                      }
                    }}
                    style={{
                      padding: '8px 16px',
                      borderRadius: '8px',
                      background: `linear-gradient(135deg, ${colors.primary[600]}, ${colors.accent[300]})`,
                      color: 'white',
                      border: 'none',
                      fontSize: '13px',
                      fontWeight: 500,
                      cursor: 'pointer',
                      display: 'flex',
                      alignItems: 'center',
                      gap: '6px'
                    }}
                  >
                    <Tv2 size={16} />
                    Pantalla completa
                  </button>
                </div>
              </CardModernHeader>

              <CardModernContent>
                {/* Partidos en juego */}
                {tournamentData.matches.inProgress.length > 0 && (
                  <div style={{
                    padding: '24px',
                    borderRadius: '16px',
                    background: `linear-gradient(135deg, ${colors.accent[600]}10, ${colors.accent[300]}10)`,
                    border: `1px solid ${colors.accent[600]}30`,
                    marginBottom: '24px'
                  }}>
                    <h3 style={{ 
                      fontSize: '20px',
                      fontWeight: 600,
                      color: colors.text.primary,
                      marginBottom: '20px',
                      display: 'flex',
                      alignItems: 'center',
                      gap: '8px'
                    }}>
                      <div style={{
                        width: '12px',
                        height: '12px',
                        borderRadius: '50%',
                        background: colors.accent[600],
                        animation: 'pulse 2s infinite'
                      }} />
                      EN JUEGO AHORA
                    </h3>
                    
                    <div style={{ 
                      display: 'grid',
                      gridTemplateColumns: 'repeat(auto-fit, minmax(400px, 1fr))',
                      gap: '20px'
                    }}>
                      {tournamentData.matches.inProgress.map(match => (
                        <div key={match.id} style={{
                          padding: '20px',
                          borderRadius: '12px',
                          background: 'white',
                          border: `1px solid ${colors.border.light}`
                        }}>
                          <div style={{ 
                            display: 'flex',
                            justifyContent: 'space-between',
                            alignItems: 'center',
                            marginBottom: '16px'
                          }}>
                            <span style={{
                              fontSize: '14px',
                              padding: '6px 12px',
                              borderRadius: '8px',
                              background: `linear-gradient(135deg, ${colors.primary[600]}, ${colors.accent[300]})`,
                              color: 'white',
                              fontWeight: 500
                            }}>
                              CANCHA {match.courtNumber}
                            </span>
                            <span style={{
                              fontSize: '14px',
                              color: colors.text.secondary
                            }}>
                              {match.startTime ? 
                                `${Math.floor((Date.now() - new Date(match.startTime).getTime()) / 60000)} minutos` :
                                'En juego'}
                            </span>
                          </div>
                          
                          <div style={{ textAlign: 'center', marginBottom: '16px' }}>
                            <p style={{ 
                              fontSize: '18px',
                              fontWeight: 600,
                              color: colors.text.primary,
                              marginBottom: '8px'
                            }}>
                              {match.team1Name}
                            </p>
                            <div style={{
                              fontSize: '32px',
                              fontWeight: 700,
                              color: colors.primary[600],
                              margin: '12px 0'
                            }}>
                              {match.team1Score || '0-0'} | {match.team2Score || '0-0'}
                            </div>
                            <p style={{ 
                              fontSize: '18px',
                              fontWeight: 600,
                              color: colors.text.primary
                            }}>
                              {match.team2Name}
                            </p>
                          </div>
                          
                          <div style={{
                            padding: '8px',
                            borderRadius: '8px',
                            background: colors.neutral[50],
                            textAlign: 'center',
                            fontSize: '12px',
                            color: colors.text.secondary
                          }}>
                            {match.round}
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                {/* Próximos partidos */}
                <div style={{
                  padding: '20px',
                  borderRadius: '12px',
                  background: 'rgba(255, 255, 255, 0.7)',
                  backdropFilter: 'blur(10px)',
                  border: `1px solid ${colors.border.light}`
                }}>
                  <h4 style={{ 
                    fontSize: '18px',
                    fontWeight: 600,
                    color: colors.text.primary,
                    marginBottom: '16px'
                  }}>
                    PRÓXIMOS PARTIDOS
                  </h4>
                  
                  <div style={{ 
                    display: 'grid',
                    gridTemplateColumns: 'repeat(auto-fill, minmax(300px, 1fr))',
                    gap: '12px'
                  }}>
                    {tournamentData.matches.upcoming.slice(0, 6).map(next => (
                      <div key={next.id} style={{
                        padding: '12px',
                        borderRadius: '8px',
                        background: 'white',
                        border: `1px solid ${colors.border.light}`
                      }}>
                        <div style={{ 
                          display: 'flex',
                          justifyContent: 'space-between',
                          marginBottom: '8px'
                        }}>
                          <span style={{
                            fontSize: '11px',
                            fontWeight: 500,
                            color: colors.warning[600]
                          }}>
                            {next.scheduledAt ? 
                              new Date(next.scheduledAt).toLocaleTimeString('es-MX', {
                                hour: '2-digit',
                                minute: '2-digit'
                              }) : 'Por definir'}
                          </span>
                          <span style={{
                            fontSize: '11px',
                            color: colors.text.secondary
                          }}>
                            Cancha {next.courtNumber || '?'}
                          </span>
                        </div>
                        <p style={{ 
                          fontSize: '13px',
                          fontWeight: 500,
                          color: colors.text.primary,
                          marginBottom: '4px'
                        }}>
                          {next.team1Name} vs {next.team2Name}
                        </p>
                        <p style={{ 
                          fontSize: '11px',
                          color: colors.text.secondary
                        }}>
                          {next.round}
                        </p>
                      </div>
                    ))}
                  </div>
                </div>
              </CardModernContent>
            </CardModern>
          </div>
        )}

        {/* Vista de Detalle de Categoría */}
        {/* QR & Conflictos View */}
        {activeView === 'qr-conflicts' && (
          <div style={{ marginTop: '24px' }}>
            <div style={{
              background: 'white',
              borderRadius: '16px',
              padding: '24px',
              border: `1px solid ${colors.border.light}`,
              boxShadow: '0 2px 4px rgba(0,0,0,0.04)'
            }}>
              {/* Header */}
              <div style={{ marginBottom: '24px' }}>
                <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
                  <div>
                    <h2 style={{
                      fontSize: '24px',
                      fontWeight: 700,
                      color: colors.text.primary,
                      display: 'flex',
                      alignItems: 'center',
                      gap: '12px',
                      marginBottom: '8px'
                    }}>
                      <div style={{
                        width: '40px',
                        height: '40px',
                        borderRadius: '10px',
                        background: `linear-gradient(135deg, ${colors.primary[600]}15, ${colors.accent[300]}15)`,
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center'
                      }}>
                        <QrCode size={20} style={{ color: colors.primary[600] }} />
                      </div>
                      QR Codes y Gestión de Conflictos
                    </h2>
                    <p style={{ 
                      fontSize: '14px',
                      color: colors.text.secondary
                    }}>
                      Genera códigos QR para las canchas y resuelve conflictos de resultados
                    </p>
                  </div>
                </div>
              </div>
              
              {/* Content */}
              <div>
                {/* Tabs para QR y Conflictos */}
                <div style={{ 
                  display: 'flex', 
                  gap: '8px',
                  marginBottom: '24px',
                  borderBottom: `1px solid ${colors.border.light}`,
                  paddingBottom: '12px'
                }}>
                  <button
                    onClick={() => setQrConflictTab('qr')}
                    style={{
                      padding: '8px 16px',
                      borderRadius: '8px',
                      background: qrConflictTab === 'qr' ? colors.primary[600] : 'transparent',
                      color: qrConflictTab === 'qr' ? 'white' : colors.text.secondary,
                      border: 'none',
                      cursor: 'pointer',
                      fontSize: '14px',
                      fontWeight: 500,
                      transition: 'all 0.2s'
                    }}
                  >
                    <QrCode size={16} style={{ display: 'inline', marginRight: '6px' }} />
                    Códigos QR
                  </button>
                  <button
                    onClick={() => setQrConflictTab('conflicts')}
                    style={{
                      padding: '8px 16px',
                      borderRadius: '8px',
                      background: qrConflictTab === 'conflicts' ? colors.primary[600] : 'transparent',
                      color: qrConflictTab === 'conflicts' ? 'white' : colors.text.secondary,
                      border: 'none',
                      cursor: 'pointer',
                      fontSize: '14px',
                      fontWeight: 500,
                      transition: 'all 0.2s',
                      position: 'relative'
                    }}
                  >
                    <AlertTriangle size={16} style={{ display: 'inline', marginRight: '6px' }} />
                    Conflictos
                    {conflictsCount > 0 && (
                      <span style={{
                        position: 'absolute',
                        top: '-4px',
                        right: '-4px',
                        background: colors.danger[600],
                        color: 'white',
                        borderRadius: '50%',
                        width: '20px',
                        height: '20px',
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                        fontSize: '11px',
                        fontWeight: 600
                      }}>
                        {conflictsCount}
                      </span>
                    )}
                  </button>
                  <button
                    onClick={() => setQrConflictTab('pending')}
                    style={{
                      padding: '8px 16px',
                      borderRadius: '8px',
                      background: qrConflictTab === 'pending' ? colors.primary[600] : 'transparent',
                      color: qrConflictTab === 'pending' ? 'white' : colors.text.secondary,
                      border: 'none',
                      cursor: 'pointer',
                      fontSize: '14px',
                      fontWeight: 500,
                      transition: 'all 0.2s'
                    }}
                  >
                    <Clock size={16} style={{ display: 'inline', marginRight: '6px' }} />
                    Sin Reportar
                  </button>
                </div>

                {/* Contenido de QR Codes */}
                {qrConflictTab === 'qr' && (
                  <div>
                    <div style={{ 
                      background: colors.background.secondary,
                      borderRadius: '12px',
                      padding: '20px',
                      marginBottom: '24px',
                      border: `1px solid ${colors.border.light}`
                    }}>
                      <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
                        <div style={{ flex: 1 }}>
                          <p style={{ fontSize: '14px', color: colors.text.primary, fontWeight: 500, marginBottom: '4px' }}>
                            Sistema de Reportes QR
                          </p>
                          <p style={{ fontSize: '13px', color: colors.text.secondary }}>
                            Los jugadores pueden escanear el código en cada cancha para reportar resultados
                          </p>
                        </div>
                        <button
                          onClick={generateQRCodes}
                          disabled={qrGenerating}
                          style={{
                            padding: '10px 20px',
                            borderRadius: '8px',
                            background: colors.accent[400],
                            color: 'white',
                            border: 'none',
                            cursor: qrGenerating ? 'not-allowed' : 'pointer',
                            fontSize: '14px',
                            fontWeight: 600,
                            display: 'flex',
                            alignItems: 'center',
                            gap: '8px',
                            opacity: qrGenerating ? 0.6 : 1,
                            transition: 'all 0.2s'
                          }}
                          onMouseEnter={(e) => {
                            if (!qrGenerating) {
                              e.currentTarget.style.transform = 'translateY(-1px)'
                              e.currentTarget.style.boxShadow = '0 4px 12px rgba(0,0,0,0.1)'
                            }
                          }}
                          onMouseLeave={(e) => {
                            e.currentTarget.style.transform = 'translateY(0)'
                            e.currentTarget.style.boxShadow = 'none'
                          }}
                        >
                          {qrGenerating ? (
                            <Loader2 size={16} className="animate-spin" />
                          ) : (
                            <Download size={16} />
                          )}
                          {qrGenerating ? 'Generando...' : 'Actualizar QR Codes'}
                        </button>
                      </div>
                    </div>

                    {/* Lista de QR Codes */}
                    <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fill, minmax(280px, 1fr))', gap: '20px' }}>
                      {qrCodes.map((qr: any) => (
                        <div key={qr.id} style={{
                          background: 'white',
                          border: `1px solid ${colors.border.light}`,
                          borderRadius: '12px',
                          padding: '20px',
                          textAlign: 'center',
                          transition: 'all 0.2s',
                          cursor: 'default'
                        }}
                        onMouseEnter={(e) => {
                          e.currentTarget.style.transform = 'translateY(-2px)'
                          e.currentTarget.style.boxShadow = '0 8px 20px rgba(0,0,0,0.08)'
                          e.currentTarget.style.borderColor = colors.accent[300]
                        }}
                        onMouseLeave={(e) => {
                          e.currentTarget.style.transform = 'translateY(0)'
                          e.currentTarget.style.boxShadow = 'none'
                          e.currentTarget.style.borderColor = colors.border.light
                        }}>
                          <div style={{
                            display: 'flex',
                            alignItems: 'center',
                            justifyContent: 'center',
                            gap: '8px',
                            marginBottom: '16px'
                          }}>
                            <div style={{
                              width: '32px',
                              height: '32px',
                              borderRadius: '8px',
                              background: colors.accent[300] + '20',
                              display: 'flex',
                              alignItems: 'center',
                              justifyContent: 'center'
                            }}>
                              <MapPin size={16} style={{ color: colors.accent[600] }} />
                            </div>
                            <h4 style={{ 
                              fontSize: '16px', 
                              fontWeight: 600, 
                              color: colors.text.primary,
                              margin: 0
                            }}>
                              {qr.Court?.name || `Cancha ${qr.courtNumber}`}
                            </h4>
                          </div>
                          
                          <div style={{ 
                            background: colors.background.secondary,
                            borderRadius: '10px',
                            padding: '16px',
                            marginBottom: '16px',
                            border: `1px solid ${colors.border.light}`
                          }}>
                            <div id={`qr-${qr.id}`} style={{ display: 'inline-block' }}></div>
                          </div>
                          
                          <div style={{ display: 'flex', gap: '10px', justifyContent: 'center' }}>
                            <button
                              onClick={() => window.open(qr.accessUrl, '_blank')}
                              style={{
                                padding: '8px 16px',
                                borderRadius: '8px',
                                border: `1px solid ${colors.accent[400]}`,
                                background: colors.accent[400] + '10',
                                color: colors.accent[600],
                                fontSize: '13px',
                                fontWeight: 500,
                                cursor: 'pointer',
                                display: 'flex',
                                alignItems: 'center',
                                gap: '6px',
                                transition: 'all 0.2s'
                              }}
                              onMouseEnter={(e) => {
                                e.currentTarget.style.background = colors.accent[400]
                                e.currentTarget.style.color = 'white'
                                e.currentTarget.style.transform = 'translateY(-1px)'
                              }}
                              onMouseLeave={(e) => {
                                e.currentTarget.style.background = colors.accent[400] + '10'
                                e.currentTarget.style.color = colors.accent[600]
                                e.currentTarget.style.transform = 'translateY(0)'
                              }}
                            >
                              <Eye size={14} />
                              Probar
                            </button>
                            <button
                              onClick={() => printQRCode(qr)}
                              style={{
                                padding: '8px 16px',
                                borderRadius: '8px',
                                border: `1px solid ${colors.primary[600]}`,
                                background: colors.primary[600] + '10',
                                color: colors.primary[600],
                                fontSize: '13px',
                                fontWeight: 500,
                                cursor: 'pointer',
                                display: 'flex',
                                alignItems: 'center',
                                gap: '6px',
                                transition: 'all 0.2s'
                              }}
                              onMouseEnter={(e) => {
                                e.currentTarget.style.background = colors.primary[600]
                                e.currentTarget.style.color = 'white'
                                e.currentTarget.style.transform = 'translateY(-1px)'
                              }}
                              onMouseLeave={(e) => {
                                e.currentTarget.style.background = colors.primary[600] + '10'
                                e.currentTarget.style.color = colors.primary[600]
                                e.currentTarget.style.transform = 'translateY(0)'
                              }}
                            >
                              <Printer size={14} />
                              Imprimir
                            </button>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                {/* Contenido de Conflictos */}
                {qrConflictTab === 'conflicts' && (
                  <div>
                    {conflicts.length > 0 ? (
                      <div style={{ display: 'flex', flexDirection: 'column', gap: '16px' }}>
                        {conflicts.map((conflict: any) => (
                          <div key={conflict.matchId} style={{
                            background: 'white',
                            border: `1px solid ${colors.warning[300]}`,
                            borderRadius: '12px',
                            padding: '16px'
                          }}>
                            <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', marginBottom: '12px' }}>
                              <h4 style={{ fontSize: '16px', fontWeight: 600, color: colors.text.primary }}>
                                {conflict.match.round} - Cancha {conflict.match.courtNumber}
                              </h4>
                              <span style={{
                                padding: '4px 8px',
                                borderRadius: '6px',
                                background: colors.warning[100],
                                color: colors.warning[700],
                                fontSize: '12px',
                                fontWeight: 500
                              }}>
                                Conflicto
                              </span>
                            </div>
                            
                            <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '16px', marginBottom: '16px' }}>
                              {/* Resultado Team 1 */}
                              <div style={{
                                padding: '12px',
                                borderRadius: '8px',
                                background: colors.neutral[50]
                              }}>
                                <p style={{ fontSize: '12px', color: colors.text.secondary, marginBottom: '8px' }}>
                                  Reportado por: {conflict.team1Result.submittedBy === 'team1' ? conflict.match.team1Name : conflict.match.team2Name}
                                </p>
                                <p style={{ fontSize: '14px', fontWeight: 600, color: colors.text.primary }}>
                                  {conflict.team1Result.team1TotalSets} - {conflict.team1Result.team2TotalSets}
                                </p>
                              </div>
                              
                              {/* Resultado Team 2 */}
                              <div style={{
                                padding: '12px',
                                borderRadius: '8px',
                                background: colors.neutral[50]
                              }}>
                                <p style={{ fontSize: '12px', color: colors.text.secondary, marginBottom: '8px' }}>
                                  Reportado por: {conflict.team2Result.submittedBy === 'team1' ? conflict.match.team1Name : conflict.match.team2Name}
                                </p>
                                <p style={{ fontSize: '14px', fontWeight: 600, color: colors.text.primary }}>
                                  {conflict.team2Result.team1TotalSets} - {conflict.team2Result.team2TotalSets}
                                </p>
                              </div>
                            </div>
                            
                            <div style={{ display: 'flex', gap: '8px' }}>
                              <button
                                onClick={() => resolveConflict(conflict.matchId, conflict.team1Result)}
                                style={{
                                  flex: 1,
                                  padding: '8px 16px',
                                  borderRadius: '8px',
                                  background: colors.primary[600],
                                  color: 'white',
                                  border: 'none',
                                  cursor: 'pointer',
                                  fontSize: '14px',
                                  fontWeight: 500
                                }}
                              >
                                <CheckSquare size={14} style={{ display: 'inline', marginRight: '6px' }} />
                                Usar Resultado 1
                              </button>
                              <button
                                onClick={() => resolveConflict(conflict.matchId, conflict.team2Result)}
                                style={{
                                  flex: 1,
                                  padding: '8px 16px',
                                  borderRadius: '8px',
                                  background: colors.primary[600],
                                  color: 'white',
                                  border: 'none',
                                  cursor: 'pointer',
                                  fontSize: '14px',
                                  fontWeight: 500
                                }}
                              >
                                <CheckSquare size={14} style={{ display: 'inline', marginRight: '6px' }} />
                                Usar Resultado 2
                              </button>
                            </div>
                          </div>
                        ))}
                      </div>
                    ) : (
                      <div style={{
                        textAlign: 'center',
                        padding: '48px',
                        background: colors.neutral[50],
                        borderRadius: '12px'
                      }}>
                        <CheckCircle size={48} style={{ color: colors.success[600], marginBottom: '16px' }} />
                        <p style={{ fontSize: '16px', fontWeight: 500, color: colors.text.primary }}>
                          No hay conflictos pendientes
                        </p>
                        <p style={{ fontSize: '14px', color: colors.text.secondary, marginTop: '8px' }}>
                          Todos los resultados coinciden
                        </p>
                      </div>
                    )}
                  </div>
                )}

                {/* Partidos sin reportar */}
                {qrConflictTab === 'pending' && (
                  <div>
                    {pendingResults.length > 0 ? (
                      <div style={{ display: 'flex', flexDirection: 'column', gap: '12px' }}>
                        {pendingResults.map((match: any) => (
                          <div key={match.id} style={{
                            background: 'white',
                            border: `1px solid ${colors.border.light}`,
                            borderRadius: '8px',
                            padding: '12px',
                            display: 'flex',
                            alignItems: 'center',
                            justifyContent: 'space-between'
                          }}>
                            <div>
                              <p style={{ fontSize: '14px', fontWeight: 600, color: colors.text.primary }}>
                                {match.team1Name} vs {match.team2Name}
                              </p>
                              <p style={{ fontSize: '12px', color: colors.text.secondary }}>
                                {match.round} • Cancha {match.courtNumber} • {formatTime(match.scheduledAt)}
                              </p>
                            </div>
                            <span style={{
                              padding: '4px 8px',
                              borderRadius: '6px',
                              background: colors.warning[100],
                              color: colors.warning[700],
                              fontSize: '12px',
                              fontWeight: 500
                            }}>
                              Sin reportar
                            </span>
                          </div>
                        ))}
                      </div>
                    ) : (
                      <div style={{
                        textAlign: 'center',
                        padding: '48px',
                        background: colors.neutral[50],
                        borderRadius: '12px'
                      }}>
                        <Trophy size={48} style={{ color: colors.success[600], marginBottom: '16px' }} />
                        <p style={{ fontSize: '16px', fontWeight: 500, color: colors.text.primary }}>
                          Todos los partidos reportados
                        </p>
                      </div>
                    )}
                  </div>
                )}
              </div>
            </div>
          </div>
        )}

        {activeView === 'category-detail' && selectedCategory && (
          <div style={{ marginTop: '24px' }}>
            <CardModern variant="subtle" padding="lg" style={{
              boxShadow: '0 2px 8px rgba(0,0,0,0.04), 0 1px 3px rgba(0,0,0,0.06)'
            }}>
              <CardModernHeader>
                <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
                  <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>
                    <button
                      onClick={() => setActiveView('overview')}
                      style={{
                        width: '36px',
                        height: '36px',
                        borderRadius: '10px',
                        background: colors.neutral[100],
                        border: `1px solid ${colors.border.light}`,
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                        cursor: 'pointer',
                        transition: 'all 0.2s'
                      }}
                      onMouseEnter={(e) => {
                        e.currentTarget.style.background = colors.neutral[200]
                      }}
                      onMouseLeave={(e) => {
                        e.currentTarget.style.background = colors.neutral[100]
                      }}
                    >
                      <ChevronLeft size={20} style={{ color: colors.text.primary }} />
                    </button>
                    <div>
                      <CardModernTitle>
                        {(() => {
                          const [code, modality] = selectedCategory.split('-')
                          const category = tournamentData?.categories.find(
                            cat => cat.code === code && cat.modality === modality
                          )
                          return category ? `${category.name} - ${modality === 'M' ? 'Masculino' : modality === 'F' ? 'Femenino' : 'Mixto'}` : 'Categoría'
                        })()}
                      </CardModernTitle>
                      <CardModernDescription>
                        Bracket, partidos y estadísticas de la categoría
                      </CardModernDescription>
                    </div>
                  </div>
                  <div style={{ display: 'flex', gap: '8px' }}>
                    <button
                      style={{
                        padding: '8px 16px',
                        borderRadius: '8px',
                        background: colors.primary[600],
                        color: 'white',
                        border: 'none',
                        fontSize: '13px',
                        fontWeight: 500,
                        cursor: 'pointer',
                        display: 'flex',
                        alignItems: 'center',
                        gap: '6px',
                        transition: 'all 0.2s'
                      }}
                      onMouseEnter={(e) => {
                        e.currentTarget.style.background = colors.primary[700]
                      }}
                      onMouseLeave={(e) => {
                        e.currentTarget.style.background = colors.primary[600]
                      }}
                    >
                      <Trophy size={16} />
                      Ver Bracket
                    </button>
                  </div>
                </div>
              </CardModernHeader>
              <CardModernContent>
                {/* Contenido del detalle de categoría */}
                <div style={{ padding: '20px' }}>
                  <div style={{
                    background: colors.neutral[100],
                    borderRadius: '12px',
                    padding: '24px',
                    marginBottom: '24px'
                  }}>
                    <h3 style={{ 
                      fontSize: '18px',
                      fontWeight: 600,
                      color: colors.text.primary,
                      marginBottom: '20px'
                    }}>
                      Información de la Categoría
                    </h3>
                    
                    {(() => {
                      const [code, modality] = selectedCategory.split('-')
                      const category = tournamentData?.categories.find(
                        cat => cat.code === code && cat.modality === modality
                      )
                      
                      if (!category) return <p>Categoría no encontrada</p>
                      
                      return (
                        <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: '20px' }}>
                          <div>
                            <p style={{ fontSize: '13px', color: colors.text.secondary, marginBottom: '4px' }}>
                              Equipos Inscritos
                            </p>
                            <p style={{ fontSize: '24px', fontWeight: 700, color: colors.text.primary }}>
                              {category.teams}
                            </p>
                          </div>
                          <div>
                            <p style={{ fontSize: '13px', color: colors.text.secondary, marginBottom: '4px' }}>
                              Partidos Totales
                            </p>
                            <p style={{ fontSize: '24px', fontWeight: 700, color: colors.text.primary }}>
                              {category.totalMatches}
                            </p>
                          </div>
                          <div>
                            <p style={{ fontSize: '13px', color: colors.text.secondary, marginBottom: '4px' }}>
                              Partidos Completados
                            </p>
                            <p style={{ fontSize: '24px', fontWeight: 700, color: colors.accent[600] }}>
                              {category.completedMatches}
                            </p>
                          </div>
                          <div>
                            <p style={{ fontSize: '13px', color: colors.text.secondary, marginBottom: '4px' }}>
                              Progreso
                            </p>
                            <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                              <div style={{
                                flex: 1,
                                height: '8px',
                                background: colors.neutral[200],
                                borderRadius: '4px',
                                overflow: 'hidden'
                              }}>
                                <div style={{
                                  width: `${category.totalMatches > 0 ? (category.completedMatches / category.totalMatches) * 100 : 0}%`,
                                  height: '100%',
                                  background: colors.accent[600],
                                  transition: 'width 0.3s'
                                }} />
                              </div>
                              <span style={{ fontSize: '14px', fontWeight: 600, color: colors.text.primary }}>
                                {category.totalMatches > 0 ? Math.round((category.completedMatches / category.totalMatches) * 100) : 0}%
                              </span>
                            </div>
                          </div>
                        </div>
                      )
                    })()}
                  </div>
                  
                  {/* Equipos de la Categoría */}
                  <div style={{
                    background: 'white',
                    borderRadius: '12px',
                    border: `1px solid ${colors.border.light}`,
                    padding: '24px',
                    marginBottom: '24px'
                  }}>
                    <h3 style={{
                      fontSize: '18px',
                      fontWeight: 600,
                      color: colors.text.primary,
                      marginBottom: '20px',
                      display: 'flex',
                      alignItems: 'center',
                      gap: '8px'
                    }}>
                      <Users size={20} style={{ color: colors.primary[600] }} />
                      Equipos Participantes
                    </h3>
                    
                    {(() => {
                      const [code, modality] = selectedCategory.split('-')
                      const categoryTeams = registrations?.filter((reg: any) => 
                        reg.category === code && reg.modality === modality
                      ) || []
                      
                      return (
                        <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fill, minmax(280px, 1fr))', gap: '16px' }}>
                          {categoryTeams.length > 0 ? categoryTeams.map((team: any, index: number) => (
                            <div key={team.id || index} style={{
                              padding: '16px',
                              background: colors.background.secondary,
                              borderRadius: '10px',
                              border: `1px solid ${colors.border.light}`
                            }}>
                              <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', marginBottom: '12px' }}>
                                <h4 style={{ fontSize: '16px', fontWeight: 600, color: colors.text.primary, margin: 0 }}>
                                  {team.teamName}
                                </h4>
                                <div style={{
                                  padding: '4px 8px',
                                  borderRadius: '6px',
                                  background: team.paymentStatus === 'paid' ? colors.accent[600] : colors.neutral[400],
                                  color: 'white',
                                  fontSize: '11px',
                                  fontWeight: 500
                                }}>
                                  {team.paymentStatus === 'paid' ? 'PAGADO' : 'PENDIENTE'}
                                </div>
                              </div>
                              <div style={{ fontSize: '14px', color: colors.text.secondary, marginBottom: '8px' }}>
                                <strong>{team.player1Name}</strong> / <strong>{team.player2Name}</strong>
                              </div>
                              <div style={{ display: 'flex', justifyContent: 'space-between', fontSize: '12px', color: colors.text.tertiary }}>
                                <span>Nivel: {team.teamLevel}</span>
                                <span>{team.checkedIn ? '✓ Check-in' : 'Sin check-in'}</span>
                              </div>
                            </div>
                          )) : (
                            <div style={{ 
                              gridColumn: '1 / -1',
                              textAlign: 'center',
                              padding: '40px',
                              color: colors.text.tertiary
                            }}>
                              <Users size={32} style={{ marginBottom: '12px', opacity: 0.5 }} />
                              <p>No hay equipos registrados en esta categoría</p>
                            </div>
                          )}
                        </div>
                      )
                    })()}
                  </div>
                  
                  {/* Partidos de la Categoría */}
                  <div style={{
                    background: 'white',
                    borderRadius: '12px',
                    border: `1px solid ${colors.border.light}`,
                    padding: '24px',
                    marginBottom: '24px'
                  }}>
                    <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', marginBottom: '20px' }}>
                      <h3 style={{
                        fontSize: '18px',
                        fontWeight: 600,
                        color: colors.text.primary,
                        margin: 0,
                        display: 'flex',
                        alignItems: 'center',
                        gap: '8px'
                      }}>
                        <Calendar size={20} style={{ color: colors.primary[600] }} />
                        Partidos de la Categoría
                      </h3>
                      
                      <select
                        style={{
                          padding: '8px 12px',
                          borderRadius: '8px',
                          border: `1px solid ${colors.border.light}`,
                          fontSize: '14px',
                          background: 'white'
                        }}
                      >
                        <option value="all">Todos los partidos</option>
                        <option value="scheduled">Programados</option>
                        <option value="in_progress">En juego</option>
                        <option value="completed">Completados</option>
                      </select>
                    </div>
                    
                    {/* Lista de partidos */}
                    <div style={{ display: 'flex', flexDirection: 'column', gap: '12px' }}>
                      {(() => {
                        const [code, modality] = selectedCategory.split('-')
                        
                        // Filtrar partidos reales por categoría
                        const allMatches = [
                          ...(tournamentData?.matches?.inProgress || []),
                          ...(tournamentData?.matches?.upcoming || [])
                        ]
                        
                        // Filtrar partidos que corresponden a esta categoría
                        const categoryTeams = registrations?.filter((reg: any) => 
                          reg.category === code && reg.modality === modality
                        ) || []
                        
                        const teamNames = categoryTeams.map(team => team.teamName)
                        
                        const categoryMatches = allMatches.filter((match: any) => {
                          // Filtrar partidos donde ambos equipos pertenecen a esta categoría
                          return teamNames.includes(match.team1Name) && teamNames.includes(match.team2Name)
                        })
                        
                        return categoryMatches.length > 0 ? categoryMatches.map((match: any) => (
                          <div key={match.id} style={{
                            padding: '16px',
                            background: colors.background.secondary,
                            borderRadius: '10px',
                            border: `1px solid ${colors.border.light}`,
                            display: 'flex',
                            alignItems: 'center',
                            justifyContent: 'space-between'
                          }}>
                            <div style={{ flex: 1 }}>
                              <div style={{ display: 'flex', alignItems: 'center', gap: '16px', marginBottom: '8px' }}>
                                <div style={{
                                  padding: '4px 8px',
                                  borderRadius: '6px',
                                  background: (match.status === 'completed' || match.status === 'COMPLETED') ? colors.accent[600] : 
                                           (match.status === 'in_progress' || match.status === 'IN_PROGRESS') ? '#FFA500' : colors.neutral[400],
                                  color: 'white',
                                  fontSize: '11px',
                                  fontWeight: 500
                                }}>
                                  {(match.status === 'completed' || match.status === 'COMPLETED') ? 'COMPLETADO' : 
                                   (match.status === 'in_progress' || match.status === 'IN_PROGRESS') ? 'EN JUEGO' : 'PROGRAMADO'}
                                </div>
                                <span style={{ fontSize: '12px', color: colors.text.tertiary }}>
                                  Cancha {match.courtNumber}
                                </span>
                              </div>
                              <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>
                                <span style={{ fontSize: '14px', fontWeight: 500, color: colors.text.primary }}>
                                  {match.team1Name}
                                </span>
                                <span style={{ fontSize: '12px', color: colors.text.tertiary }}>vs</span>
                                <span style={{ fontSize: '14px', fontWeight: 500, color: colors.text.primary }}>
                                  {match.team2Name}
                                </span>
                              </div>
                            </div>
                            
                            <div style={{ display: 'flex', alignItems: 'center', gap: '16px' }}>
                              {(match.status === 'completed' || match.status === 'COMPLETED') ? (
                                <div style={{ fontSize: '16px', fontWeight: 600, color: colors.text.primary }}>
                                  {match.team1Score && match.team2Score ? `${match.team1Score} - ${match.team2Score}` : 'Finalizado'}
                                </div>
                              ) : (match.status === 'in_progress' || match.status === 'IN_PROGRESS') ? (
                                <div style={{ fontSize: '16px', fontWeight: 600, color: '#FFA500' }}>
                                  {match.team1Score && match.team2Score ? `${match.team1Score} - ${match.team2Score}` : 'En juego'}
                                </div>
                              ) : (
                                <div style={{ fontSize: '12px', color: colors.text.secondary }}>
                                  {match.scheduledAt ? new Date(match.scheduledAt).toLocaleTimeString('es-MX', {
                                    hour: '2-digit',
                                    minute: '2-digit'
                                  }) : 'Sin programar'}
                                </div>
                              )}
                              
                              <div style={{ display: 'flex', gap: '8px' }}>
                                <button 
                                  onClick={() => {
                                    if (match.status === 'completed' || match.status === 'COMPLETED') {
                                      // Ver detalles del partido completado
                                      console.log('Ver partido:', match)
                                    } else if (match.status === 'in_progress' || match.status === 'IN_PROGRESS') {
                                      // Seguir partido en vivo
                                      console.log('Seguir partido:', match)
                                    } else {
                                      // Permitir programar o reprogramar
                                      setSelectedMatch(match)
                                      setShowScheduleModal(true)
                                    }
                                  }}
                                  style={{
                                    padding: '6px 12px',
                                    borderRadius: '6px',
                                    background: colors.primary[600],
                                    color: 'white',
                                    border: 'none',
                                    fontSize: '12px',
                                    cursor: 'pointer',
                                    display: 'flex',
                                    alignItems: 'center',
                                    gap: '4px'
                                  }}
                                >
                                  {(match.status === 'completed' || match.status === 'COMPLETED') ? (
                                    <>
                                      <Eye size={12} />
                                      Ver
                                    </>
                                  ) : (match.status === 'in_progress' || match.status === 'IN_PROGRESS') ? (
                                    <>
                                      <PlayCircle size={12} />
                                      Seguir
                                    </>
                                  ) : match.scheduledAt ? (
                                    <>
                                      <Edit size={12} />
                                      Editar
                                    </>
                                  ) : (
                                    <>
                                      <Plus size={12} />
                                      Programar
                                    </>
                                  )}
                                </button>
                                
                                {/* Botón de QR para partidos en juego o próximos */}
                                {(match.status === 'IN_PROGRESS' || match.status === 'in_progress' || 
                                  (match.scheduledAt && new Date(match.scheduledAt).getTime() - Date.now() < 30 * 60 * 1000)) && (
                                  <button
                                    onClick={() => {
                                      // Abrir directamente la página de resultados para esta cancha
                                      const qrCode = qrCodes.find((qr: any) => qr.courtNumber === match.courtNumber)
                                      if (qrCode) {
                                        window.open(qrCode.accessUrl, '_blank')
                                      } else {
                                        alert('QR no disponible para esta cancha')
                                      }
                                    }}
                                    style={{
                                      padding: '6px 12px',
                                      borderRadius: '6px',
                                      background: '#047857',
                                      color: 'white',
                                      border: 'none',
                                      fontSize: '12px',
                                      cursor: 'pointer',
                                      display: 'flex',
                                      alignItems: 'center',
                                      gap: '4px'
                                    }}
                                    title="Abrir página de resultados"
                                  >
                                    <QrCode size={12} />
                                    QR
                                  </button>
                                )}
                              </div>
                            </div>
                          </div>
                        )) : (
                          <div style={{ 
                            textAlign: 'center',
                            padding: '40px',
                            color: colors.text.tertiary
                          }}>
                            <Calendar size={32} style={{ marginBottom: '12px', opacity: 0.5 }} />
                            <p>No hay partidos programados para esta categoría</p>
                          </div>
                        )
                      })()}
                    </div>
                  </div>
                  
                  {/* Bracket placeholder mejorado */}
                  <div style={{
                    background: 'white',
                    borderRadius: '12px',
                    border: `1px solid ${colors.border.light}`,
                    padding: '40px',
                    textAlign: 'center'
                  }}>
                    <Trophy size={40} style={{ color: colors.text.tertiary, marginBottom: '16px' }} />
                    <h3 style={{ 
                      fontSize: '20px',
                      fontWeight: 600,
                      color: colors.text.primary,
                      marginBottom: '8px'
                    }}>
                      Bracket del Torneo
                    </h3>
                    <p style={{ 
                      fontSize: '14px',
                      color: colors.text.secondary,
                      marginBottom: '24px',
                      maxWidth: '400px',
                      margin: '0 auto 24px'
                    }}>
                      La visualización interactiva del bracket con eliminatorias y resultados estará disponible próximamente
                    </p>
                    <div style={{
                      display: 'inline-block',
                      padding: '8px 16px',
                      borderRadius: '8px',
                      background: colors.neutral[100],
                      color: colors.text.secondary,
                      fontSize: '13px'
                    }}>
                      🚧 En desarrollo...
                    </div>
                  </div>
                </div>
              </CardModernContent>
            </CardModern>
          </div>
        )}
      </div>

      {/* Modal de programación de partidos */}
      {showScheduleModal && selectedMatch && (
        <Modal
          open={showScheduleModal}
          onClose={() => {
            setShowScheduleModal(false)
            setSelectedMatch(null)
          }}
          title="🚀 MODAL MEJORADO - Programar Partido"
        >
          <div style={{ padding: '20px' }}>
            <div style={{ marginBottom: '20px' }}>
              <div style={{ display: 'flex', alignItems: 'center', gap: '8px', marginBottom: '8px' }}>
                <h3 style={{ fontSize: '18px', fontWeight: 600, margin: 0, color: colors.text.primary }}>
                  {selectedMatch.team1Name} vs {selectedMatch.team2Name}
                </h3>
                {selectedMatch.scheduledAt && (
                  <span style={{
                    padding: '2px 8px',
                    borderRadius: '12px',
                    background: colors.accent[600],
                    color: 'white',
                    fontSize: '10px',
                    fontWeight: 500
                  }}>
                    REPROGRAMAR
                  </span>
                )}
              </div>
              <p style={{ fontSize: '14px', color: colors.text.secondary }}>
                {selectedMatch.scheduledAt 
                  ? 'Modifica la fecha, hora y cancha de este partido'
                  : 'Asigna fecha, hora y cancha para este partido'
                }
              </p>
              {selectedMatch.scheduledAt && (
                <div style={{ 
                  padding: '8px', 
                  borderRadius: '6px',
                  background: colors.neutral[100],
                  marginTop: '8px'
                }}>
                  <p style={{ fontSize: '12px', color: colors.text.secondary, margin: 0 }}>
                    Actualmente: {new Date(selectedMatch.scheduledAt).toLocaleDateString('es-MX', {
                      weekday: 'long',
                      year: 'numeric',
                      month: 'long',
                      day: 'numeric',
                      hour: '2-digit',
                      minute: '2-digit'
                    })} - Cancha {selectedMatch.courtNumber || 'Por definir'}
                  </p>
                </div>
              )}
            </div>

            {/* Shortcuts de tiempo rápido */}
            <div style={{ marginBottom: '24px' }}>
              <label style={{ display: 'block', fontSize: '14px', fontWeight: 600, marginBottom: '12px', color: colors.text.primary }}>
                ⚡ Programación Rápida
              </label>
              <div style={{ display: 'flex', gap: '8px', flexWrap: 'wrap' }}>
                {(() => {
                  const now = new Date()
                  const shortcuts = [
                    { label: '🕐 Ahora', minutes: 0 },
                    { label: '🕜 +30min', minutes: 30 },
                    { label: '🕐 +1h', minutes: 60 },
                    { label: '🕑 +2h', minutes: 120 },
                    { label: '🌅 Mañana 9AM', getTime: () => {
                      const tomorrow = new Date(now)
                      tomorrow.setDate(tomorrow.getDate() + 1)
                      tomorrow.setHours(9, 0, 0, 0)
                      return tomorrow
                    }}
                  ]
                  
                  return shortcuts.map(shortcut => {
                    const targetTime = shortcut.getTime ? shortcut.getTime() : new Date(now.getTime() + shortcut.minutes * 60000)
                    return (
                      <button
                        key={shortcut.label}
                        type="button"
                        onClick={() => {
                          const form = document.querySelector('form[data-schedule]') as HTMLFormElement
                          if (form) {
                            const dateInput = form.querySelector('input[name="date"]') as HTMLInputElement
                            const timeInput = form.querySelector('input[name="time"]') as HTMLInputElement
                            
                            if (dateInput && timeInput) {
                              dateInput.value = targetTime.toISOString().split('T')[0]
                              timeInput.value = targetTime.toTimeString().slice(0, 5)
                            }
                          }
                        }}
                        style={{
                          padding: '8px 12px',
                          borderRadius: '20px',
                          border: `1px solid ${colors.border.light}`,
                          background: 'white',
                          color: colors.text.secondary,
                          fontSize: '12px',
                          cursor: 'pointer',
                          transition: 'all 0.2s',
                          fontWeight: 500
                        }}
                        onMouseEnter={(e) => {
                          e.currentTarget.style.background = colors.accent[600]
                          e.currentTarget.style.color = 'white'
                          e.currentTarget.style.transform = 'translateY(-1px)'
                        }}
                        onMouseLeave={(e) => {
                          e.currentTarget.style.background = 'white'
                          e.currentTarget.style.color = colors.text.secondary
                          e.currentTarget.style.transform = 'translateY(0)'
                        }}
                      >
                        {shortcut.label}
                      </button>
                    )
                  })
                })()}
              </div>
            </div>

            <form 
              data-schedule 
              onSubmit={(e) => {
                e.preventDefault()
                const formData = new FormData(e.currentTarget)
                const date = formData.get('date') as string
                const time = formData.get('time') as string
                const courtId = formData.get('court') as string
                
                if (date && time && courtId) {
                  const scheduledAt = new Date(`${date}T${time}`).toISOString()
                  scheduleMatch(selectedMatch.id, scheduledAt, courtId)
                }
              }}>
              {/* Shortcuts de Tiempo */}
              <div style={{ marginBottom: '24px' }}>
                <label style={{ display: 'block', fontSize: '14px', fontWeight: 500, marginBottom: '12px', color: colors.text.primary }}>
                  ⚡ Accesos Rápidos
                </label>
                <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(120px, 1fr))', gap: '8px', marginBottom: '16px' }}>
                  {(() => {
                    const shortcuts = [
                      { 
                        label: '⏰ Ahora', 
                        action: () => {
                          const now = new Date()
                          const dateInput = document.querySelector('input[name="date"]') as HTMLInputElement
                          const timeInput = document.querySelector('input[name="time"]') as HTMLInputElement
                          if (dateInput) dateInput.value = now.toISOString().split('T')[0]
                          if (timeInput) timeInput.value = now.toTimeString().slice(0, 5)
                        }
                      },
                      { 
                        label: '⏰ +30min', 
                        action: () => {
                          const now = new Date(Date.now() + 30 * 60 * 1000)
                          const dateInput = document.querySelector('input[name="date"]') as HTMLInputElement
                          const timeInput = document.querySelector('input[name="time"]') as HTMLInputElement
                          if (dateInput) dateInput.value = now.toISOString().split('T')[0]
                          if (timeInput) timeInput.value = now.toTimeString().slice(0, 5)
                        }
                      },
                      { 
                        label: '⏰ +1h', 
                        action: () => {
                          const now = new Date(Date.now() + 60 * 60 * 1000)
                          const dateInput = document.querySelector('input[name="date"]') as HTMLInputElement
                          const timeInput = document.querySelector('input[name="time"]') as HTMLInputElement
                          if (dateInput) dateInput.value = now.toISOString().split('T')[0]
                          if (timeInput) timeInput.value = now.toTimeString().slice(0, 5)
                        }
                      },
                      { 
                        label: '⏰ +2h', 
                        action: () => {
                          const now = new Date(Date.now() + 2 * 60 * 60 * 1000)
                          const dateInput = document.querySelector('input[name="date"]') as HTMLInputElement
                          const timeInput = document.querySelector('input[name="time"]') as HTMLInputElement
                          if (dateInput) dateInput.value = now.toISOString().split('T')[0]
                          if (timeInput) timeInput.value = now.toTimeString().slice(0, 5)
                        }
                      },
                      { 
                        label: '🌅 Mañana 9AM', 
                        action: () => {
                          const tomorrow = new Date()
                          tomorrow.setDate(tomorrow.getDate() + 1)
                          tomorrow.setHours(9, 0, 0, 0)
                          const dateInput = document.querySelector('input[name="date"]') as HTMLInputElement
                          const timeInput = document.querySelector('input[name="time"]') as HTMLInputElement
                          if (dateInput) dateInput.value = tomorrow.toISOString().split('T')[0]
                          if (timeInput) timeInput.value = '09:00'
                        }
                      }
                    ]

                    return shortcuts.map((shortcut, idx) => (
                      <button
                        key={idx}
                        type="button"
                        onClick={shortcut.action}
                        style={{
                          padding: '8px 12px',
                          fontSize: '12px',
                          fontWeight: 500,
                          borderRadius: '8px',
                          border: `1px solid ${colors.border.light}`,
                          background: 'white',
                          color: colors.text.secondary,
                          cursor: 'pointer',
                          transition: 'all 0.2s'
                        }}
                        onMouseEnter={(e) => {
                          e.currentTarget.style.background = colors.accent[100] || '#f0f9ff'
                          e.currentTarget.style.borderColor = colors.accent[300] || '#93c5fd'
                          e.currentTarget.style.color = colors.accent[700] || '#1d4ed8'
                        }}
                        onMouseLeave={(e) => {
                          e.currentTarget.style.background = 'white'
                          e.currentTarget.style.borderColor = colors.border.light
                          e.currentTarget.style.color = colors.text.secondary
                        }}
                      >
                        {shortcut.label}
                      </button>
                    ))
                  })()}
                </div>
              </div>

              <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '16px', marginBottom: '20px' }}>
                <div>
                  <label style={{ display: 'block', fontSize: '14px', fontWeight: 500, marginBottom: '8px', color: colors.text.primary }}>
                    📅 Fecha
                  </label>
                  <input
                    type="date"
                    name="date"
                    required
                    defaultValue={selectedMatch.scheduledAt 
                      ? new Date(selectedMatch.scheduledAt).toISOString().split('T')[0] 
                      : new Date().toISOString().split('T')[0]
                    }
                    style={{
                      width: '100%',
                      padding: '12px',
                      borderRadius: '8px',
                      border: `1px solid ${colors.border.light}`,
                      fontSize: '14px'
                    }}
                  />
                </div>

                <div>
                  <label style={{ display: 'block', fontSize: '14px', fontWeight: 500, marginBottom: '8px', color: colors.text.primary }}>
                    🕐 Hora
                  </label>
                  <input
                    type="time"
                    name="time"
                    required
                    defaultValue={selectedMatch.scheduledAt 
                      ? new Date(selectedMatch.scheduledAt).toLocaleTimeString('es-MX', {
                          hour12: false,
                          hour: '2-digit',
                          minute: '2-digit'
                        })
                      : new Date().toTimeString().slice(0, 5)
                    }
                    style={{
                      width: '100%',
                      padding: '12px',
                      borderRadius: '8px',
                      border: `1px solid ${colors.border.light}`,
                      fontSize: '14px'
                    }}
                  />
                </div>
              </div>

              <div style={{ marginBottom: '24px' }}>
                <label style={{ display: 'block', fontSize: '14px', fontWeight: 500, marginBottom: '12px', color: colors.text.primary }}>
                  🏟️ Seleccionar Cancha
                </label>
                <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(140px, 1fr))', gap: '12px' }}>
                  {tournamentData?.courts?.map((court: any) => {
                    // Verificar si la cancha está ocupada (simplificado para el ejemplo)
                    const isCurrentCourt = selectedMatch.courtId === court.id
                    
                    return (
                      <label 
                        key={court.id}
                        data-court-option
                        style={{
                          display: 'flex',
                          flexDirection: 'column',
                          alignItems: 'center',
                          padding: '16px 12px',
                          borderRadius: '12px',
                          border: `2px solid ${isCurrentCourt ? colors.accent[600] : colors.border.light}`,
                          background: isCurrentCourt ? colors.accent[100] || '#f0f9ff' : 'white',
                          cursor: 'pointer',
                          transition: 'all 0.2s',
                          position: 'relative'
                        }}
                        onMouseEnter={(e) => {
                          e.currentTarget.style.borderColor = colors.accent[600]
                          e.currentTarget.style.background = colors.accent[100] || '#f0f9ff'
                        }}
                        onMouseLeave={(e) => {
                          const input = e.currentTarget.querySelector('input') as HTMLInputElement
                          if (!input.checked) {
                            e.currentTarget.style.borderColor = colors.border.light
                            e.currentTarget.style.background = 'white'
                          }
                        }}
                      >
                        <input
                          type="radio"
                          name="court"
                          value={court.id}
                          defaultChecked={isCurrentCourt}
                          style={{ display: 'none' }}
                          onChange={(e) => {
                            if (e.target.checked) {
                              // Resetear estilos de todas las canchas
                              document.querySelectorAll('label[data-court-option]').forEach(label => {
                                ;(label as HTMLElement).style.borderColor = colors.border.light
                                ;(label as HTMLElement).style.background = 'white'
                              })
                              // Aplicar estilo a la seleccionada
                              const label = e.target.closest('label') as HTMLElement
                              if (label) {
                                label.style.borderColor = colors.accent[600]
                                label.style.background = colors.accent[100] || '#f0f9ff'
                              }
                            }
                          }}
                        />
                        <div style={{ 
                          fontSize: '14px', 
                          fontWeight: 600, 
                          color: colors.text.primary,
                          marginBottom: '4px'
                        }}>
                          {court.name}
                        </div>
                        <div style={{ 
                          fontSize: '11px', 
                          color: colors.accent[600],
                          display: 'flex',
                          alignItems: 'center',
                          gap: '4px'
                        }}>
                          <div style={{
                            width: '6px',
                            height: '6px',
                            borderRadius: '50%',
                            background: colors.accent[600]
                          }} />
                          Disponible
                        </div>
                        {isCurrentCourt && (
                          <div style={{
                            position: 'absolute',
                            top: '-6px',
                            right: '-6px',
                            width: '20px',
                            height: '20px',
                            borderRadius: '50%',
                            background: colors.accent[600],
                            color: 'white',
                            display: 'flex',
                            alignItems: 'center',
                            justifyContent: 'center',
                            fontSize: '10px'
                          }}>
                            ✓
                          </div>
                        )}
                      </label>
                    )
                  })}
                </div>
              </div>

              <div style={{ display: 'flex', gap: '12px', justifyContent: 'space-between' }}>
                <div>
                  {selectedMatch.scheduledAt && (
                    <button
                      type="button"
                      onClick={async () => {
                        if (confirm('¿Estás seguro de que deseas eliminar la programación de este partido?')) {
                          try {
                            const response = await fetch(`/api/tournaments-v2/${tournamentId}/matches/${selectedMatch.id}/schedule`, {
                              method: 'PATCH',
                              headers: {
                                'Content-Type': 'application/json',
                              },
                              body: JSON.stringify({
                                scheduledAt: null,
                                courtId: null,
                                status: 'PENDING'
                              })
                            })

                            if (response.ok) {
                              await fetchTournamentData()
                              setShowScheduleModal(false)
                              setSelectedMatch(null)
                            } else {
                              alert('Error al eliminar la programación')
                            }
                          } catch (error) {
                            console.error('Error:', error)
                            alert('Error al eliminar la programación')
                          }
                        }
                      }}
                      style={{
                        padding: '12px 20px',
                        borderRadius: '8px',
                        border: `1px solid ${colors.danger[600]}`,
                        background: 'white',
                        color: colors.danger[600],
                        fontSize: '14px',
                        cursor: 'pointer',
                        display: 'flex',
                        alignItems: 'center',
                        gap: '6px',
                        transition: 'all 0.2s'
                      }}
                      onMouseEnter={(e) => {
                        e.currentTarget.style.background = colors.danger[600]
                        e.currentTarget.style.color = 'white'
                      }}
                      onMouseLeave={(e) => {
                        e.currentTarget.style.background = 'white'
                        e.currentTarget.style.color = colors.danger[600]
                      }}
                    >
                      <Trash2 size={14} />
                      Quitar Programación
                    </button>
                  )}
                </div>
                
                <div style={{ display: 'flex', gap: '12px' }}>
                  <button
                    type="button"
                    onClick={() => {
                      setShowScheduleModal(false)
                      setSelectedMatch(null)
                    }}
                    style={{
                      padding: '12px 20px',
                      borderRadius: '8px',
                      border: `1px solid ${colors.border.light}`,
                      background: 'white',
                      color: colors.text.primary,
                      fontSize: '14px',
                      cursor: 'pointer'
                    }}
                  >
                    Cancelar
                  </button>
                  <button
                    type="submit"
                    style={{
                      padding: '12px 20px',
                      borderRadius: '8px',
                      background: colors.primary[600],
                      color: 'white',
                      border: 'none',
                      fontSize: '14px',
                      cursor: 'pointer',
                      display: 'flex',
                      alignItems: 'center',
                      gap: '6px'
                    }}
                  >
                    <Save size={14} />
                    {selectedMatch.scheduledAt ? 'Guardar Cambios' : 'Programar Partido'}
                  </button>
                </div>
              </div>
            </form>
          </div>
        </Modal>
      )}

      {/* Wizard de Programación Automática */}
      {showAutoScheduleWizard && (
        <Modal
          open={showAutoScheduleWizard}
          onClose={() => setShowAutoScheduleWizard(false)}
          title="Programación Automática de Partidos"
          size="lg"
        >
          <div style={{ padding: '24px' }}>
            {/* Configuración de parámetros del torneo */}
            <div style={{
              background: `linear-gradient(135deg, ${colors.primary[600]}10, ${colors.accent[400]}10)`,
              border: `1px solid ${colors.primary[600]}30`,
              borderRadius: '12px',
              padding: '16px',
              marginBottom: '24px'
            }}>
              <h4 style={{ 
                fontSize: '14px', 
                fontWeight: 600, 
                color: colors.text.primary, 
                marginBottom: '16px',
                display: 'flex',
                alignItems: 'center',
                gap: '8px'
              }}>
                <Settings size={16} />
                Configuración de Capacidad
              </h4>
              
              <div style={{ display: 'grid', gridTemplateColumns: 'repeat(2, 1fr)', gap: '16px' }}>
                {/* Duración de partidos */}
                <div>
                  <label style={{ 
                    fontSize: '12px', 
                    color: colors.text.secondary, 
                    display: 'block',
                    marginBottom: '6px',
                    fontWeight: 500
                  }}>
                    Duración por partido
                  </label>
                  <select
                    value={matchDuration}
                    onChange={(e) => setMatchDuration(Number(e.target.value))}
                    style={{
                      width: '100%',
                      padding: '8px',
                      borderRadius: '6px',
                      border: `1px solid ${colors.border.light}`,
                      fontSize: '13px',
                      background: 'white'
                    }}
                  >
                    <option value={45}>45 minutos</option>
                    <option value={60}>60 minutos</option>
                    <option value={75}>75 minutos</option>
                    <option value={90}>90 minutos</option>
                    <option value={120}>120 minutos</option>
                  </select>
                </div>
                
                {/* Tiempo de preparación */}
                <div>
                  <label style={{ 
                    fontSize: '12px', 
                    color: colors.text.secondary, 
                    display: 'block',
                    marginBottom: '6px',
                    fontWeight: 500
                  }}>
                    Tiempo de preparación entre partidos
                  </label>
                  <select
                    value={preparationTime}
                    onChange={(e) => setPreparationTime(Number(e.target.value))}
                    style={{
                      width: '100%',
                      padding: '8px',
                      borderRadius: '6px',
                      border: `1px solid ${colors.border.light}`,
                      fontSize: '13px',
                      background: 'white'
                    }}
                  >
                    <option value={0}>Sin preparación</option>
                    <option value={10}>10 minutos</option>
                    <option value={15}>15 minutos</option>
                    <option value={20}>20 minutos</option>
                    <option value={30}>30 minutos</option>
                  </select>
                </div>
                
                {/* Hora de inicio */}
                <div>
                  <label style={{ 
                    fontSize: '12px', 
                    color: colors.text.secondary, 
                    display: 'block',
                    marginBottom: '6px',
                    fontWeight: 500
                  }}>
                    Hora de inicio
                  </label>
                  <select
                    value={startHour}
                    onChange={(e) => setStartHour(Number(e.target.value))}
                    style={{
                      width: '100%',
                      padding: '8px',
                      borderRadius: '6px',
                      border: `1px solid ${colors.border.light}`,
                      fontSize: '13px',
                      background: 'white'
                    }}
                  >
                    {[6,7,8,9,10,11,12].map(hour => (
                      <option key={hour} value={hour}>{hour}:00</option>
                    ))}
                  </select>
                </div>
                
                {/* Hora de fin */}
                <div>
                  <label style={{ 
                    fontSize: '12px', 
                    color: colors.text.secondary, 
                    display: 'block',
                    marginBottom: '6px',
                    fontWeight: 500
                  }}>
                    Hora de fin
                  </label>
                  <select
                    value={endHour}
                    onChange={(e) => setEndHour(Number(e.target.value))}
                    style={{
                      width: '100%',
                      padding: '8px',
                      borderRadius: '6px',
                      border: `1px solid ${colors.border.light}`,
                      fontSize: '13px',
                      background: 'white'
                    }}
                  >
                    {[16,17,18,19,20,21,22,23].map(hour => (
                      <option key={hour} value={hour}>{hour}:00</option>
                    ))}
                  </select>
                </div>
              </div>
              
              {/* Resumen de capacidad */}
              <div style={{
                marginTop: '16px',
                padding: '12px',
                background: 'white',
                borderRadius: '8px',
                fontSize: '13px'
              }}>
                <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '8px' }}>
                  <span style={{ color: colors.text.secondary }}>Canchas disponibles:</span>
                  <strong>{tournamentData?.courts?.length || 0}</strong>
                </div>
                <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '8px' }}>
                  <span style={{ color: colors.text.secondary }}>Horas de operación:</span>
                  <strong>{endHour - startHour} horas</strong>
                </div>
                <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '8px' }}>
                  <span style={{ color: colors.text.secondary }}>Tiempo total por partido:</span>
                  <strong>{matchDuration + preparationTime} min</strong>
                </div>
                <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '8px' }}>
                  <span style={{ color: colors.text.secondary }}>Partidos por cancha:</span>
                  <strong>{Math.floor(((endHour - startHour) * 60) / (matchDuration + preparationTime))}</strong>
                </div>
                <div style={{ 
                  display: 'flex', 
                  justifyContent: 'space-between',
                  paddingTop: '8px',
                  borderTop: `1px solid ${colors.border.light}`,
                  fontSize: '14px',
                  fontWeight: 600
                }}>
                  <span style={{ color: colors.primary[700] }}>Capacidad máxima diaria:</span>
                  <span style={{ color: colors.primary[700] }}>
                    {(tournamentData?.courts?.length || 0) * Math.floor(((endHour - startHour) * 60) / (matchDuration + preparationTime))} partidos
                  </span>
                </div>
              </div>
            </div>
            
            <div style={{ marginBottom: '24px' }}>
              <h3 style={{ fontSize: '18px', fontWeight: 600, marginBottom: '8px', color: colors.text.primary }}>
                Configurar Horarios por Categoría
              </h3>
              <p style={{ fontSize: '14px', color: colors.text.secondary, marginBottom: '20px' }}>
                Define los horarios para cada categoría y el sistema programará automáticamente todos los partidos
              </p>

              {/* Estadísticas de partidos */}
              <div style={{
                background: colors.background.secondary,
                padding: '16px',
                borderRadius: '12px',
                marginBottom: '24px'
              }}>
                {(() => {
                  const allMatches = [
                    ...(tournamentData?.matches?.inProgress || []),
                    ...(tournamentData?.matches?.upcoming || [])
                  ]
                  
                  console.log('DEBUG - allMatches:', allMatches.length)
                  console.log('DEBUG - tournamentData?.categories:', tournamentData?.categories)
                  console.log('DEBUG - registrations:', registrations?.length)
                  
                  const unprogrammedCategories = tournamentData?.categories?.filter((category: any) => {
                    const categoryTeams = registrations?.filter((reg: any) => 
                      reg.category === category.code && reg.modality === category.modality
                    ) || []
                    const teamNames = categoryTeams.map(team => team.teamName)
                    const unprogrammedMatches = allMatches.filter((match: any) => {
                      return teamNames.includes(match.team1Name) && 
                             teamNames.includes(match.team2Name) && 
                             !match.scheduledAt
                    })
                    // Si allowReschedule está activado, mostrar todas las categorías con partidos
                    if (allowReschedule) {
                      const allCategoryMatches = allMatches.filter((match: any) => {
                        return teamNames.includes(match.team1Name) && 
                               teamNames.includes(match.team2Name)
                      })
                      return allCategoryMatches.length > 0
                    }
                    return unprogrammedMatches.length > 0
                  }) || []
                  
                  console.log('DEBUG - unprogrammedCategories:', unprogrammedCategories)
                  console.log('DEBUG - allowReschedule:', allowReschedule)
                  
                  if (unprogrammedCategories.length === 0) {
                    return (
                      <div style={{ textAlign: 'center', padding: '20px' }}>
                        <div style={{ 
                          width: '64px', 
                          height: '64px', 
                          margin: '0 auto 16px',
                          borderRadius: '50%',
                          background: colors.accent[600],
                          display: 'flex',
                          alignItems: 'center',
                          justifyContent: 'center'
                        }}>
                          <CheckCircle size={32} color="white" />
                        </div>
                        <h4 style={{ fontSize: '18px', fontWeight: 600, marginBottom: '8px', color: colors.text.primary }}>
                          ¡Todos los partidos están programados!
                        </h4>
                        <p style={{ fontSize: '14px', color: colors.text.secondary, marginBottom: '20px' }}>
                          Todas las categorías ya tienen sus partidos con horarios asignados.
                        </p>
                        <div style={{
                          background: colors.accent[600],
                          color: 'white',
                          padding: '12px 16px',
                          borderRadius: '8px',
                          display: 'inline-flex',
                          alignItems: 'center',
                          gap: '8px',
                          fontSize: '14px',
                          marginBottom: '16px'
                        }}>
                          <AlertCircle size={16} />
                          <span><strong>Consejo:</strong> Activa "Permitir Reprogramación" si necesitas cambiar horarios</span>
                        </div>
                        
                        <div style={{ textAlign: 'left' }}>
                          <label style={{
                            display: 'flex',
                            alignItems: 'center',
                            gap: '8px',
                            cursor: 'pointer',
                            padding: '8px',
                            background: 'rgba(255,255,255,0.7)',
                            borderRadius: '6px',
                            border: `1px solid ${colors.border.light}`,
                            display: 'inline-flex'
                          }}>
                            <input
                              type="checkbox"
                              checked={allowReschedule}
                              onChange={(e) => {
                                setAllowReschedule(e.target.checked)
                                setSelectedCategories([]) // Reset selected categories when toggling
                              }}
                              style={{ marginRight: '4px' }}
                            />
                            <span style={{ fontSize: '14px', color: colors.text.primary, fontWeight: 500 }}>
                              Permitir reprogramar partidos existentes
                            </span>
                          </label>
                        </div>
                      </div>
                    )
                  }
                  
                  return (
                    <>
                      {/* Sistema de filtros elegante con tabs */}
                      <div style={{ marginBottom: '24px' }}>
                        {/* Selector de Modalidad tipo Tabs */}
                        <div style={{ marginBottom: '20px' }}>
                          <label style={{ 
                            fontSize: '13px', 
                            fontWeight: 600, 
                            color: colors.text.secondary,
                            textTransform: 'uppercase',
                            letterSpacing: '0.5px',
                            display: 'block',
                            marginBottom: '12px'
                          }}>
                            Tipo de Competencia
                          </label>
                          <div style={{
                            display: 'inline-flex',
                            background: colors.neutral[100],
                            borderRadius: '12px',
                            padding: '4px',
                            gap: '2px',
                            boxShadow: 'inset 0 1px 3px rgba(0,0,0,0.08)'
                          }}>
                            {/* Tab: Todas */}
                            <button
                              type="button"
                              onClick={() => {
                                // Seleccionar todas las modalidades disponibles
                                const allModalities = ['M', 'F', 'X'].filter(m => 
                                  unprogrammedCategories.some((cat: any) => cat.modality === m)
                                )
                                setSelectedModalities(allModalities)
                                setSelectedLevels([])
                              }}
                              style={{
                                padding: '10px 20px',
                                borderRadius: '8px',
                                border: 'none',
                                background: selectedModalities.length === 3 || 
                                          (selectedModalities.length > 0 && 
                                           unprogrammedCategories.filter((cat: any) => 
                                             ['M', 'F', 'X'].includes(cat.modality)
                                           ).every((cat: any) => selectedModalities.includes(cat.modality)))
                                  ? 'white'
                                  : 'transparent',
                                color: selectedModalities.length > 0 && 
                                       unprogrammedCategories.filter((cat: any) => 
                                         ['M', 'F', 'X'].includes(cat.modality)
                                       ).every((cat: any) => selectedModalities.includes(cat.modality))
                                  ? colors.text.primary
                                  : colors.text.secondary,
                                fontWeight: 500,
                                fontSize: '14px',
                                cursor: 'pointer',
                                transition: 'all 0.2s',
                                boxShadow: selectedModalities.length === 3 || 
                                          (selectedModalities.length > 0 && 
                                           unprogrammedCategories.filter((cat: any) => 
                                             ['M', 'F', 'X'].includes(cat.modality)
                                           ).every((cat: any) => selectedModalities.includes(cat.modality)))
                                  ? '0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.08)'
                                  : 'none'
                              }}
                            >
                              Todas
                            </button>
                            
                            {/* Tabs individuales */}
                            {[
                              { id: 'M', label: 'Masculino' },
                              { id: 'F', label: 'Femenino' },
                              { id: 'X', label: 'Mixto' }
                            ].map(modality => {
                              const isSelected = selectedModalities.includes(modality.id)
                              const count = unprogrammedCategories.filter((cat: any) => cat.modality === modality.id).length
                              
                              return (
                                <button
                                  key={modality.id}
                                  type="button"
                                  onClick={() => {
                                    // Toggle única modalidad
                                    if (isSelected && selectedModalities.length === 1) {
                                      setSelectedModalities([])
                                    } else if (isSelected) {
                                      setSelectedModalities(prev => prev.filter(m => m !== modality.id))
                                    } else {
                                      setSelectedModalities([modality.id])
                                    }
                                    setSelectedLevels([])
                                  }}
                                  disabled={count === 0}
                                  style={{
                                    padding: '10px 20px',
                                    borderRadius: '8px',
                                    border: 'none',
                                    background: isSelected && selectedModalities.length === 1
                                      ? 'white'
                                      : 'transparent',
                                    color: isSelected && selectedModalities.length === 1
                                      ? colors.text.primary
                                      : count === 0 
                                        ? colors.text.tertiary
                                        : colors.text.secondary,
                                    fontWeight: 500,
                                    fontSize: '14px',
                                    cursor: count > 0 ? 'pointer' : 'not-allowed',
                                    opacity: count === 0 ? 0.5 : 1,
                                    transition: 'all 0.2s',
                                    boxShadow: isSelected && selectedModalities.length === 1
                                      ? '0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.08)'
                                      : 'none',
                                    position: 'relative'
                                  }}
                                >
                                  {modality.label}
                                  {count > 0 && (
                                    <span style={{
                                      marginLeft: '6px',
                                      fontSize: '12px',
                                      color: colors.text.tertiary
                                    }}>
                                      ({count})
                                    </span>
                                  )}
                                </button>
                              )
                            })}
                          </div>
                        </div>
                        
                        {/* Barra de Filtros de Nivel */}
                        {selectedModalities.length > 0 && (
                          <div>
                            <label style={{ 
                              fontSize: '13px', 
                              fontWeight: 600, 
                              color: colors.text.secondary,
                              textTransform: 'uppercase',
                              letterSpacing: '0.5px',
                              display: 'block',
                              marginBottom: '12px'
                            }}>
                              Nivel de Fuerza
                            </label>
                            <div style={{
                              display: 'inline-flex',
                              background: colors.neutral[100],
                              borderRadius: '12px',
                              padding: '4px',
                              gap: '2px',
                              boxShadow: 'inset 0 1px 3px rgba(0,0,0,0.08)'
                            }}>
                              {/* Opción: Todos los niveles */}
                              <button
                                type="button"
                                onClick={() => setSelectedLevels([])}
                                style={{
                                  padding: '8px 16px',
                                  borderRadius: '8px',
                                  border: 'none',
                                  background: selectedLevels.length === 0 ? 'white' : 'transparent',
                                  color: selectedLevels.length === 0 ? colors.text.primary : colors.text.secondary,
                                  fontWeight: 500,
                                  fontSize: '13px',
                                  cursor: 'pointer',
                                  transition: 'all 0.2s',
                                  boxShadow: selectedLevels.length === 0
                                    ? '0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.08)'
                                    : 'none'
                                }}
                              >
                                Todos
                              </button>
                              
                              {/* Niveles individuales */}
                              {['OPEN', '1F', '2F', '3F', '4F', '5F', '6F'].map(level => {
                                const isSelected = selectedLevels.includes(level)
                                const count = unprogrammedCategories.filter((cat: any) => 
                                  selectedModalities.includes(cat.modality) && cat.code === level
                                ).length
                                
                                if (count === 0) return null
                                
                                return (
                                  <button
                                    key={level}
                                    type="button"
                                    onClick={() => {
                                      if (isSelected) {
                                        setSelectedLevels(prev => prev.filter(l => l !== level))
                                      } else {
                                        setSelectedLevels(prev => [...prev, level])
                                      }
                                    }}
                                    style={{
                                      padding: '8px 16px',
                                      borderRadius: '8px',
                                      border: 'none',
                                      background: isSelected ? 'white' : 'transparent',
                                      color: isSelected ? colors.text.primary : colors.text.secondary,
                                      fontWeight: 500,
                                      fontSize: '13px',
                                      cursor: 'pointer',
                                      transition: 'all 0.2s',
                                      boxShadow: isSelected
                                        ? '0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.08)'
                                        : 'none'
                                    }}
                                  >
                                    {level === 'OPEN' ? 'Open' : level}
                                  </button>
                                )
                              })}
                            </div>
                          </div>
                        )}
                      </div>
                      
                      {/* Mostrar categorías filtradas */}
                      {(() => {
                        // Filtrar categorías basado en los filtros seleccionados
                        let filteredCategories = unprogrammedCategories
                        
                        // Filtrar por modalidades seleccionadas
                        if (selectedModalities.length > 0) {
                          filteredCategories = filteredCategories.filter((cat: any) => 
                            selectedModalities.includes(cat.modality)
                          )
                        } else {
                          // Si no hay modalidades seleccionadas, no mostrar nada
                          return (
                            <div style={{
                              padding: '40px',
                              textAlign: 'center',
                              background: colors.neutral[100],
                              borderRadius: '12px',
                              color: colors.text.secondary
                            }}>
                              <p style={{ fontSize: '14px', margin: 0 }}>
                                Selecciona al menos un tipo de competencia para ver las categorías disponibles
                              </p>
                            </div>
                          )
                        }
                        
                        // Filtrar por niveles si hay alguno seleccionado
                        if (selectedLevels.length > 0) {
                          filteredCategories = filteredCategories.filter((cat: any) => 
                            selectedLevels.includes(cat.code)
                          )
                        }
                        
                        // Si no hay categorías después del filtrado
                        if (filteredCategories.length === 0) {
                          return (
                            <div style={{
                              padding: '40px',
                              textAlign: 'center',
                              background: colors.neutral[100],
                              borderRadius: '12px',
                              color: colors.text.secondary
                            }}>
                              <p style={{ fontSize: '14px', margin: 0 }}>
                                No hay categorías que coincidan con los filtros seleccionados
                              </p>
                            </div>
                          )
                        }
                        
                        // Agrupar categorías filtradas por modalidad para mostrarlas organizadas
                        const categoriesByModality = {
                          M: filteredCategories.filter((cat: any) => cat.modality === 'M'),
                          F: filteredCategories.filter((cat: any) => cat.modality === 'F'),
                          X: filteredCategories.filter((cat: any) => cat.modality === 'X')
                        }
                        
                        const modalityLabels = {
                          M: { label: 'Masculino', icon: '♂️', color: colors.primary[600] },
                          F: { label: 'Femenino', icon: '♀️', color: '#EC4899' },
                          X: { label: 'Mixto', icon: '⚥', color: colors.accent[600] }
                        }
                        
                        // Ordenar categorías por nivel de fuerza
                        const sortCategories = (categories: any[]) => {
                          const forceOrder = ['1F', '2F', '3F', '4F', '5F', '6F', 'OPEN', 'A', 'B', 'C']
                          return categories.sort((a, b) => {
                            const indexA = forceOrder.indexOf(a.code)
                            const indexB = forceOrder.indexOf(b.code)
                            if (indexA === -1) return 1
                            if (indexB === -1) return -1
                            return indexA - indexB
                          })
                        }
                        
                        return (
                          <div style={{ display: 'flex', flexDirection: 'column', gap: '20px' }}>
                            {Object.entries(categoriesByModality).map(([modality, categories]) => {
                              if (!categories || categories.length === 0) return null
                              
                              const modalityInfo = modalityLabels[modality as keyof typeof modalityLabels]
                              const sortedCategories = sortCategories(categories as any[])
                              
                              // Check if all categories of this modality are selected
                              const allModalitySelected = sortedCategories.every(cat => 
                                selectedCategories.includes(`${cat.code}-${cat.modality}`)
                              )
                              
                              return (
                                <div key={modality} style={{
                                  border: `1px solid ${colors.border.light}`,
                                  borderRadius: '12px',
                                  padding: '16px',
                                  background: 'white'
                                }}>
                                  {/* Header de modalidad */}
                                  <div style={{
                                    display: 'flex',
                                    alignItems: 'center',
                                    justifyContent: 'space-between',
                                    marginBottom: '12px',
                                    paddingBottom: '12px',
                                    borderBottom: `1px solid ${colors.border.light}`
                                  }}>
                                    <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                                      <span style={{ fontSize: '20px' }}>{modalityInfo.icon}</span>
                                      <h5 style={{
                                        fontSize: '14px',
                                        fontWeight: 600,
                                        color: modalityInfo.color,
                                        margin: 0
                                      }}>
                                        {modalityInfo.label}
                                      </h5>
                                      <span style={{
                                        fontSize: '12px',
                                        color: colors.text.tertiary,
                                        background: colors.neutral[100],
                                        padding: '2px 8px',
                                        borderRadius: '12px'
                                      }}>
                                        {sortedCategories.length} categorías
                                      </span>
                                    </div>
                                    
                                    {allowReschedule && (
                                      <button
                                        type="button"
                                        onClick={() => {
                                          const modalityCategoryKeys = sortedCategories.map((cat: any) => 
                                            `${cat.code}-${cat.modality}`
                                          )
                                          if (allModalitySelected) {
                                            // Deseleccionar todas las de esta modalidad
                                            setSelectedCategories(prev => 
                                              prev.filter(key => !modalityCategoryKeys.includes(key))
                                            )
                                          } else {
                                            // Seleccionar todas las de esta modalidad
                                            setSelectedCategories(prev => [
                                              ...prev.filter(key => !modalityCategoryKeys.includes(key)),
                                              ...modalityCategoryKeys
                                            ])
                                          }
                                        }}
                                        style={{
                                          padding: '4px 12px',
                                          borderRadius: '6px',
                                          border: `1px solid ${allModalitySelected ? modalityInfo.color : colors.border.light}`,
                                          background: allModalitySelected ? modalityInfo.color : 'white',
                                          color: allModalitySelected ? 'white' : colors.text.secondary,
                                          fontSize: '12px',
                                          cursor: 'pointer',
                                          fontWeight: 500,
                                          transition: 'all 0.2s'
                                        }}
                                      >
                                        {allModalitySelected ? 'Deseleccionar todas' : 'Seleccionar todas'}
                                      </button>
                                    )}
                                  </div>
                                  
                                  {/* Grid de categorías simplificado */}
                                  <div style={{ 
                                    display: 'grid', 
                                    gridTemplateColumns: 'repeat(auto-fill, minmax(160px, 1fr))', 
                                    gap: '10px' 
                                  }}>
                                    {sortedCategories.map((category: any) => {
                          const categoryTeams = registrations?.filter((reg: any) => 
                            reg.category === category.code && reg.modality === category.modality
                          ) || []
                          const teamNames = categoryTeams.map(team => team.teamName)
                          const unprogrammedMatches = allMatches.filter((match: any) => {
                            return teamNames.includes(match.team1Name) && 
                                   teamNames.includes(match.team2Name) && 
                                   !match.scheduledAt
                          })
                          
                          const allCategoryMatches = allMatches.filter((match: any) => {
                            return teamNames.includes(match.team1Name) && 
                                   teamNames.includes(match.team2Name)
                          })
                          
                          const scheduledMatches = allCategoryMatches.length - unprogrammedMatches.length
                          const categoryKey = `${category.code}-${category.modality}`
                          const isSelected = selectedCategories.includes(categoryKey)
                          
                          return (
                            <label 
                              key={categoryKey} 
                              style={{
                                background: isSelected 
                                  ? `linear-gradient(135deg, ${modalityInfo.color}15, ${modalityInfo.color}10)`
                                  : colors.neutral[100],
                                padding: '10px',
                                borderRadius: '8px',
                                border: `1px solid ${isSelected ? modalityInfo.color : colors.border.light}`,
                                cursor: allowReschedule ? 'pointer' : 'default',
                                transition: 'all 0.2s',
                                display: 'flex',
                                flexDirection: 'column',
                                gap: '6px',
                                position: 'relative',
                                overflow: 'hidden'
                              }}
                              onMouseEnter={(e) => {
                                if (allowReschedule && !isSelected) {
                                  e.currentTarget.style.borderColor = modalityInfo.color
                                  e.currentTarget.style.transform = 'translateY(-2px)'
                                  e.currentTarget.style.boxShadow = '0 4px 8px rgba(0,0,0,0.1)'
                                }
                              }}
                              onMouseLeave={(e) => {
                                if (allowReschedule && !isSelected) {
                                  e.currentTarget.style.borderColor = colors.border.light
                                  e.currentTarget.style.transform = 'translateY(0)'
                                  e.currentTarget.style.boxShadow = 'none'
                                }
                              }}
                            >
                              {/* Badge de nivel */}
                              <div style={{
                                position: 'absolute',
                                top: '4px',
                                right: '4px',
                                background: modalityInfo.color,
                                color: 'white',
                                fontSize: '10px',
                                padding: '2px 6px',
                                borderRadius: '4px',
                                fontWeight: 600
                              }}>
                                {category.code}
                              </div>
                              
                              <div style={{ display: 'flex', alignItems: 'flex-start', gap: '6px' }}>
                                {allowReschedule && (
                                  <input
                                    type="checkbox"
                                    checked={isSelected}
                                    onChange={(e) => {
                                      if (e.target.checked) {
                                        setSelectedCategories([...selectedCategories, categoryKey])
                                      } else {
                                        setSelectedCategories(selectedCategories.filter(key => key !== categoryKey))
                                      }
                                    }}
                                    style={{ 
                                      marginTop: '2px',
                                      accentColor: modalityInfo.color,
                                      cursor: 'pointer'
                                    }}
                                  />
                                )}
                                <div style={{ flex: 1 }}>
                                  <div style={{ 
                                    fontSize: '13px', 
                                    fontWeight: 600, 
                                    color: colors.text.primary,
                                    marginBottom: '4px'
                                  }}>
                                    {category.name}
                                  </div>
                                  <div style={{ 
                                    fontSize: '11px', 
                                    color: colors.text.secondary,
                                    lineHeight: '1.4'
                                  }}>
                                    {allowReschedule ? (
                                      <div style={{ display: 'flex', flexDirection: 'column', gap: '2px' }}>
                                        <span>{allCategoryMatches.length} partidos</span>
                                        {scheduledMatches > 0 && (
                                          <span style={{ 
                                            color: colors.accent[600],
                                            fontWeight: 500
                                          }}>
                                            ✓ {scheduledMatches} listos
                                          </span>
                                        )}
                                      </div>
                                    ) : (
                                      <span style={{ 
                                        color: colors.warning[600],
                                        fontWeight: 500
                                      }}>
                                        {unprogrammedMatches.length} pendientes
                                      </span>
                                    )}
                                  </div>
                                </div>
                              </div>
                            </label>
                          )
                        })}
                                  </div>
                                </div>
                              )
                            })}
                          </div>
                        )
                      })()}
                    </>
                  )
                })()}
              </div>
            </div>

              {/* Configuración de horarios */}
              <form onSubmit={(e) => {
                e.preventDefault()
                const formData = new FormData(e.currentTarget)
                processAutoSchedule(formData)
              }}>
                <div style={{ marginBottom: '24px' }}>
                  <label style={{ display: 'block', fontSize: '14px', fontWeight: 500, marginBottom: '12px', color: colors.text.primary }}>
                    ¿Cuándo programar los partidos?
                  </label>
                  <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: '12px' }}>
                    {(() => {
                      const tournamentStart = new Date(tournamentData?.tournament?.startDate || new Date())
                      const tournamentEnd = new Date(tournamentData?.tournament?.endDate || new Date(Date.now() + 7 * 24 * 60 * 60 * 1000))
                      const today = new Date()
                      
                      const dateOptions = []
                      
                      // Hoy (si está dentro del torneo)
                      if (today >= tournamentStart && today <= tournamentEnd) {
                        dateOptions.push({
                          value: today.toISOString().split('T')[0],
                          label: 'Hoy',
                          description: today.toLocaleDateString('es-MX', { weekday: 'long', day: 'numeric', month: 'long' }),
                          recommended: true
                        })
                      }
                      
                      // Mañana (si está dentro del torneo)
                      const tomorrow = new Date(today)
                      tomorrow.setDate(today.getDate() + 1)
                      if (tomorrow >= tournamentStart && tomorrow <= tournamentEnd) {
                        dateOptions.push({
                          value: tomorrow.toISOString().split('T')[0],
                          label: 'Mañana',
                          description: tomorrow.toLocaleDateString('es-MX', { weekday: 'long', day: 'numeric', month: 'long' }),
                          recommended: false
                        })
                      }
                      
                      // Siguiente fin de semana (sábado)
                      const nextSaturday = new Date(today)
                      nextSaturday.setDate(today.getDate() + (6 - today.getDay()) % 7)
                      if (nextSaturday <= tournamentEnd) {
                        dateOptions.push({
                          value: nextSaturday.toISOString().split('T')[0],
                          label: 'Este Sábado',
                          description: nextSaturday.toLocaleDateString('es-MX', { weekday: 'long', day: 'numeric', month: 'long' }),
                          recommended: false
                        })
                      }
                      
                      // Domingo
                      const nextSunday = new Date(nextSaturday)
                      nextSunday.setDate(nextSaturday.getDate() + 1)
                      if (nextSunday <= tournamentEnd) {
                        dateOptions.push({
                          value: nextSunday.toISOString().split('T')[0],
                          label: 'Este Domingo',
                          description: nextSunday.toLocaleDateString('es-MX', { weekday: 'long', day: 'numeric', month: 'long' }),
                          recommended: false
                        })
                      }
                      
                      return dateOptions.map((option, index) => (
                        <label key={option.value} style={{
                          display: 'block',
                          padding: '16px',
                          borderRadius: '10px',
                          border: `2px solid ${option.recommended ? colors.accent[600] : colors.border.light}`,
                          background: option.recommended ? `${colors.accent[600]}20` : 'white',
                          cursor: 'pointer',
                          transition: 'all 0.2s',
                          position: 'relative'
                        }}>
                          <input
                            type="radio"
                            name="schedule-date"
                            value={option.value}
                            defaultChecked={index === 0}
                            style={{ marginRight: '12px' }}
                          />
                          <div style={{ display: 'inline-block' }}>
                            <div style={{ 
                              fontSize: '16px', 
                              fontWeight: 600, 
                              color: colors.text.primary,
                              marginBottom: '4px',
                              display: 'flex',
                              alignItems: 'center',
                              gap: '8px'
                            }}>
                              {option.label}
                              {option.recommended && (
                                <span style={{
                                  padding: '2px 6px',
                                  borderRadius: '4px',
                                  background: colors.accent[600],
                                  color: 'white',
                                  fontSize: '10px',
                                  fontWeight: 500
                                }}>
                                  RECOMENDADO
                                </span>
                              )}
                            </div>
                            <div style={{ fontSize: '13px', color: colors.text.secondary }}>
                              {option.description}
                            </div>
                          </div>
                        </label>
                      ))
                    })()}
                    
                    {/* Opción personalizada */}
                    <label style={{
                      display: 'block',
                      padding: '16px',
                      borderRadius: '10px',
                      border: `2px solid ${colors.border.light}`,
                      background: 'white',
                      cursor: 'pointer',
                      transition: 'all 0.2s'
                    }}>
                      <input
                        type="radio"
                        name="schedule-date"
                        value="custom"
                        style={{ marginRight: '12px' }}
                        onChange={(e) => {
                          if (e.target.checked) {
                            const customDateInput = document.getElementById('custom-date-input') as HTMLInputElement
                            if (customDateInput) {
                              customDateInput.style.display = 'block'
                              customDateInput.focus()
                            }
                          }
                        }}
                      />
                      <div style={{ display: 'inline-block' }}>
                        <div style={{ fontSize: '16px', fontWeight: 600, color: colors.text.primary, marginBottom: '4px' }}>
                          Fecha Personalizada
                        </div>
                        <div style={{ fontSize: '13px', color: colors.text.secondary }}>
                          Elegir otra fecha específica
                        </div>
                        <input
                          id="custom-date-input"
                          type="date"
                          name="custom-schedule-date"
                          min={tournamentData?.tournament?.startDate?.split('T')[0]}
                          max={tournamentData?.tournament?.endDate?.split('T')[0]}
                          style={{
                            display: 'none',
                            marginTop: '8px',
                            padding: '8px',
                            borderRadius: '6px',
                            border: `1px solid ${colors.border.light}`,
                            fontSize: '13px',
                            width: '100%'
                          }}
                        />
                      </div>
                    </label>
                  </div>
                </div>

                <div style={{
                  background: colors.accent[600],
                  color: 'white',
                  padding: '16px',
                  borderRadius: '10px',
                  marginBottom: '24px'
                }}>
                  <div style={{ display: 'flex', alignItems: 'center', gap: '8px', marginBottom: '8px' }}>
                    <Settings size={16} />
                    <span style={{ fontWeight: 600, fontSize: '14px' }}>Vista Previa</span>
                  </div>
                  <p style={{ fontSize: '13px', margin: 0, opacity: 0.9 }}>
                    Se programarán automáticamente todos los partidos seleccionados distribuyendo las canchas disponibles de manera óptima.
                    Los partidos se asignarán respetando los horarios y duraciones configuradas.
                  </p>
                </div>

                <div style={{ display: 'flex', gap: '12px', justifyContent: 'flex-end' }}>
                  <button
                    type="button"
                    onClick={() => setShowAutoScheduleWizard(false)}
                    style={{
                      padding: '12px 20px',
                      borderRadius: '8px',
                      border: `1px solid ${colors.border.light}`,
                      background: 'white',
                      color: colors.text.primary,
                      fontSize: '14px',
                      cursor: 'pointer'
                    }}
                  >
                    Cancelar
                  </button>
                  <button
                    type="submit"
                    disabled={allowReschedule && selectedCategories.length === 0}
                    style={{
                      padding: '12px 20px',
                      borderRadius: '8px',
                      background: (allowReschedule && selectedCategories.length === 0) 
                        ? colors.neutral[400] 
                        : colors.primary[600],
                      color: 'white',
                      border: 'none',
                      fontSize: '14px',
                      cursor: (allowReschedule && selectedCategories.length === 0) 
                        ? 'not-allowed' 
                        : 'pointer',
                      display: 'flex',
                      alignItems: 'center',
                      gap: '6px',
                      opacity: (allowReschedule && selectedCategories.length === 0) ? 0.6 : 1
                    }}
                  >
                    <Settings size={16} />
                    {allowReschedule && selectedCategories.length === 0 
                      ? 'Selecciona categorías' 
                      : 'Programar Automáticamente'
                    }
                  </button>
                </div>
              </form>
          </div>
        </Modal>
      )}

      {/* Modal de Detalles del Partido */}
      {showMatchDetailsModal && selectedMatchDetails && (
        <Modal
          isOpen={showMatchDetailsModal}
          onClose={() => {
            setShowMatchDetailsModal(false);
            setSelectedMatchDetails(null);
          }}
          title="Detalles del Partido"
          size="lg"
        >
          <div style={{ padding: '20px' }}>
            {/* Header del partido */}
            <div style={{
              background: selectedMatchDetails.status === 'COMPLETED' ? 
                'linear-gradient(135deg, #6B7280, #9CA3AF)' :
                selectedMatchDetails.status === 'IN_PROGRESS' ?
                'linear-gradient(135deg, #16A34A, #A4DF4E)' :
                'linear-gradient(135deg, #3B82F6, #60A5FA)',
              padding: '20px',
              borderRadius: '12px',
              color: 'white',
              marginBottom: '20px'
            }}>
              <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', marginBottom: '12px' }}>
                <span style={{
                  fontSize: '12px',
                  fontWeight: 600,
                  textTransform: 'uppercase',
                  background: 'rgba(255,255,255,0.2)',
                  padding: '4px 8px',
                  borderRadius: '6px'
                }}>
                  {selectedMatchDetails.round}
                </span>
                <span style={{
                  fontSize: '12px',
                  fontWeight: 600,
                  background: 'rgba(255,255,255,0.2)',
                  padding: '4px 8px',
                  borderRadius: '6px'
                }}>
                  {selectedMatchDetails.status === 'COMPLETED' ? 'COMPLETADO' :
                   selectedMatchDetails.status === 'IN_PROGRESS' ? 'EN JUEGO' : 'PROGRAMADO'}
                </span>
              </div>
              
              <div style={{ textAlign: 'center', marginBottom: '20px' }}>
                <h2 style={{ fontSize: '24px', fontWeight: 700, margin: '0 0 16px 0' }}>
                  {selectedMatchDetails.team1Name}
                </h2>
                <div style={{ fontSize: '14px', fontWeight: 500, marginBottom: '16px' }}>
                  VS
                </div>
                <h2 style={{ fontSize: '24px', fontWeight: 700, margin: 0 }}>
                  {selectedMatchDetails.team2Name}
                </h2>
              </div>

              {/* Marcador si existe */}
              {(selectedMatchDetails.team1Score !== null || selectedMatchDetails.team2Score !== null) && (
                <div style={{
                  display: 'flex',
                  justifyContent: 'center',
                  alignItems: 'center',
                  gap: '24px',
                  padding: '16px',
                  background: 'rgba(0,0,0,0.2)',
                  borderRadius: '8px'
                }}>
                  <span style={{ fontSize: '36px', fontWeight: 700 }}>
                    {selectedMatchDetails.team1Score || 0}
                  </span>
                  <span style={{ fontSize: '20px' }}>-</span>
                  <span style={{ fontSize: '36px', fontWeight: 700 }}>
                    {selectedMatchDetails.team2Score || 0}
                  </span>
                </div>
              )}
            </div>

            {/* Información del partido */}
            <div style={{ display: 'grid', gridTemplateColumns: 'repeat(2, 1fr)', gap: '16px', marginBottom: '20px' }}>
              <div style={{
                padding: '16px',
                background: '#f9fafb',
                borderRadius: '8px',
                border: '1px solid #e5e7eb'
              }}>
                <div style={{ display: 'flex', alignItems: 'center', gap: '8px', marginBottom: '4px' }}>
                  <MapPin size={16} style={{ color: '#6B7280' }} />
                  <span style={{ fontSize: '12px', color: '#6B7280', fontWeight: 600 }}>CANCHA</span>
                </div>
                <p style={{ fontSize: '16px', fontWeight: 600, margin: 0 }}>
                  Cancha {selectedMatchDetails.courtNumber || 'Por definir'}
                </p>
              </div>

              <div style={{
                padding: '16px',
                background: '#f9fafb',
                borderRadius: '8px',
                border: '1px solid #e5e7eb'
              }}>
                <div style={{ display: 'flex', alignItems: 'center', gap: '8px', marginBottom: '4px' }}>
                  <Clock size={16} style={{ color: '#6B7280' }} />
                  <span style={{ fontSize: '12px', color: '#6B7280', fontWeight: 600 }}>HORARIO</span>
                </div>
                <p style={{ fontSize: '16px', fontWeight: 600, margin: 0 }}>
                  {selectedMatchDetails.scheduledAt ? 
                    new Date(selectedMatchDetails.scheduledAt).toLocaleString('es-MX', {
                      hour: '2-digit',
                      minute: '2-digit',
                      day: 'numeric',
                      month: 'short'
                    }) : 
                    selectedMatchDetails.startTime ?
                    new Date(selectedMatchDetails.startTime).toLocaleString('es-MX', {
                      hour: '2-digit',
                      minute: '2-digit',
                      day: 'numeric',
                      month: 'short'
                    }) :
                    'Por definir'}
                </p>
              </div>

              {selectedMatchDetails.category && (
                <div style={{
                  padding: '16px',
                  background: '#f9fafb',
                  borderRadius: '8px',
                  border: '1px solid #e5e7eb'
                }}>
                  <div style={{ display: 'flex', alignItems: 'center', gap: '8px', marginBottom: '4px' }}>
                    <Trophy size={16} style={{ color: '#6B7280' }} />
                    <span style={{ fontSize: '12px', color: '#6B7280', fontWeight: 600 }}>CATEGORÍA</span>
                  </div>
                  <p style={{ fontSize: '16px', fontWeight: 600, margin: 0 }}>
                    {selectedMatchDetails.category}
                  </p>
                </div>
              )}

              {selectedMatchDetails.duration && (
                <div style={{
                  padding: '16px',
                  background: '#f9fafb',
                  borderRadius: '8px',
                  border: '1px solid #e5e7eb'
                }}>
                  <div style={{ display: 'flex', alignItems: 'center', gap: '8px', marginBottom: '4px' }}>
                    <Clock size={16} style={{ color: '#6B7280' }} />
                    <span style={{ fontSize: '12px', color: '#6B7280', fontWeight: 600 }}>DURACIÓN</span>
                  </div>
                  <p style={{ fontSize: '16px', fontWeight: 600, margin: 0 }}>
                    {selectedMatchDetails.duration} minutos
                  </p>
                </div>
              )}
            </div>

            {/* Información de jugadores si está disponible */}
            {(selectedMatchDetails.team1Player1 || selectedMatchDetails.team2Player1) && (
              <div style={{ marginBottom: '20px' }}>
                <h3 style={{ fontSize: '14px', fontWeight: 600, color: '#6B7280', marginBottom: '12px' }}>
                  JUGADORES
                </h3>
                <div style={{ display: 'grid', gridTemplateColumns: 'repeat(2, 1fr)', gap: '16px' }}>
                  <div style={{
                    padding: '16px',
                    background: '#f9fafb',
                    borderRadius: '8px',
                    border: '1px solid #e5e7eb'
                  }}>
                    <p style={{ fontSize: '14px', fontWeight: 600, marginBottom: '8px' }}>
                      {selectedMatchDetails.team1Name}
                    </p>
                    <p style={{ fontSize: '13px', color: '#4B5563', margin: 0 }}>
                      {selectedMatchDetails.team1Player1 || 'Jugador 1'}
                      {selectedMatchDetails.team1Player2 && (
                        <><br />{selectedMatchDetails.team1Player2}</>
                      )}
                    </p>
                  </div>
                  <div style={{
                    padding: '16px',
                    background: '#f9fafb',
                    borderRadius: '8px',
                    border: '1px solid #e5e7eb'
                  }}>
                    <p style={{ fontSize: '14px', fontWeight: 600, marginBottom: '8px' }}>
                      {selectedMatchDetails.team2Name}
                    </p>
                    <p style={{ fontSize: '13px', color: '#4B5563', margin: 0 }}>
                      {selectedMatchDetails.team2Player1 || 'Jugador 1'}
                      {selectedMatchDetails.team2Player2 && (
                        <><br />{selectedMatchDetails.team2Player2}</>
                      )}
                    </p>
                  </div>
                </div>
              </div>
            )}

            {/* Sets detallados si existen */}
            {selectedMatchDetails.team1Sets && selectedMatchDetails.team1Sets.length > 0 && (
              <div style={{ marginBottom: '20px' }}>
                <h3 style={{ fontSize: '14px', fontWeight: 600, color: '#6B7280', marginBottom: '12px' }}>
                  DETALLE DE SETS
                </h3>
                <div style={{
                  padding: '16px',
                  background: '#f9fafb',
                  borderRadius: '8px',
                  border: '1px solid #e5e7eb'
                }}>
                  {selectedMatchDetails.team1Sets.map((set: any, index: number) => (
                    <div key={index} style={{
                      display: 'flex',
                      justifyContent: 'space-between',
                      alignItems: 'center',
                      padding: '8px 0',
                      borderBottom: index < selectedMatchDetails.team1Sets.length - 1 ? '1px solid #e5e7eb' : 'none'
                    }}>
                      <span style={{ fontSize: '14px', fontWeight: 500 }}>Set {index + 1}</span>
                      <span style={{ fontSize: '16px', fontWeight: 600 }}>
                        {set.games} - {selectedMatchDetails.team2Sets[index]?.games || 0}
                      </span>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* Botones de acción */}
            <div style={{ display: 'flex', gap: '12px', justifyContent: 'flex-end' }}>
              {selectedMatchDetails.status === 'SCHEDULED' && (
                <button
                  style={{
                    padding: '10px 20px',
                    background: '#16A34A',
                    color: 'white',
                    border: 'none',
                    borderRadius: '8px',
                    fontWeight: 500,
                    cursor: 'pointer',
                    transition: 'all 0.2s'
                  }}
                  onMouseEnter={(e) => e.currentTarget.style.background = '#15803d'}
                  onMouseLeave={(e) => e.currentTarget.style.background = '#16A34A'}
                >
                  Iniciar Partido
                </button>
              )}
              {selectedMatchDetails.status === 'IN_PROGRESS' && (
                <button
                  style={{
                    padding: '10px 20px',
                    background: '#DC2626',
                    color: 'white',
                    border: 'none',
                    borderRadius: '8px',
                    fontWeight: 500,
                    cursor: 'pointer',
                    transition: 'all 0.2s'
                  }}
                  onMouseEnter={(e) => e.currentTarget.style.background = '#991b1b'}
                  onMouseLeave={(e) => e.currentTarget.style.background = '#DC2626'}
                >
                  Registrar Resultado
                </button>
              )}
              <button
                onClick={() => {
                  setShowMatchDetailsModal(false);
                  setSelectedMatchDetails(null);
                }}
                style={{
                  padding: '10px 20px',
                  background: '#6B7280',
                  color: 'white',
                  border: 'none',
                  borderRadius: '8px',
                  fontWeight: 500,
                  cursor: 'pointer',
                  transition: 'all 0.2s'
                }}
                onMouseEnter={(e) => e.currentTarget.style.background = '#4B5563'}
                onMouseLeave={(e) => e.currentTarget.style.background = '#6B7280'}
              >
                Cerrar
              </button>
            </div>
          </div>
        </Modal>
      )}

      {/* Notificación toast */}
      {notification && (
        <div style={{
          position: 'fixed',
          top: '24px',
          right: '24px',
          padding: '12px 16px',
          background: notification.type === 'success' ? '#16A34A' : 
                     notification.type === 'warning' ? '#F59E0B' : '#3B82F6',
          color: 'white',
          borderRadius: '8px',
          boxShadow: '0 4px 12px rgba(0,0,0,0.15)',
          display: 'flex',
          alignItems: 'center',
          gap: '8px',
          zIndex: 1000,
          animation: 'slideIn 0.3s ease-out',
          fontSize: '14px',
          fontWeight: 500,
          maxWidth: '300px'
        }}>
          {notification.type === 'success' ? <CheckCircle size={18} /> : 
           notification.type === 'warning' ? <AlertTriangle size={18} /> : <Bell size={18} />}
          {notification.message}
        </div>
      )}
    </div>
    </>
  )
}