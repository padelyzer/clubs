'use client'

import { useState, useEffect } from 'react'

interface Club {
  id: string
  name: string
  email: string
  stripeAccountId: string | null
  stripeOnboardingCompleted: boolean
  stripeChargesEnabled: boolean
  stripePayoutsEnabled: boolean
  stripeDetailsSubmitted: boolean
  stripeRequirements: string | null
  stripeCommissionRate: number
}

interface StripeSettingsProps {
  club: Club
}

interface AccountStatus {
  hasAccount: boolean
  accountId?: string
  onboardingCompleted: boolean
  chargesEnabled: boolean
  payoutsEnabled: boolean
  detailsSubmitted: boolean
  requirements?: any[]
  accountType?: string
  country?: string
  defaultCurrency?: string
}

export function StripeSettings({ club }: StripeSettingsProps) {
  const [accountStatus, setAccountStatus] = useState<AccountStatus | null>(null)
  const [loading, setLoading] = useState(true)
  const [dashboardLoading, setDashboardLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)

  useEffect(() => {
    fetchAccountStatus()
  }, [])

  async function fetchAccountStatus() {
    try {
      const response = await fetch('/api/stripe/connect/status')
      const data = await response.json()

      if (response.ok) {
        setAccountStatus(data)
      } else {
        setError(data.error || 'Error al obtener estado de cuenta')
      }
    } catch (err) {
      setError('Error de conexión')
    } finally {
      setLoading(false)
    }
  }

  async function openStripeDashboard() {
    setDashboardLoading(true)
    setError(null)

    try {
      const response = await fetch('/api/stripe/connect/dashboard', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        }
      })

      const data = await response.json()

      if (response.ok && data.dashboardUrl) {
        window.open(data.dashboardUrl, '_blank')
      } else {
        setError(data.error || 'Error al acceder al dashboard')
      }
    } catch (err) {
      setError('Error al abrir dashboard')
    } finally {
      setDashboardLoading(false)
    }
  }

  if (loading) {
    return (
      <div className="bg-white rounded-lg shadow-lg p-6">
        <div className="animate-pulse">
          <div className="h-4 bg-gray-200 rounded w-1/4 mb-4"></div>
          <div className="h-8 bg-gray-200 rounded w-1/2 mb-4"></div>
          <div className="h-4 bg-gray-200 rounded w-3/4"></div>
        </div>
      </div>
    )
  }

  if (!accountStatus) {
    return (
      <div className="bg-white rounded-lg shadow-lg p-6">
        <div className="text-center text-red-600">
          Error al cargar información de la cuenta
        </div>
      </div>
    )
  }

  const getStatusColor = (enabled: boolean) => enabled ? 'text-green-600' : 'text-red-600'
  const getStatusIcon = (enabled: boolean) => enabled ? '✅' : '❌'

  return (
    <div className="space-y-6">
      {/* Account Status Card */}
      <div className="bg-white rounded-lg shadow-lg overflow-hidden">
        <div className="p-6">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-lg font-semibold text-gray-900">Estado de la Cuenta Stripe</h3>
            <div className="flex items-center space-x-2">
              {accountStatus.onboardingCompleted && accountStatus.chargesEnabled ? (
                <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                  Activa
                </span>
              ) : (
                <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">
                  Configuración pendiente
                </span>
              )}
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-3">
              <div className="flex items-center justify-between">
                <span className="text-sm font-medium text-gray-500">Pagos habilitados</span>
                <span className={`text-sm font-medium ${getStatusColor(accountStatus.chargesEnabled)}`}>
                  {getStatusIcon(accountStatus.chargesEnabled)} {accountStatus.chargesEnabled ? 'Sí' : 'No'}
                </span>
              </div>
              <div className="flex items-center justify-between">
                <span className="text-sm font-medium text-gray-500">Transferencias habilitadas</span>
                <span className={`text-sm font-medium ${getStatusColor(accountStatus.payoutsEnabled)}`}>
                  {getStatusIcon(accountStatus.payoutsEnabled)} {accountStatus.payoutsEnabled ? 'Sí' : 'No'}
                </span>
              </div>
            </div>
            <div className="space-y-3">
              <div className="flex items-center justify-between">
                <span className="text-sm font-medium text-gray-500">Información completa</span>
                <span className={`text-sm font-medium ${getStatusColor(accountStatus.detailsSubmitted)}`}>
                  {getStatusIcon(accountStatus.detailsSubmitted)} {accountStatus.detailsSubmitted ? 'Sí' : 'No'}
                </span>
              </div>
              <div className="flex items-center justify-between">
                <span className="text-sm font-medium text-gray-500">Tipo de cuenta</span>
                <span className="text-sm font-medium text-gray-900">
                  {accountStatus.accountType || 'Express'}
                </span>
              </div>
            </div>
          </div>

          {accountStatus.requirements && accountStatus.requirements.length > 0 && (
            <div className="mt-4 p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
              <h4 className="text-sm font-medium text-yellow-800 mb-2">
                Información requerida para completar configuración:
              </h4>
              <ul className="text-sm text-yellow-700 space-y-1">
                {accountStatus.requirements.map((req, index) => (
                  <li key={index}>• {req}</li>
                ))}
              </ul>
            </div>
          )}
        </div>
      </div>

      {/* Actions Card */}
      <div className="bg-white rounded-lg shadow-lg overflow-hidden">
        <div className="p-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">Acciones</h3>
          
          <div className="space-y-4">
            <div className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
              <div>
                <h4 className="text-sm font-medium text-gray-900">Dashboard de Stripe</h4>
                <p className="text-sm text-gray-500">
                  Ver transacciones, configurar cuenta bancaria y acceder a reportes
                </p>
              </div>
              <button
                onClick={openStripeDashboard}
                disabled={dashboardLoading || !accountStatus.onboardingCompleted}
                className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {dashboardLoading ? (
                  <span className="flex items-center">
                    <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                      <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    Abriendo...
                  </span>
                ) : (
                  'Abrir Dashboard'
                )}
              </button>
            </div>

            <div className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
              <div>
                <h4 className="text-sm font-medium text-gray-900">Comisión de plataforma</h4>
                <p className="text-sm text-gray-500">
                  Comisión actual: {(club.stripeCommissionRate / 100)}% por transacción
                </p>
              </div>
              <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                {(club.stripeCommissionRate / 100)}%
              </span>
            </div>
          </div>
        </div>
      </div>

      {/* Information Card */}
      <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
        <h4 className="text-sm font-medium text-blue-900 mb-2">Información Importante</h4>
        <ul className="text-sm text-blue-800 space-y-1">
          <li>• Los pagos se procesan directamente a tu cuenta bancaria</li>
          <li>• Stripe cobra una comisión del 3.6% + $3 MXN por transacción</li>
          <li>• Padelyzer cobra una comisión adicional del {(club.stripeCommissionRate / 100)}%</li>
          <li>• Las transferencias se realizan automáticamente cada 2 días hábiles</li>
          <li>• Puedes ver todas las transacciones en el dashboard de Stripe</li>
        </ul>
      </div>

      {error && (
        <div className="bg-red-50 border border-red-200 rounded-lg p-4">
          <div className="flex">
            <div className="flex-shrink-0">
              <svg className="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
              </svg>
            </div>
            <div className="ml-3">
              <h3 className="text-sm font-medium text-red-800">Error</h3>
              <div className="mt-2 text-sm text-red-700">
                <p>{error}</p>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}