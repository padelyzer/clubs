import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/config/prisma'
import { requireAuthAPI } from '@/lib/auth/actions'
import { addDays, format, isAfter, isBefore, parseISO } from 'date-fns'
import { sendWhatsAppMessage } from '@/lib/whatsapp/send-message'

// GET - Send reminder notifications for upcoming classes
export async function GET(request: NextRequest) {
  try {
    const session = await requireAuthAPI()
    
    if (!session) {
      return NextResponse.json(
        { success: false, error: 'No autorizado' },
        { status: 401 }
      )
    }
    const { searchParams } = new URL(request.url)
    const type = searchParams.get('type') || 'reminder'
    
    if (type === 'reminder') {
      // Find classes happening tomorrow
      const tomorrow = addDays(new Date(), 1)
      const startOfTomorrow = new Date(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate())
      const endOfTomorrow = addDays(startOfTomorrow, 1)
      
      const upcomingClasses = await prisma.class.findMany({
        where: {
          clubId: session.clubId,
          date: {
            gte: startOfTomorrow,
            lt: endOfTomorrow
          },
          status: 'SCHEDULED'
        },
        include: {
          bookings: {
            where: {
              status: 'ENROLLED'
            }
          },
          instructor: true,
          court: true
        }
      })
      
      const notifications = []
      
      for (const cls of upcomingClasses) {
        for (const booking of cls.bookings) {
          // Check if reminder was already sent
          const existingNotification = await prisma.notification.findFirst({
            where: {
              classId: cls.id,
              studentId: booking.id,
              type: 'REMINDER',
              createdAt: {
                gte: new Date(new Date().setHours(0, 0, 0, 0))
              }
            }
          })
          
          if (!existingNotification && booking.playerPhone) {
            const message = `🎾 Recordatorio: Tienes clase "${cls.name}" mañana ${format(cls.date, 'dd/MM')} a las ${cls.startTime}. ${cls.courtId ? `Cancha: ${cls.courtId.name}` : ''} ${cls.instructorId ? `Instructor: ${cls.instructorId.name}` : ''}`
            
            const notification = await prisma.notification.create({
              data: {
                classId: cls.id,
                studentId: booking.id,
                studentPhone: booking.playerPhone,
                studentName: booking.playerName,
                type: 'REMINDER',
                message,
                status: 'pending'
              }
            })
            
            notifications.push(notification)
          }
        }
      }
      
      // Send notifications
      const results = []
      for (const notification of notifications) {
        try {
          await sendWhatsAppMessage({
            to: notification.playerPhone,
            message: notification.message
          })
          
          await prisma.notification.update({
            where: { id: notification.id },
            data: {
              status: 'sent',
              sentAt: new Date()
            }
          })
          
          results.push({ ...notification, status: 'sent' })
        } catch (error) {
          await prisma.notification.update({
            where: { id: notification.id },
            data: {
              status: 'failed',
              error: error instanceof Error ? error.message : 'Unknown error'
            }
          })
          
          results.push({ ...notification, status: 'failed' })
        }
      }
      
      return NextResponse.json({
        success: true,
        message: `Se enviaron ${results.filter(r => r.status === 'sent').length} recordatorios`,
        notifications: results
      })
      
    } else if (type === 'pending-payments') {
      // Find classes with pending payments
      const classesWithPendingPayments = await prisma.class.findMany({
        where: {
          clubId: session.clubId,
          status: { in: ['SCHEDULED', 'COMPLETED'] }
        },
        include: {
          bookings: {
            where: {
              paymentStatus: 'pending',
              status: 'ENROLLED'
            }
          }
        }
      })
      
      const notifications = []
      
      for (const cls of classesWithPendingPayments) {
        for (const booking of cls.bookings) {
          // Check if payment reminder was sent recently (last 3 days)
          const existingNotification = await prisma.notification.findFirst({
            where: {
              classId: cls.id,
              studentId: booking.id,
              type: 'PAYMENT_REMINDER',
              createdAt: {
                gte: addDays(new Date(), -3)
              }
            }
          })
          
          if (!existingNotification && booking.playerPhone) {
            const message = `💳 Recordatorio de pago: Tienes un pago pendiente de ${formatCurrency(booking.paidAmount / 100)} para la clase "${cls.name}". Por favor realiza tu pago para confirmar tu lugar.`
            
            const notification = await prisma.notification.create({
              data: {
                classId: cls.id,
                studentId: booking.id,
                studentPhone: booking.playerPhone,
                studentName: booking.playerName,
                type: 'PAYMENT_REMINDER',
                message,
                status: 'pending'
              }
            })
            
            notifications.push(notification)
          }
        }
      }
      
      // Send notifications
      const results = []
      for (const notification of notifications) {
        try {
          await sendWhatsAppMessage({
            to: notification.playerPhone,
            message: notification.message
          })
          
          await prisma.notification.update({
            where: { id: notification.id },
            data: {
              status: 'sent',
              sentAt: new Date()
            }
          })
          
          results.push({ ...notification, status: 'sent' })
        } catch (error) {
          await prisma.notification.update({
            where: { id: notification.id },
            data: {
              status: 'failed',
              error: error instanceof Error ? error.message : 'Unknown error'
            }
          })
          
          results.push({ ...notification, status: 'failed' })
        }
      }
      
      return NextResponse.json({
        success: true,
        message: `Se enviaron ${results.filter(r => r.status === 'sent').length} recordatorios de pago`,
        notifications: results
      })
    }
    
    return NextResponse.json({
      success: false,
      error: 'Tipo de notificación no válido'
    })
    
  } catch (error) {
    console.error('Error sending notifications:', error)
    return NextResponse.json(
      { success: false, error: 'Error al enviar notificaciones' },
      { status: 500 }
    )
  }
}

// POST - Send custom notification
export async function POST(request: NextRequest) {
  try {
    const session = await requireAuthAPI()
    
    if (!session) {
      return NextResponse.json(
        { success: false, error: 'No autorizado' },
        { status: 401 }
      )
    }
    const body = await request.json()
    const { classId, message, studentIds } = body
    
    if (!classId || !message) {
      return NextResponse.json(
        { success: false, error: 'Faltan datos requeridos' },
        { status: 400 }
      )
    }
    
    // Get class and students
    const cls = await prisma.class.findUnique({
      where: { id: classId },
      include: {
        bookings: {
          where: studentIds ? {
            id: { in: studentIds }
          } : undefined
        }
      }
    })
    
    if (!cls) {
      return NextResponse.json(
        { success: false, error: 'Clase no encontrada' },
        { status: 404 }
      )
    }
    
    const notifications = []
    const results = []
    
    for (const booking of cls.bookings) {
      if (booking.playerPhone) {
        const notification = await prisma.notification.create({
          data: {
            classId: cls.id,
            studentId: booking.id,
            studentPhone: booking.playerPhone,
            studentName: booking.playerName,
            type: 'CUSTOM',
            message,
            status: 'pending'
          }
        })
        
        try {
          await sendWhatsAppMessage({
            to: booking.playerPhone,
            message
          })
          
          await prisma.notification.update({
            where: { id: notification.id },
            data: {
              status: 'sent',
              sentAt: new Date()
            }
          })
          
          results.push({ ...notification, status: 'sent' })
        } catch (error) {
          await prisma.notification.update({
            where: { id: notification.id },
            data: {
              status: 'failed',
              error: error instanceof Error ? error.message : 'Unknown error'
            }
          })
          
          results.push({ ...notification, status: 'failed' })
        }
      }
    }
    
    return NextResponse.json({
      success: true,
      message: `Mensaje enviado a ${results.filter(r => r.status === 'sent').length} de ${results.length} estudiantes`,
      notifications: results
    })
    
  } catch (error) {
    console.error('Error sending custom notification:', error)
    return NextResponse.json(
      { success: false, error: 'Error al enviar notificación' },
      { status: 500 }
    )
  }
}

function formatCurrency(amount: number): string {
  return new Intl.NumberFormat('es-MX', {
    style: 'currency',
    currency: 'MXN'
  }).format(amount)
}