import { NextRequest, NextResponse } from 'next/server'
import { PrismaClient } from '@prisma/client'
import bcrypt from 'bcryptjs'

const prisma = new PrismaClient()

export async function POST(request: NextRequest) {
  try {
    console.log('üîê Test login endpoint called')
    
    const { email, password } = await request.json()
    
    if (!email || !password) {
      return NextResponse.json(
        { error: 'Email y password son requeridos' },
        { status: 400 }
      )
    }

    console.log('üîç Buscando usuario:', email)

    // Buscar usuario
    const user = await prisma.user.findUnique({
      where: { email }
    })

    if (!user) {
      console.log('‚ùå Usuario no encontrado')
      return NextResponse.json(
        { error: 'Usuario no encontrado' },
        { status: 404 }
      )
    }

    console.log('‚úÖ Usuario encontrado:', user.email, 'Club:', user.clubId)

    // Verificar password
    const isValidPassword = await bcrypt.compare(password, user.password)
    if (!isValidPassword) {
      console.log('‚ùå Password incorrecto')
      return NextResponse.json(
        { error: 'Password incorrecto' },
        { status: 401 }
      )
    }

    if (!user.active) {
      console.log('‚ùå Usuario inactivo')
      return NextResponse.json(
        { error: 'Usuario inactivo' },
        { status: 403 }
      )
    }

    console.log('‚úÖ Login exitoso')

    // Buscar club si tiene clubId
    let club = null
    if (user.clubId) {
      club = await prisma.Club.findUnique({
        where: { id: user.clubId }
      })
    }

    // Retornar informaci√≥n del usuario (sin token por ahora)
    return NextResponse.json({
      success: true,
      user: {
        id: user.id,
        email: user.email,
        name: user.name,
        role: user.role,
        clubId: user.clubId,
        club: club
      },
      message: 'Login exitoso. Ahora puedes probar la interfaz.'
    })

  } catch (error) {
    console.error('‚ùå Error en test-login:', error)
    const errorMessage = error instanceof Error ? error.message : 'Unknown error'
    return NextResponse.json(
      { error: `Error interno del servidor: ${errorMessage}` },
      { status: 500 }
    )
  }
}
