import { NextRequest, NextResponse } from 'next/server'
import { requireAuthAPI } from '@/lib/auth/actions'
import { prisma } from '@/lib/config/prisma'
import { z } from 'zod'

// Update transaction schema
const updateTransactionSchema = z.object({
  type: z.enum(['INCOME', 'EXPENSE', 'REFUND']).optional(),
  category: z.enum([
    'BOOKING', 'CLASS', 'TOURNAMENT', 'MEMBERSHIP', 'EQUIPMENT',
    'MAINTENANCE', 'SALARY', 'UTILITIES', 'RENT', 'MARKETING', 'OTHER'
  ]).optional(),
  amount: z.number().min(1).optional(),
  description: z.string().min(1).max(500).optional(),
  reference: z.string().optional(),
  notes: z.string().optional()
})

// GET - Get single transaction
export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const paramData = await params
    const { id } = paramData
    
    const session = await requireAuthAPI()
    
    if (!session) {
      return NextResponse.json(
        { success: false, error: 'No autorizado' },
        { status: 401 }
      )
    }
    
    const transaction = await prisma.transaction.findFirst({
      where: {
        id: id,
        clubId: session.clubId
      },
      include: {
        Booking: {
          select: {
            playerName: true,
            Court: {
              select: { name: true }
            },
            Payment: {
              select: {
                method: true,
                status: true
              },
              orderBy: {
                createdAt: 'desc'
              },
              take: 1
            }
          }
        },
        Player: {
          select: {
            name: true
          }
        }
      }
    })

    if (!transaction) {
      return NextResponse.json(
        { success: false, error: 'Transacción no encontrada' },
        { status: 404 }
      )
    }

    return NextResponse.json({ success: true, transaction })

  } catch (error) {
    console.error('Error fetching transaction:', error)
    return NextResponse.json(
      { success: false, error: 'Error al obtener transacción' },
      { status: 500 }
    )
  }
}

// PATCH - Update transaction
export async function PATCH(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const paramData = await params
    const { id } = paramData
    
    const session = await requireAuthAPI()
    
    if (!session) {
      return NextResponse.json(
        { success: false, error: 'No autorizado' },
        { status: 401 }
      )
    }
    const body = await request.json()
    
    // Validate input
    const validatedData = updateTransactionSchema.parse(body)
    
    // Check if transaction exists and belongs to club
    const existingTransaction = await prisma.transaction.findFirst({
      where: {
        id: id,
        clubId: session.clubId
      }
    })

    if (!existingTransaction) {
      return NextResponse.json(
        { success: false, error: 'Transacción no encontrada' },
        { status: 404 }
      )
    }

    // Update transaction
    const updatedTransaction = await prisma.transaction.update({
      where: { id: id },
      data: {
        ...validatedData},
      include: {
        Booking: {
          select: {
            playerName: true,
            Court: {
              select: { name: true }
            }
          }
        }
      }
    })

    return NextResponse.json({ 
      success: true, 
      transaction: updatedTransaction,
      message: 'Transacción actualizada exitosamente' 
    })

  } catch (error) {
    console.error('Error updating transaction:', error)
    
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { success: false, error: 'Datos inválidos', details: error.issues },
        { status: 400 }
      )
    }
    
    return NextResponse.json(
      { success: false, error: 'Error al actualizar transacción' },
      { status: 500 }
    )
  }
}

// DELETE - Delete transaction
export async function DELETE(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const paramData = await params
    const { id } = paramData
    
    const session = await requireAuthAPI()
    
    if (!session) {
      return NextResponse.json(
        { success: false, error: 'No autorizado' },
        { status: 401 }
      )
    }
    
    // Check if transaction exists and belongs to club
    const transaction = await prisma.transaction.findFirst({
      where: {
        id: id,
        clubId: session.clubId
      }
    })

    if (!transaction) {
      return NextResponse.json(
        { success: false, error: 'Transacción no encontrada' },
        { status: 404 }
      )
    }

    // Delete transaction
    await prisma.transaction.delete({
      where: { id: id }
    })

    return NextResponse.json({ 
      success: true, 
      message: 'Transacción eliminada exitosamente' 
    })

  } catch (error) {
    console.error('Error deleting transaction:', error)
    return NextResponse.json(
      { success: false, error: 'Error al eliminar transacción' },
      { status: 500 }
    )
  }
}