import { NextRequest, NextResponse } from 'next/server'
import { getAccountStatus } from '@/lib/config/stripe'
import { prisma } from '@/lib/config/prisma'
import { requireStaffAuth } from '@/lib/auth/actions'

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url)
    
    try {
      const session = await requireStaffAuth()
      
      const club = await prisma.club.findUnique({
        where: { id: session.clubId },
        select: { 
          id: true, 
          stripeAccountId: true 
        }
      })

    if (!club?.stripeAccountId) {
      return NextResponse.redirect(new URL('/dashboard/settings/stripe?error=no_account', request.url))
    }

    // Get account status from Stripe
    const statusResult = await getAccountStatus(club.stripeAccountId)
    
    if (!statusResult.success) {
      console.error('Error getting account status:', statusResult.error)
      return NextResponse.redirect(new URL('/dashboard/settings/stripe?error=status_check_failed', request.url))
    }

    const status = statusResult.data

    // Update club with current Stripe status
    await prisma.club.update({
      where: { id: club.id },
      data: {
        stripeChargesEnabled: status.chargesEnabled,
        stripeDetailsSubmitted: status.detailsSubmitted,
        stripePayoutsEnabled: status.payoutsEnabled,
        stripeOnboardingCompleted: status.chargesEnabled && status.detailsSubmitted,
        stripeRequirements: status.requirements ? JSON.stringify(status.requirements) : null
      }
    })

    console.log('Stripe account status updated for club:', club.id, {
      chargesEnabled: status.chargesEnabled,
      detailsSubmitted: status.detailsSubmitted,
      payoutsEnabled: status.payoutsEnabled
    })

      // Redirect based on onboarding completion
      if (status.chargesEnabled && status.detailsSubmitted) {
        return NextResponse.redirect(new URL('/dashboard/settings/stripe?success=true', request.url))
      } else {
        return NextResponse.redirect(new URL('/dashboard/settings/stripe?pending=true', request.url))
      }

    } catch (authError) {
      console.error('Auth error in Stripe Connect callback:', authError)
      return NextResponse.redirect(new URL('/login?error=session_expired', request.url))
    }

  } catch (error) {
    console.error('Error in Stripe Connect callback:', error)
    return NextResponse.redirect(new URL('/dashboard/settings/stripe?error=callback_failed', request.url))
  }
}