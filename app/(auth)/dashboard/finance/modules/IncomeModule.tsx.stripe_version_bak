'use client'

import React, { useState, useEffect } from 'react'
import { CardModern } from '@/components/design-system/CardModern'
import { 
  Plus, Search, Filter, Download, TrendingUp,
  CreditCard, Banknote, Building2, Calendar, 
  Eye, Edit, ChevronLeft, ChevronRight, FileText,
  DollarSign, Users, Clock
} from 'lucide-react'
import { formatCurrency } from '@/lib/design-system/localization'
import { format } from 'date-fns'
import { es } from 'date-fns/locale'

interface Transaction {
  id: string
  type: string
  category: string
  description: string
  amount: number
  date: string
  reference?: string
  playerName?: string
  courtName?: string
  status: 'completed' | 'pending' | 'processing'
  paymentMethod?: string
}

export default function IncomeModuleProfessional() {
  const [searchQuery, setSearchQuery] = useState('')
  const [selectedPeriod, setSelectedPeriod] = useState(new Date())
  const [activeTab, setActiveTab] = useState<'transactions' | 'methods' | 'sources'>('transactions')
  const [transactions, setTransactions] = useState<Transaction[]>([])
  const [loading, setLoading] = useState(true)
  const [analytics, setAnalytics] = useState<any>(null)
  const [exporting, setExporting] = useState(false)

  useEffect(() => {
    fetchTransactions()
    fetchAnalytics()
  }, [selectedPeriod])

  const fetchTransactions = async () => {
    try {
      setLoading(true)
      const response = await fetch('/api/finance/transactions?type=INCOME&period=month')
      if (response.ok) {
        const data = await response.json()
        const mappedTransactions: Transaction[] = data.transactions?.map((t: any) => ({
          id: t.id,
          type: 'income',
          category: t.category || 'Otros',
          description: t.description || '',
          amount: t.amount || 0,
          date: t.date,
          reference: t.reference,
          playerName: t.player?.name || t.playerName,
          courtName: t.booking?.court?.name,
          status: t.status || 'completed',
          paymentMethod: t.paymentMethod || 'Efectivo'
        })) || []
        setTransactions(mappedTransactions)
      }
    } catch (error) {
      console.error('Error fetching transactions:', error)
    } finally {
      setLoading(false)
    }
  }

  const fetchAnalytics = async () => {
    try {
      const response = await fetch('/api/finance/analytics?type=overview&period=month')
      if (response.ok) {
        const data = await response.json()
        setAnalytics(data.analytics)
      }
    } catch (error) {
      console.error('Error fetching analytics:', error)
    }
  }

  const handleExport = async () => {
    try {
      setExporting(true)
      const period = format(selectedPeriod, 'yyyy-MM')
      const response = await fetch(`/api/finance/export?type=transactions&format=csv&period=${period}`)
      
      if (response.ok) {
        const blob = await response.blob()
        const url = window.URL.createObjectURL(blob)
        const a = document.createElement('a')
        a.style.display = 'none'
        a.href = url
        a.download = `ingresos-${period}.csv`
        document.body.appendChild(a)
        a.click()
        window.URL.revokeObjectURL(url)
      }
    } catch (error) {
      console.error('Error exporting income data:', error)
    } finally {
      setExporting(false)
    }
  }

  const totalIncome = transactions.reduce((sum: number, t) => sum + t.amount, 0)
  const completedIncome = transactions.filter(t => t.status === 'completed').reduce((sum: number, t) => sum + t.amount, 0)
  const pendingIncome = transactions.filter(t => t.status === 'pending').reduce((sum: number, t) => sum + t.amount, 0)

  // Calculate payment methods from real transactions
  const paymentMethodsMap = transactions.reduce((acc, t) => {
    const method = t.paymentMethod || 'Efectivo'
    if (!acc[method]) acc[method] = { count: 0, amount: 0 }
    acc[method].count++
    acc[method].amount += t.amount
    return acc
  }, {} as Record<string, {count: number, amount: number}>)
  
  const paymentMethods = Object.entries(paymentMethodsMap).map(([method, data]) => ({
    method,
    count: data.count,
    amount: data.amount,
    percentage: totalIncome > 0 ? Math.round((data.amount / totalIncome) * 100) : 0
  })).sort((a, b) => b.amount - a.amount)

  // Calculate income sources from real transactions
  const incomeSourcesMap = transactions.reduce((acc, t) => {
    const category = t.category || 'Otros'
    if (!acc[category]) acc[category] = 0
    acc[category] += t.amount
    return acc
  }, {} as Record<string, number>)

  const incomeSources = Object.entries(incomeSourcesMap).map(([source, amount]) => ({
    source,
    amount,
    percentage: totalIncome > 0 ? Math.round((amount / totalIncome) * 100) : 0,
    trend: analytics?.trends?.[source] || 'stable' as 'up' | 'down' | 'stable'
  })).sort((a, b) => b.amount - a.amount)

  return (
    <div style={{ padding: '32px' }}>
      {/* Header */}
      <div style={{ marginBottom: '32px' }}>
        <h1 style={{
          fontSize: '32px',
          fontWeight: 700,
          color: '#182A01',
          margin: '0 0 8px 0',
          letterSpacing: '-0.02em'
        }}>
          Ingresos
        </h1>
        <p style={{
          fontSize: '16px',
          color: '#516640',
          fontWeight: 400,
          margin: 0
        }}>
          Gestión de ingresos y cobros del club
        </p>
      </div>

      {/* Métricas */}
      <div style={{
        display: 'grid',
        gridTemplateColumns: 'repeat(4, 1fr)',
        gap: '20px',
        marginBottom: '32px'
      }}>
        <CardModern variant="glass">
          <div style={{ padding: '24px' }}>
            <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', marginBottom: '12px' }}>
              <div style={{
                width: '40px',
                height: '40px',
                borderRadius: '10px',
                background: 'rgba(164, 223, 78, 0.1)',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center'
              }}>
                <TrendingUp style={{ width: '20px', height: '20px', color: '#A4DF4E' }} />
              </div>
              <span style={{ fontSize: '12px', color: '#A4DF4E', fontWeight: 600 }}>+18%</span>
            </div>
            <p style={{ fontSize: '12px', color: '#516640', marginBottom: '4px' }}>Total Ingresos</p>
            <p style={{ fontSize: '24px', fontWeight: 700, color: '#182A01' }}>
              {formatCurrency(totalIncome)}
            </p>
          </div>
        </CardModern>

        <CardModern variant="glass">
          <div style={{ padding: '24px' }}>
            <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', marginBottom: '12px' }}>
              <div style={{
                width: '40px',
                height: '40px',
                borderRadius: '10px',
                background: 'rgba(34, 197, 94, 0.1)',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center'
              }}>
                <CreditCard style={{ width: '20px', height: '20px', color: '#22C55E' }} />
              </div>
              <span style={{ fontSize: '12px', color: '#516640', fontWeight: 600 }}>94%</span>
            </div>
            <p style={{ fontSize: '12px', color: '#516640', marginBottom: '4px' }}>Cobrado</p>
            <p style={{ fontSize: '24px', fontWeight: 700, color: '#182A01' }}>
              {formatCurrency(completedIncome)}
            </p>
          </div>
        </CardModern>

        <CardModern variant="glass">
          <div style={{ padding: '24px' }}>
            <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', marginBottom: '12px' }}>
              <div style={{
                width: '40px',
                height: '40px',
                borderRadius: '10px',
                background: 'rgba(251, 191, 36, 0.1)',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center'
              }}>
                <Clock style={{ width: '20px', height: '20px', color: '#FBBF24' }} />
              </div>
              <span style={{ fontSize: '12px', color: '#516640', fontWeight: 600 }}>6%</span>
            </div>
            <p style={{ fontSize: '12px', color: '#516640', marginBottom: '4px' }}>Pendiente</p>
            <p style={{ fontSize: '24px', fontWeight: 700, color: '#182A01' }}>
              {formatCurrency(pendingIncome)}
            </p>
          </div>
        </CardModern>

        <CardModern variant="glass">
          <div style={{ padding: '24px' }}>
            <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', marginBottom: '12px' }}>
              <div style={{
                width: '40px',
                height: '40px',
                borderRadius: '10px',
                background: 'rgba(59, 130, 246, 0.1)',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center'
              }}>
                <Users style={{ width: '20px', height: '20px', color: '#3B82F6' }} />
              </div>
              <span style={{ fontSize: '12px', color: '#3B82F6', fontWeight: 600 }}>
                {transactions.length}
              </span>
            </div>
            <p style={{ fontSize: '12px', color: '#516640', marginBottom: '4px' }}>Transacciones</p>
            <p style={{ fontSize: '24px', fontWeight: 700, color: '#182A01' }}>Este mes</p>
          </div>
        </CardModern>
      </div>

      {/* Tabs */}
      <div style={{ 
        display: 'flex', 
        gap: '8px',
        marginBottom: '24px',
        borderBottom: '1px solid rgba(164, 223, 78, 0.1)',
        paddingBottom: '2px'
      }}>
        <button
          onClick={() => setActiveTab('transactions')}
          style={{
            padding: '10px 20px',
            background: 'transparent',
            border: 'none',
            color: activeTab === 'transactions' ? '#182A01' : '#516640',
            fontSize: '14px',
            fontWeight: activeTab === 'transactions' ? 600 : 500,
            cursor: 'pointer',
            borderBottom: activeTab === 'transactions' ? '2px solid #A4DF4E' : '2px solid transparent',
            transition: 'all 0.2s'
          }}
        >
          Transacciones
        </button>
        <button
          onClick={() => setActiveTab('methods')}
          style={{
            padding: '10px 20px',
            background: 'transparent',
            border: 'none',
            color: activeTab === 'methods' ? '#182A01' : '#516640',
            fontSize: '14px',
            fontWeight: activeTab === 'methods' ? 600 : 500,
            cursor: 'pointer',
            borderBottom: activeTab === 'methods' ? '2px solid #A4DF4E' : '2px solid transparent',
            transition: 'all 0.2s'
          }}
        >
          Métodos de Pago
        </button>
        <button
          onClick={() => setActiveTab('sources')}
          style={{
            padding: '10px 20px',
            background: 'transparent',
            border: 'none',
            color: activeTab === 'sources' ? '#182A01' : '#516640',
            fontSize: '14px',
            fontWeight: activeTab === 'sources' ? 600 : 500,
            cursor: 'pointer',
            borderBottom: activeTab === 'sources' ? '2px solid #A4DF4E' : '2px solid transparent',
            transition: 'all 0.2s'
          }}
        >
          Fuentes de Ingreso
        </button>
      </div>

      {/* Content */}
      <div style={{
        display: 'grid',
        gridTemplateColumns: activeTab === 'transactions' ? '1fr 380px' : '1fr',
        gap: '24px'
      }}>
        {/* Main Content */}
        <CardModern variant="glass">
          <div style={{ padding: '24px' }}>
            {/* Header */}
            <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', marginBottom: '20px' }}>
              <h3 style={{
                fontSize: '18px',
                fontWeight: 600,
                color: '#182A01'
              }}>
                {activeTab === 'transactions' && 'Lista de Ingresos'}
                {activeTab === 'methods' && 'Métodos de Pago'}
                {activeTab === 'sources' && 'Análisis por Fuente'}
              </h3>
              <div style={{ display: 'flex', gap: '8px' }}>
                <button
                  style={{
                    padding: '8px 16px',
                    borderRadius: '10px',
                    border: '1px solid rgba(164, 223, 78, 0.2)',
                    background: 'white',
                    color: '#516640',
                    fontSize: '14px',
                    fontWeight: 500,
                    cursor: 'pointer',
                    display: 'flex',
                    alignItems: 'center',
                    gap: '6px'
                  }}
                >
                  <Filter style={{ width: '14px', height: '14px' }} />
                  Filtrar
                </button>
                {activeTab === 'transactions' && (
                  <button
                    style={{
                      padding: '8px 16px',
                      borderRadius: '10px',
                      border: 'none',
                      background: 'linear-gradient(135deg, #66E7AA 0%, #A4DF4E 100%)',
                      color: '#182A01',
                      fontSize: '14px',
                      fontWeight: 600,
                      cursor: 'pointer',
                      display: 'flex',
                      alignItems: 'center',
                      gap: '6px'
                    }}
                  >
                    <Plus style={{ width: '14px', height: '14px' }} />
                    Nuevo Ingreso
                  </button>
                )}
              </div>
            </div>

            {/* Search */}
            <div style={{ position: 'relative', marginBottom: '20px' }}>
              <Search style={{
                position: 'absolute',
                left: '12px',
                top: '50%',
                transform: 'translateY(-50%)',
                width: '16px',
                height: '16px',
                color: '#516640'
              }} />
              <input
                type="text"
                placeholder={
                  activeTab === 'transactions' ? 'Buscar por concepto, cliente o referencia...' :
                  activeTab === 'methods' ? 'Buscar método de pago...' :
                  'Buscar fuente de ingreso...'
                }
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                style={{
                  width: '100%',
                  padding: '10px 12px 10px 36px',
                  borderRadius: '10px',
                  border: '1px solid rgba(164, 223, 78, 0.2)',
                  background: 'white',
                  fontSize: '14px',
                  color: '#182A01',
                  outline: 'none'
                }}
              />
            </div>

            {/* Content based on tab */}
            {activeTab === 'transactions' && (
              <div style={{ display: 'flex', flexDirection: 'column', gap: '2px' }}>
                {transactions.map((transaction, index) => (
                  <div
                    key={transaction.id}
                    style={{
                      padding: '16px 0',
                      borderBottom: index < transactions.length - 1 ? '1px solid rgba(0, 0, 0, 0.06)' : 'none',
                      cursor: 'pointer',
                      transition: 'all 0.2s'
                    }}
                    onMouseEnter={(e) => {
                      e.currentTarget.style.background = 'rgba(164, 223, 78, 0.02)'
                      e.currentTarget.style.marginLeft = '4px'
                    }}
                    onMouseLeave={(e) => {
                      e.currentTarget.style.background = 'transparent'
                      e.currentTarget.style.marginLeft = '0'
                    }}
                  >
                    <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
                      <div style={{ display: 'flex', alignItems: 'center', gap: '16px' }}>
                        <div style={{
                          width: '40px',
                          height: '40px',
                          borderRadius: '10px',
                          background: 'rgba(164, 223, 78, 0.1)',
                          display: 'flex',
                          alignItems: 'center',
                          justifyContent: 'center'
                        }}>
                          <DollarSign style={{ width: '20px', height: '20px', color: '#A4DF4E' }} />
                        </div>
                        <div>
                          <p style={{ 
                            fontSize: '14px', 
                            fontWeight: 600, 
                            color: '#182A01',
                            marginBottom: '4px'
                          }}>
                            {transaction.description}
                          </p>
                          <p style={{ 
                            fontSize: '12px', 
                            color: '#516640' 
                          }}>
                            {transaction.playerName} • {transaction.category} • Ref: {transaction.reference}
                          </p>
                        </div>
                      </div>
                      <div style={{ display: 'flex', alignItems: 'center', gap: '16px' }}>
                        <div style={{ textAlign: 'right' }}>
                          <p style={{
                            fontSize: '16px',
                            fontWeight: 600,
                            color: '#A4DF4E'
                          }}>
                            +{formatCurrency(transaction.amount)}
                          </p>
                          <p style={{ fontSize: '11px', color: '#516640' }}>
                            {format(new Date(transaction.date), 'dd MMM', { locale: es })}
                          </p>
                        </div>
                        <div style={{ display: 'flex', gap: '4px' }}>
                          <button
                            style={{
                              width: '32px',
                              height: '32px',
                              borderRadius: '8px',
                              border: 'none',
                              background: 'transparent',
                              cursor: 'pointer',
                              display: 'flex',
                              alignItems: 'center',
                              justifyContent: 'center',
                              transition: 'all 0.2s'
                            }}
                            onMouseEnter={(e) => {
                              e.currentTarget.style.background = 'rgba(164, 223, 78, 0.1)'
                            }}
                            onMouseLeave={(e) => {
                              e.currentTarget.style.background = 'transparent'
                            }}
                          >
                            <Eye style={{ width: '16px', height: '16px', color: '#516640' }} />
                          </button>
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}

            {activeTab === 'methods' && (
              <div style={{ display: 'grid', gridTemplateColumns: 'repeat(3, 1fr)', gap: '16px' }}>
                {paymentMethods.map((method) => (
                  <div
                    key={method.method}
                    style={{
                      padding: '20px',
                      borderRadius: '12px',
                      border: '1px solid rgba(164, 223, 78, 0.2)',
                      background: 'white',
                      transition: 'all 0.2s',
                      cursor: 'pointer'
                    }}
                    onMouseEnter={(e) => {
                      e.currentTarget.style.borderColor = '#A4DF4E'
                      e.currentTarget.style.transform = 'translateY(-2px)'
                    }}
                    onMouseLeave={(e) => {
                      e.currentTarget.style.borderColor = 'rgba(164, 223, 78, 0.2)'
                      e.currentTarget.style.transform = 'translateY(0)'
                    }}
                  >
                    <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', marginBottom: '12px' }}>
                      <div style={{
                        width: '40px',
                        height: '40px',
                        borderRadius: '10px',
                        background: 'rgba(164, 223, 78, 0.1)',
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center'
                      }}>
                        {method.method === 'Stripe' && <CreditCard style={{ width: '20px', height: '20px', color: '#A4DF4E' }} />}
                        {method.method === 'Efectivo' && <Banknote style={{ width: '20px', height: '20px', color: '#A4DF4E' }} />}
                        {method.method === 'Transferencia' && <Building2 style={{ width: '20px', height: '20px', color: '#A4DF4E' }} />}
                      </div>
                      <span style={{
                        fontSize: '20px',
                        fontWeight: 700,
                        color: '#182A01'
                      }}>
                        {method.percentage}%
                      </span>
                    </div>
                    <h4 style={{ fontSize: '16px', fontWeight: 600, color: '#182A01', marginBottom: '4px' }}>
                      {method.method}
                    </h4>
                    <p style={{ fontSize: '14px', color: '#516640', marginBottom: '8px' }}>
                      {method.count} transacciones
                    </p>
                    <p style={{ fontSize: '18px', fontWeight: 600, color: '#A4DF4E' }}>
                      {formatCurrency(method.amount)}
                    </p>
                  </div>
                ))}
              </div>
            )}

            {activeTab === 'sources' && (
              <div style={{ display: 'flex', flexDirection: 'column', gap: '16px' }}>
                {incomeSources.map((source) => (
                  <div
                    key={source.source}
                    style={{
                      padding: '16px',
                      borderRadius: '12px',
                      border: '1px solid rgba(164, 223, 78, 0.1)',
                      background: 'white'
                    }}
                  >
                    <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', marginBottom: '8px' }}>
                      <div>
                        <h4 style={{ fontSize: '14px', fontWeight: 600, color: '#182A01', marginBottom: '4px' }}>
                          {source.source}
                        </h4>
                        <p style={{ fontSize: '20px', fontWeight: 700, color: '#A4DF4E' }}>
                          {formatCurrency(source.amount)}
                        </p>
                      </div>
                      <div style={{ textAlign: 'right' }}>
                        <div style={{
                          display: 'inline-flex',
                          alignItems: 'center',
                          gap: '4px',
                          padding: '4px 8px',
                          borderRadius: '8px',
                          background: source.trend === 'up' ? 'rgba(164, 223, 78, 0.1)' : 
                                     source.trend === 'down' ? 'rgba(239, 68, 68, 0.1)' : 
                                     'rgba(156, 163, 175, 0.1)',
                          color: source.trend === 'up' ? '#A4DF4E' : 
                                source.trend === 'down' ? '#EF4444' : 
                                '#9CA3AF'
                        }}>
                          {source.trend === 'up' && '↑'}
                          {source.trend === 'down' && '↓'}
                          {source.trend === 'stable' && '→'}
                          <span style={{ fontSize: '12px', fontWeight: 600 }}>
                            {source.percentage}%
                          </span>
                        </div>
                      </div>
                    </div>
                    <div style={{
                      height: '8px',
                      background: 'rgba(164, 223, 78, 0.1)',
                      borderRadius: '4px',
                      overflow: 'hidden'
                    }}>
                      <div style={{
                        width: `${source.percentage}%`,
                        height: '100%',
                        background: 'linear-gradient(90deg, #A4DF4E, #66E7AA)',
                        borderRadius: '4px',
                        transition: 'width 0.5s ease'
                      }} />
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        </CardModern>

        {/* Sidebar - Solo en transactions */}
        {activeTab === 'transactions' && (
          <div style={{ display: 'flex', flexDirection: 'column', gap: '20px' }}>
            {/* Period Selector */}
            <CardModern variant="glass">
              <div style={{ padding: '24px' }}>
                <div style={{
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'space-between',
                  marginBottom: '20px'
                }}>
                  <h3 style={{
                    fontSize: '16px',
                    fontWeight: 600,
                    color: '#182A01'
                  }}>
                    {format(selectedPeriod, 'MMMM yyyy', { locale: es })}
                  </h3>
                  <div style={{ display: 'flex', gap: '8px' }}>
                    <button
                      onClick={() => {
                        const newDate = new Date(selectedPeriod)
                        newDate.setMonth(newDate.getMonth() - 1)
                        setSelectedPeriod(newDate)
                      }}
                      style={{
                        width: '32px',
                        height: '32px',
                        borderRadius: '8px',
                        border: '1px solid rgba(164, 223, 78, 0.2)',
                        background: 'white',
                        cursor: 'pointer',
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center'
                      }}
                    >
                      <ChevronLeft style={{ width: '16px', height: '16px', color: '#516640' }} />
                    </button>
                    <button
                      onClick={() => {
                        const newDate = new Date(selectedPeriod)
                        newDate.setMonth(newDate.getMonth() + 1)
                        setSelectedPeriod(newDate)
                      }}
                      style={{
                        width: '32px',
                        height: '32px',
                        borderRadius: '8px',
                        border: '1px solid rgba(164, 223, 78, 0.2)',
                        background: 'white',
                        cursor: 'pointer',
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center'
                      }}
                    >
                      <ChevronRight style={{ width: '16px', height: '16px', color: '#516640' }} />
                    </button>
                  </div>
                </div>

                <div style={{ display: 'flex', flexDirection: 'column', gap: '12px' }}>
                  <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                    <span style={{ fontSize: '14px', color: '#516640' }}>Cobrado</span>
                    <span style={{ fontSize: '14px', fontWeight: 600, color: '#22C55E' }}>
                      {formatCurrency(completedIncome)}
                    </span>
                  </div>
                  <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                    <span style={{ fontSize: '14px', color: '#516640' }}>Pendiente</span>
                    <span style={{ fontSize: '14px', fontWeight: 600, color: '#FBBF24' }}>
                      {formatCurrency(pendingIncome)}
                    </span>
                  </div>
                  <div style={{
                    borderTop: '1px solid rgba(164, 223, 78, 0.1)',
                    paddingTop: '12px',
                    display: 'flex',
                    justifyContent: 'space-between',
                    alignItems: 'center'
                  }}>
                    <span style={{ fontSize: '14px', fontWeight: 600, color: '#182A01' }}>Total</span>
                    <span style={{ fontSize: '18px', fontWeight: 700, color: '#182A01' }}>
                      {formatCurrency(totalIncome)}
                    </span>
                  </div>
                </div>
              </div>
            </CardModern>

            {/* Quick Actions */}
            <CardModern variant="glass">
              <div style={{ padding: '24px' }}>
                <h3 style={{
                  fontSize: '16px',
                  fontWeight: 600,
                  color: '#182A01',
                  marginBottom: '16px'
                }}>
                  Acciones Rápidas
                </h3>
                <div style={{ display: 'flex', flexDirection: 'column', gap: '12px' }}>
                  <button
                    style={{
                      width: '100%',
                      padding: '12px 16px',
                      borderRadius: '10px',
                      border: '1px solid rgba(164, 223, 78, 0.2)',
                      background: 'white',
                      color: '#182A01',
                      fontSize: '14px',
                      fontWeight: 500,
                      cursor: 'pointer',
                      display: 'flex',
                      alignItems: 'center',
                      gap: '8px',
                      transition: 'all 0.2s'
                    }}
                    onMouseEnter={(e) => {
                      e.currentTarget.style.background = 'rgba(164, 223, 78, 0.05)'
                    }}
                    onMouseLeave={(e) => {
                      e.currentTarget.style.background = 'white'
                    }}
                  >
                    <FileText style={{ width: '16px', height: '16px' }} />
                    Generar Factura
                  </button>
                  <button
                    style={{
                      width: '100%',
                      padding: '12px 16px',
                      borderRadius: '10px',
                      border: '1px solid rgba(164, 223, 78, 0.2)',
                      background: 'white',
                      color: '#182A01',
                      fontSize: '14px',
                      fontWeight: 500,
                      cursor: 'pointer',
                      display: 'flex',
                      alignItems: 'center',
                      gap: '8px',
                      transition: 'all 0.2s'
                    }}
                    onMouseEnter={(e) => {
                      e.currentTarget.style.background = 'rgba(164, 223, 78, 0.05)'
                    }}
                    onMouseLeave={(e) => {
                      e.currentTarget.style.background = 'white'
                    }}
                  >
                    <Download style={{ width: '16px', height: '16px' }} />
                    Exportar
                  </button>
                </div>
              </div>
            </CardModern>
          </div>
        )}
      </div>
    </div>
  )
}