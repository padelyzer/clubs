'use client'

import { useState } from 'react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Card } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { TemplatePreview } from './template-preview'
import { TestMessage } from './test-message'

interface Notification {
  id: string
  template: string
  recipient: string
  status: 'pending' | 'sent' | 'delivered' | 'failed'
  createdAt: Date
  sentAt: Date | null
  errorMessage: string | null
  twilioSid: string | null
  booking: {
    id: string
    playerName: string
    date: Date
    startTime: string
    court: {
      name: string
    }
    club: {
      name: string
    }
  }
  splitPayment?: {
    playerName: string
    amount: number
  } | null
}

interface TemplateBreakdown {
  template: string
  total: number
  sent: number
  delivered: number
  failed: number
  pending: number
}

interface NotificationsDashboardProps {
  notifications: Notification[]
  templateBreakdown: TemplateBreakdown[]
  recentCount: number
  clubId: string
}

export function NotificationsDashboard({ 
  notifications, 
  templateBreakdown,
  recentCount,
  clubId 
}: NotificationsDashboardProps) {
  const [activeTab, setActiveTab] = useState<'history' | 'templates' | 'test'>('history')
  const [searchTerm, setSearchTerm] = useState('')
  const [statusFilter, setStatusFilter] = useState<string>('all')

  // Filter notifications
  const filteredNotifications = notifications.filter(notification => {
    const matchesSearch = 
      notification.recipient.includes(searchTerm) ||
      notification.Booking.playerName.toLowerCase().includes(searchTerm.toLowerCase()) ||
      notification.template.toLowerCase().includes(searchTerm.toLowerCase())
    
    const matchesStatus = statusFilter === 'all' || notification.status === statusFilter

    return matchesSearch && matchesStatus
  })

  const getStatusBadge = (status: string) => {
    switch (status) {
      case 'sent':
        return <Badge className="bg-green-100 text-green-800">Enviado</Badge>
      case 'delivered':
        return <Badge className="bg-emerald-100 text-emerald-800">Entregado</Badge>
      case 'failed':
        return <Badge className="bg-red-100 text-red-800">Fallido</Badge>
      case 'pending':
        return <Badge className="bg-yellow-100 text-yellow-800">Pendiente</Badge>
      default:
        return <Badge>{status}</Badge>
    }
  }

  const getTemplateDisplayName = (template: string) => {
    const names: Record<string, string> = {
      'BOOKING_CONFIRMATION': 'Confirmación de Reserva',
      'BOOKING_REMINDER': 'Recordatorio',
      'PAYMENT_PENDING': 'Pago Pendiente',
      'PAYMENT_COMPLETED': 'Pago Completado',
      'BOOKING_CANCELLED': 'Cancelación',
      'CHECKIN_REMINDER': 'Check-in',
      'PROMOTION': 'Promoción'
    }
    return names[template] || template
  }

  return (
    <div className="space-y-6">
      {/* Tabs */}
      <div className="border-b border-gray-200">
        <nav className="-mb-px flex space-x-8">
          <button
            onClick={() => setActiveTab('history')}
            className={`py-2 px-1 border-b-2 font-medium text-sm ${
              activeTab === 'history'
                ? 'border-blue-500 text-blue-600'
                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
            }`}
          >
            Historial de Mensajes
          </button>
          <button
            onClick={() => setActiveTab('templates')}
            className={`py-2 px-1 border-b-2 font-medium text-sm ${
              activeTab === 'templates'
                ? 'border-blue-500 text-blue-600'
                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
            }`}
          >
            Templates
          </button>
          <button
            onClick={() => setActiveTab('test')}
            className={`py-2 px-1 border-b-2 font-medium text-sm ${
              activeTab === 'test'
                ? 'border-blue-500 text-blue-600'
                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
            }`}
          >
            Enviar Prueba
          </button>
        </nav>
      </div>

      {/* History Tab */}
      {activeTab === 'history' && (
        <div className="space-y-6">
          {/* Filters */}
          <div className="flex flex-col sm:flex-row gap-4">
            <div className="flex-1">
              <Input
                placeholder="Buscar por teléfono, nombre o template..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
            </div>
            <select
              value={statusFilter}
              onChange={(e) => setStatusFilter(e.target.value)}
              className="px-3 py-2 border border-gray-300 rounded-md text-sm"
            >
              <option value="all">Todos los estados</option>
              <option value="sent">Enviados</option>
              <option value="delivered">Entregados</option>
              <option value="failed">Fallidos</option>
              <option value="pending">Pendientes</option>
            </select>
          </div>

          {/* Recent Activity Alert */}
          {recentCount > 0 && (
            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
              <div className="flex items-center">
                <span className="text-blue-600 mr-2">•</span>
                <span className="text-blue-800">
                  {recentCount} mensajes enviados en los últimos 7 días
                </span>
              </div>
            </div>
          )}

          {/* Notifications Table */}
          <Card className="overflow-hidden">
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Destinatario
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Template
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Reserva
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Estado
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Fecha
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {filteredNotifications.map((notification) => (
                    <tr key={notification.id} className="hover:bg-gray-50">
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div>
                          <div className="text-sm font-medium text-gray-900">
                            {notification.splitPayment?.playerName || notification.Booking.playerName}
                          </div>
                          <div className="text-sm text-gray-500">
                            {notification.recipient}
                          </div>
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-900">
                          {getTemplateDisplayName(notification.template)}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-900">
                          {notification.Booking.Court.name}
                        </div>
                        <div className="text-sm text-gray-500">
                          {new Date(notification.Booking.date).toLocaleDateString('es-MX')} {notification.Booking.startTime}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        {getStatusBadge(notification.status)}
                        {notification.errorMessage && (
                          <div className="text-xs text-red-600 mt-1">
                            {notification.errorMessage}
                          </div>
                        )}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        <div>
                          {new Date(notification.createdAt).toLocaleDateString('es-MX')}
                        </div>
                        <div>
                          {new Date(notification.createdAt).toLocaleTimeString('es-MX')}
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
            
            {filteredNotifications.length === 0 && (
              <div className="text-center py-12">
                <span className="text-gray-500">No se encontraron notificaciones</span>
              </div>
            )}
          </Card>
        </div>
      )}

      {/* Templates Tab */}
      {activeTab === 'templates' && (
        <div className="space-y-6">
          <div>
            <h3 className="text-lg font-semibold text-gray-900 mb-4">Templates por Uso</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {templateBreakdown.map((template) => (
                <Card key={template.template} className="p-6">
                  <div className="mb-4">
                    <h4 className="font-medium text-gray-900">
                      {getTemplateDisplayName(template.template)}
                    </h4>
                    <p className="text-sm text-gray-500">
                      Total: {template.total} mensajes
                    </p>
                  </div>
                  
                  <div className="space-y-2">
                    <div className="flex justify-between items-center">
                      <span className="text-sm text-gray-600">Entregados</span>
                      <span className="text-sm font-medium text-green-600">
                        {template.delivered}
                      </span>
                    </div>
                    <div className="flex justify-between items-center">
                      <span className="text-sm text-gray-600">Enviados</span>
                      <span className="text-sm font-medium text-blue-600">
                        {template.sent}
                      </span>
                    </div>
                    <div className="flex justify-between items-center">
                      <span className="text-sm text-gray-600">Fallidos</span>
                      <span className="text-sm font-medium text-red-600">
                        {template.failed}
                      </span>
                    </div>
                  </div>

                  <div className="mt-4">
                    <div className="flex justify-between items-center mb-1">
                      <span className="text-xs text-gray-500">Tasa de éxito</span>
                      <span className="text-xs text-gray-500">
                        {template.total > 0 
                          ? (((template.sent + template.delivered) / template.total) * 100).toFixed(1)
                          : 0
                        }%
                      </span>
                    </div>
                    <div className="w-full bg-gray-200 rounded-full h-1.5">
                      <div 
                        className="bg-green-600 h-1.5 rounded-full" 
                        style={{ 
                          width: template.total > 0 
                            ? `${((template.sent + template.delivered) / template.total) * 100}%`
                            : '0%'
                        }}
                      ></div>
                    </div>
                  </div>
                </Card>
              ))}
            </div>
          </div>

          <TemplatePreview />
        </div>
      )}

      {/* Test Tab */}
      {activeTab === 'test' && (
        <div className="space-y-6">
          <TestMessage clubId={clubId} />
        </div>
      )}
    </div>
  )
}