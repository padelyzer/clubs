'use client'

import { useState } from 'react'
import { 
  Building2, 
  Users, 
  Calendar, 
  TrendingUp,
  Clock,
  MapPin,
  Star,
  Activity,
  Filter,
  ChevronDown,
  Crown,
  AlertCircle,
  CheckCircle,
  XCircle
} from 'lucide-react'

interface ClubData {
  id: string
  name: string
  location: string
  planName: string
  monthlyRevenue: number
  bookingsCount: number
  usersCount: number
  courtsCount: number
  subscriptionStatus: string
}

interface Usage {
  totalClubs: number
  activeClubs: number
  utilizationRate: number
  topClubs: ClubData[]
  dailyBookings: number[]
}

interface RevenueAnalysis {
  month: string
  subscriptionRevenue: number
  bookingRevenue: number
  totalRevenue: number
}

interface UsageAnalyticsProps {
  usage: Usage
  revenueAnalysis: RevenueAnalysis[]
}

export default function UsageAnalytics({ usage, revenueAnalysis }: UsageAnalyticsProps) {
  const [sortBy, setSortBy] = useState('revenue')
  const [filterPlan, setFilterPlan] = useState('all')
  const [showInactive, setShowInactive] = useState(false)

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('es-MX', {
      style: 'currency',
      currency: 'MXN',
      minimumFractionDigits: 0,
      maximumFractionDigits: 0
    }).format(amount)
  }

  // Calculate peak usage times from daily bookings (simulate hourly data)
  const peakHours = Array.from({ length: 24 }, (_, hour) => {
    const baseBookings = usage.dailyBookings.reduce((sum: number, day) => sum + day, 0) / 30
    const hourMultiplier = hour >= 6 && hour <= 22 
      ? (hour >= 17 && hour <= 21 ? 1.5 : 1.0)  // Peak evening hours
      : 0.2 // Low activity hours
    
    return {
      hour,
      bookings: Math.round(baseBookings * hourMultiplier * (0.8 + Math.random() * 0.4))
    }
  })

  const maxHourlyBookings = Math.max(...peakHours.map(h => h.bookings))

  // Sort and filter clubs
  const sortedClubs = [...usage.topClubs]
    .filter(club => {
      if (filterPlan !== 'all' && club.planName !== filterPlan) return false
      if (!showInactive && club.subscriptionStatus !== 'ACTIVE') return false
      return true
    })
    .sort((a, b) => {
      switch (sortBy) {
        case 'revenue':
          return b.monthlyRevenue - a.monthlyRevenue
        case 'bookings':
          return b.bookingsCount - a.bookingsCount
        case 'users':
          return b.usersCount - a.usersCount
        case 'name':
          return a.name.localeCompare(b.name)
        default:
          return 0
      }
    })

  // Get unique plans for filter
  const uniquePlans = [...new Set(usage.topClubs.map(club => club.planName))]

  const getSubscriptionStatusIcon = (status: string) => {
    switch (status) {
      case 'ACTIVE':
        return <CheckCircle className="w-4 h-4 text-green-500" />
      case 'CANCELLED':
        return <XCircle className="w-4 h-4 text-red-500" />
      case 'INACTIVE':
        return <AlertCircle className="w-4 h-4 text-yellow-500" />
      default:
        return <AlertCircle className="w-4 h-4 text-gray-500" />
    }
  }

  const getSubscriptionStatusColor = (status: string) => {
    switch (status) {
      case 'ACTIVE':
        return 'bg-green-100 text-green-700 border-green-200'
      case 'CANCELLED':
        return 'bg-red-100 text-red-700 border-red-200'
      case 'INACTIVE':
        return 'bg-yellow-100 text-yellow-700 border-yellow-200'
      default:
        return 'bg-gray-100 text-gray-700 border-gray-200'
    }
  }

  return (
    <div className="space-y-6">
      {/* Overview Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        <div className="bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-xl p-6">
          <div className="flex items-center justify-between">
            <div>
              <Building2 className="w-8 h-8 mb-2 opacity-90" />
              <div className="text-2xl font-bold">{usage.totalClubs}</div>
              <div className="text-sm opacity-90">Clubes Totales</div>
            </div>
            <div className="text-right">
              <div className="text-lg font-semibold">{usage.activeClubs}</div>
              <div className="text-xs opacity-75">Activos</div>
            </div>
          </div>
        </div>

        <div className="bg-gradient-to-r from-green-500 to-green-600 text-white rounded-xl p-6">
          <div className="flex items-center justify-between">
            <div>
              <Activity className="w-8 h-8 mb-2 opacity-90" />
              <div className="text-2xl font-bold">{usage.utilizationRate.toFixed(1)}%</div>
              <div className="text-sm opacity-90">Tasa de Utilización</div>
            </div>
            <div className={`px-2 py-1 rounded text-xs font-medium ${
              usage.utilizationRate >= 70 
                ? 'bg-white bg-opacity-20' 
                : 'bg-yellow-400 text-yellow-900'
            }`}>
              {usage.utilizationRate >= 70 ? 'Excelente' : 'Mejorable'}
            </div>
          </div>
        </div>

        <div className="bg-gradient-to-r from-purple-500 to-purple-600 text-white rounded-xl p-6">
          <div className="flex items-center justify-between">
            <div>
              <Calendar className="w-8 h-8 mb-2 opacity-90" />
              <div className="text-2xl font-bold">
                {Math.round(usage.dailyBookings.reduce((sum: number, day) => sum + day, 0) / 30)}
              </div>
              <div className="text-sm opacity-90">Reservas/Día Promedio</div>
            </div>
            <div className="text-right">
              <div className="text-lg font-semibold">
                {usage.dailyBookings.reduce((sum: number, day) => sum + day, 0)}
              </div>
              <div className="text-xs opacity-75">Este Mes</div>
            </div>
          </div>
        </div>

        <div className="bg-gradient-to-r from-amber-500 to-amber-600 text-white rounded-xl p-6">
          <div className="flex items-center justify-between">
            <div>
              <Star className="w-8 h-8 mb-2 opacity-90" />
              <div className="text-2xl font-bold">
                {usage.topClubs.filter(club => club.monthlyRevenue > 0).length}
              </div>
              <div className="text-sm opacity-90">Clubes Generando Ingresos</div>
            </div>
            <div className="text-right">
              <div className="text-lg font-semibold">
                {formatCurrency(usage.topClubs.reduce((sum: number, club) => sum + club.monthlyRevenue, 0))}
              </div>
              <div className="text-xs opacity-75">Total</div>
            </div>
          </div>
        </div>
      </div>

      {/* Peak Usage Times */}
      <div className="bg-white rounded-xl p-6 shadow-sm border">
        <h3 className="text-lg font-semibold mb-6 flex items-center">
          <Clock className="w-5 h-5 mr-2" />
          Patrones de Uso por Hora
        </h3>
        
        <div className="space-y-2">
          {peakHours.map((hour, index) => {
            const percentage = (hour.bookings / maxHourlyBookings) * 100
            const isMainHour = index % 2 === 0
            
            return (
              <div key={hour.hour} className="flex items-center">
                <div className="w-12 text-sm text-gray-600 text-right pr-3">
                  {isMainHour ? `${hour.hour.toString().padStart(2, '0')}:00` : ''}
                </div>
                <div className="flex-1 bg-gray-100 rounded-full h-6 relative overflow-hidden">
                  <div 
                    className={`h-full rounded-full transition-all duration-500 ${
                      percentage > 70 
                        ? 'bg-gradient-to-r from-red-400 to-red-500' 
                        : percentage > 40
                          ? 'bg-gradient-to-r from-yellow-400 to-yellow-500'
                          : 'bg-gradient-to-r from-blue-400 to-blue-500'
                    }`}
                    style={{ width: `${percentage}%` }}
                  />
                  <div className="absolute inset-0 flex items-center justify-center text-xs font-medium text-gray-700">
                    {hour.bookings > 0 ? hour.bookings : ''}
                  </div>
                </div>
                <div className="w-16 text-sm text-gray-600 pl-3">
                  {percentage > 5 ? `${percentage.toFixed(0)}%` : ''}
                </div>
              </div>
            )
          })}
        </div>
        
        <div className="mt-4 flex items-center space-x-6 text-sm text-gray-600">
          <div className="flex items-center">
            <div className="w-3 h-3 rounded bg-blue-500 mr-2" />
            <span>Uso Normal</span>
          </div>
          <div className="flex items-center">
            <div className="w-3 h-3 rounded bg-yellow-500 mr-2" />
            <span>Uso Moderado</span>
          </div>
          <div className="flex items-center">
            <div className="w-3 h-3 rounded bg-red-500 mr-2" />
            <span>Pico de Uso</span>
          </div>
        </div>
      </div>

      {/* Clubs Performance Table */}
      <div className="bg-white rounded-xl shadow-sm border overflow-hidden">
        <div className="p-6 border-b border-gray-200">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-lg font-semibold flex items-center">
              <Building2 className="w-5 h-5 mr-2" />
              Performance de Clubes
            </h3>
            <div className="flex items-center space-x-3">
              <select
                value={sortBy}
                onChange={(e) => setSortBy(e.target.value)}
                className="text-sm border border-gray-300 rounded-lg px-3 py-1 bg-white"
              >
                <option value="revenue">Ordenar por Ingresos</option>
                <option value="bookings">Ordenar por Reservas</option>
                <option value="users">Ordenar por Usuarios</option>
                <option value="name">Ordenar por Nombre</option>
              </select>
              
              <select
                value={filterPlan}
                onChange={(e) => setFilterPlan(e.target.value)}
                className="text-sm border border-gray-300 rounded-lg px-3 py-1 bg-white"
              >
                <option value="all">Todos los Planes</option>
                {uniquePlans.map((plan) => (
                  <option key={plan} value={plan}>{plan}</option>
                ))}
              </select>
              
              <label className="flex items-center text-sm">
                <input
                  type="checkbox"
                  checked={showInactive}
                  onChange={(e) => setShowInactive(e.target.checked)}
                  className="mr-2"
                />
                Mostrar Inactivos
              </label>
            </div>
          </div>
        </div>

        <div className="overflow-x-auto">
          <table className="w-full">
            <thead className="bg-gray-50">
              <tr>
                <th className="text-left py-3 px-6 font-medium text-gray-600">Club</th>
                <th className="text-left py-3 px-6 font-medium text-gray-600">Plan</th>
                <th className="text-left py-3 px-6 font-medium text-gray-600">Estado</th>
                <th className="text-right py-3 px-6 font-medium text-gray-600">Ingresos Mes</th>
                <th className="text-center py-3 px-6 font-medium text-gray-600">Reservas</th>
                <th className="text-center py-3 px-6 font-medium text-gray-600">Usuarios</th>
                <th className="text-center py-3 px-6 font-medium text-gray-600">Canchas</th>
                <th className="text-right py-3 px-6 font-medium text-gray-600">Ing./Usuario</th>
              </tr>
            </thead>
            <tbody className="divide-y divide-gray-200">
              {sortedClubs.slice(0, 15).map((club, index) => {
                const revenuePerUser = club.usersCount > 0 ? club.monthlyRevenue / club.usersCount : 0
                const isTopPerformer = index < 3 && sortBy === 'revenue' && club.monthlyRevenue > 0
                
                return (
                  <tr key={club.id} className={`hover:bg-gray-50 ${isTopPerformer ? 'bg-yellow-50' : ''}`}>
                    <td className="py-4 px-6">
                      <div className="flex items-center">
                        {isTopPerformer && <Crown className="w-4 h-4 text-yellow-500 mr-2" />}
                        <div>
                          <div className="font-medium text-gray-900">{club.name}</div>
                          <div className="text-sm text-gray-500 flex items-center">
                            <MapPin className="w-3 h-3 mr-1" />
                            {club.location}
                          </div>
                        </div>
                      </div>
                    </td>
                    
                    <td className="py-4 px-6">
                      <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-700">
                        {club.planName}
                      </span>
                    </td>
                    
                    <td className="py-4 px-6">
                      <div className="flex items-center">
                        {getSubscriptionStatusIcon(club.subscriptionStatus)}
                        <span className={`ml-2 inline-flex items-center px-2 py-1 rounded-full text-xs font-medium border ${getSubscriptionStatusColor(club.subscriptionStatus)}`}>
                          {club.subscriptionStatus}
                        </span>
                      </div>
                    </td>
                    
                    <td className="py-4 px-6 text-right">
                      <div className="font-semibold text-gray-900">
                        {formatCurrency(club.monthlyRevenue)}
                      </div>
                    </td>
                    
                    <td className="py-4 px-6 text-center">
                      <div className="font-medium text-gray-900">{club.bookingsCount}</div>
                      <div className="text-xs text-gray-500">
                        {club.courtsCount > 0 ? `${(club.bookingsCount / club.courtsCount).toFixed(1)}/cancha` : ''}
                      </div>
                    </td>
                    
                    <td className="py-4 px-6 text-center">
                      <div className="font-medium text-gray-900">{club.usersCount}</div>
                    </td>
                    
                    <td className="py-4 px-6 text-center">
                      <div className="font-medium text-gray-900">{club.courtsCount}</div>
                    </td>
                    
                    <td className="py-4 px-6 text-right">
                      <div className="font-medium text-gray-900">
                        {formatCurrency(revenuePerUser)}
                      </div>
                      <div className="text-xs text-gray-500">
                        {club.usersCount > 0 ? 'por usuario' : 'N/A'}
                      </div>
                    </td>
                  </tr>
                )
              })}
            </tbody>
          </table>
        </div>
        
        {sortedClubs.length === 0 && (
          <div className="py-12 text-center text-gray-500">
            <Activity className="w-12 h-12 mx-auto mb-4 opacity-50" />
            <div>No se encontraron clubes con los filtros seleccionados</div>
          </div>
        )}
      </div>

      {/* Usage Summary */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {/* Top Performers */}
        <div className="bg-white rounded-xl p-6 shadow-sm border">
          <h3 className="text-lg font-semibold mb-4 flex items-center">
            <Star className="w-5 h-5 mr-2 text-yellow-500" />
            Top 5 Clubes por Ingresos
          </h3>
          <div className="space-y-3">
            {sortedClubs.slice(0, 5).map((club, index) => (
              <div key={club.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                <div className="flex items-center">
                  <div className={`w-6 h-6 rounded-full flex items-center justify-center text-xs font-bold ${
                    index === 0 ? 'bg-yellow-400 text-yellow-900' :
                    index === 1 ? 'bg-gray-300 text-gray-700' :
                    index === 2 ? 'bg-amber-200 text-amber-800' :
                    'bg-blue-100 text-blue-700'
                  }`}>
                    {index + 1}
                  </div>
                  <div className="ml-3">
                    <div className="font-medium text-gray-900">{club.name}</div>
                    <div className="text-sm text-gray-500">{club.planName}</div>
                  </div>
                </div>
                <div className="text-right">
                  <div className="font-semibold text-gray-900">
                    {formatCurrency(club.monthlyRevenue)}
                  </div>
                  <div className="text-sm text-gray-500">{club.bookingsCount} reservas</div>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Activity Summary */}
        <div className="bg-white rounded-xl p-6 shadow-sm border">
          <h3 className="text-lg font-semibold mb-4 flex items-center">
            <TrendingUp className="w-5 h-5 mr-2 text-green-500" />
            Resumen de Actividad
          </h3>
          <div className="space-y-4">
            <div className="flex justify-between items-center py-2 border-b border-gray-100">
              <span className="text-gray-600">Clubes con Alta Actividad</span>
              <span className="font-semibold text-green-600">
                {usage.topClubs.filter(club => club.bookingsCount > 20).length}
              </span>
            </div>
            <div className="flex justify-between items-center py-2 border-b border-gray-100">
              <span className="text-gray-600">Clubes con Baja Actividad</span>
              <span className="font-semibold text-yellow-600">
                {usage.topClubs.filter(club => club.bookingsCount <= 5 && club.bookingsCount > 0).length}
              </span>
            </div>
            <div className="flex justify-between items-center py-2 border-b border-gray-100">
              <span className="text-gray-600">Clubes Inactivos</span>
              <span className="font-semibold text-red-600">
                {usage.topClubs.filter(club => club.bookingsCount === 0).length}
              </span>
            </div>
            <div className="flex justify-between items-center py-2">
              <span className="text-gray-600">Promedio Usuarios/Club</span>
              <span className="font-semibold text-blue-600">
                {usage.totalClubs > 0 
                  ? Math.round(usage.topClubs.reduce((sum: number, club) => sum + club.usersCount, 0) / usage.totalClubs)
                  : 0
                }
              </span>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}