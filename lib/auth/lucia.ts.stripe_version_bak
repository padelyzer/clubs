import { Lucia, TimeSpan } from "lucia";
import { PrismaAdapter } from "@lucia-auth/adapter-prisma";
import { prisma } from "@/lib/config/prisma";
import { cookies } from "next/headers";
import { cache } from "react";
import type { Session, User } from "lucia";

// Create Prisma adapter
const adapter = new PrismaAdapter(prisma.session, prisma.user);

// Initialize Lucia
export const lucia = new Lucia(adapter, {
  sessionCookie: {
    name: "auth-session", // Cambiar nombre para evitar conflictos
    expires: false, // Session cookies
    attributes: {
      // Temporalmente deshabilitar secure para diagnÃ³stico
      secure: false, // process.env.NODE_ENV === "production",
      sameSite: "lax",
      path: "/",
      // No especificar domain para que use el dominio actual
    }
  },
  sessionExpiresIn: new TimeSpan(30, "d"), // 30 days
  
  getUserAttributes: (attributes) => {
    return {
      email: attributes.email,
      name: attributes.name,
      role: attributes.role,
      clubId: attributes.clubId,
      active: attributes.active
    };
  }
});

// Type declarations for Lucia
declare module "lucia" {
  interface Register {
    Lucia: typeof lucia;
    DatabaseUserAttributes: DatabaseUserAttributes;
  }
}

interface DatabaseUserAttributes {
  email: string;
  name: string | null;
  role: "USER" | "CLUB_OWNER" | "CLUB_STAFF" | "SUPER_ADMIN";
  clubId: string | null;
  active: boolean;
}

// Validate session - cached per request
export const validateRequest = cache(
  async (): Promise<{ user: User; session: Session } | { user: null; session: null }> => {
    const cookieStore = await cookies();
    const sessionCookie = cookieStore.get(lucia.sessionCookieName);
    const sessionId = sessionCookie?.value ?? null;
    
    console.log('[validateRequest] Cookie name:', lucia.sessionCookieName);
    console.log('[validateRequest] Session ID from cookie:', sessionId);
    console.log('[validateRequest] All cookies:', cookieStore.getAll().map(c => c.name));
    
    if (!sessionId) {
      console.log('[validateRequest] No session ID found in cookies');
      return { user: null, session: null };
    }

    const result = await lucia.validateSession(sessionId);
    console.log('[validateRequest] Session validation result:', {
      hasSession: !!result.session,
      hasUser: !!result.user,
      sessionFresh: result.session?.fresh
    });
    
    try {
      if (result.session && result.session.fresh) {
        const sessionCookie = lucia.createSessionCookie(result.session.id);
        (await cookies()).set(
          sessionCookie.name,
          sessionCookie.value,
          sessionCookie.attributes
        );
      }
      // Don't automatically clear cookies when session is invalid
      // This should only be done explicitly during logout
    } catch {
      // Next.js throws when you attempt to set cookies in certain contexts
    }
    
    return result;
  }
);

// Helper to get current user
export async function getCurrentUser() {
  const { user } = await validateRequest();
  return user;
}

// Helper to require authentication
export async function requireAuthentication() {
  const { user, session } = await validateRequest();
  
  if (!user || !session) {
    throw new Error("Unauthorized");
  }
  
  return { user, session };
}

// Helper to require club membership
export async function requireClubMembership() {
  const { user, session } = await requireAuthentication();
  
  if (!user.clubId) {
    throw new Error("No club membership");
  }
  
  return { user, session, clubId: user.clubId };
}

// Helper to require specific role
export async function requireRole(allowedRoles: string[]) {
  const { user, session } = await requireAuthentication();
  
  if (!allowedRoles.includes(user.role)) {
    throw new Error("Insufficient permissions");
  }
  
  return { user, session };
}