import { prisma } from '@/lib/config/prisma'
import { generatePaymentLink } from './payment-links'
import { sendWhatsAppNotification } from './notifications'
import { onPaymentCompleted } from '@/lib/whatsapp/notification-hooks'
import { WhatsAppService } from '@/lib/services/whatsapp-service'
import { nanoid } from 'nanoid'

interface SplitPaymentData {
  bookingId: string
  playerName: string
  playerEmail?: string
  playerPhone: string
  amount: number
}

export async function createSplitPayments(
  bookingId: string,
  splitCount: number,
  totalAmount: number,
  playerInfo: {
    name: string
    email?: string
    phone: string
  },
  playersPerCourt?: number,
  bookingGroupId?: string
) {
  const splitAmount = Math.ceil(totalAmount / splitCount)
  const splitPayments = []

  // Create split payment records
  for (let i = 0; i < splitCount; i++) {
    const splitPayment = await prisma.splitPayment.create({
      data: {
        ...(bookingGroupId ? { bookingGroupId } : { bookingId }),
        playerName: i === 0 ? playerInfo.name : `Jugador ${i + 1}`,
        playerEmail: i === 0 ? playerInfo.email : '',
        playerPhone: i === 0 ? playerInfo.phone : '',
        amount: splitAmount,
        status: 'pending'
      }
    })

    splitPayments.push(splitPayment)
  }

  return splitPayments
}

export async function generateSplitPaymentLinks(bookingId: string) {
  const booking = await prisma.booking.findUnique({
    where: { id: bookingId },
    include: {
      Court: true,
      Club: true,
      SplitPayment: {
        where: { status: 'pending' }
      }
    }
  })

  if (!booking) {
    throw new Error('Reserva no encontrada')
  }

  if (!booking.splitPaymentEnabled) {
    throw new Error('Esta reserva no tiene pagos divididos habilitados')
  }

  const paymentLinks = []

  // Generate payment links for each pending split payment
  for (const splitPayment of booking.SplitPayment) {
    try {
      // Generate unique payment link for this split payment
      const paymentLink = await generatePaymentLink({
        splitPaymentId: splitPayment.id,
        amount: splitPayment.amount,
        description: `Pago para reserva en ${booking.Court.name} - ${booking.Club.name}`,
        playerName: splitPayment.playerName,
        playerEmail: splitPayment.playerEmail,
        playerPhone: splitPayment.playerPhone,
        bookingId: booking.id
      })

      paymentLinks.push({
        splitPaymentId: splitPayment.id,
        playerName: splitPayment.playerName,
        playerPhone: splitPayment.playerPhone,
        amount: splitPayment.amount,
        paymentLink
      })

      // Send WhatsApp notification if phone number is provided
      if (splitPayment.playerPhone) {
        // Use new WhatsApp service instead of old notification system
        try {
          await WhatsAppService.sendPaymentPendingNotifications(booking.id)
        } catch (error) {
          console.error('Error with new WhatsApp service, falling back:', error)
          await sendSplitPaymentNotification(splitPayment.id, paymentLink)
        }
      }

    } catch (error) {
      console.error(`Error generating payment link for split payment ${splitPayment.id}:`, error)
    }
  }

  return paymentLinks
}

export async function processSplitPaymentCompletion(splitPaymentId: string) {
  const splitPayment = await prisma.splitPayment.findUnique({
    where: { id: splitPaymentId },
    include: {
      Booking: {
        include: {
          SplitPayment: true,
          Court: true,
          Club: true
        }
      },
      BookingGroup: {
        include: {
          splitPayments: true,
          bookings: {
            include: {
              Court: true
            }
          },
          Club: true
        }
      }
    }
  })

  if (!splitPayment) {
    throw new Error('Pago dividido no encontrado')
  }

  // Update split payment status
  await prisma.splitPayment.update({
    where: { id: splitPaymentId },
    data: {
      status: 'completed',
      completedAt: new Date()}
  })

  // Determine if it's a booking or bookingGroup
  const isGroup = !!splitPayment.BookingGroup
  const bookingData = isGroup ? splitPayment.BookingGroup : splitPayment.Booking
  const clubId = bookingData.clubId
  const courtInfo = isGroup 
    ? splitPayment.BookingGroup.bookings.map(b => b.Court.name).join(', ')
    : splitPayment.Booking.Court.name

  // Create transaction in finance module for split payment
  await prisma.transaction.create({
    data: {
      id: nanoid(),
      clubId: clubId,
      type: 'INCOME',
      category: 'BOOKING',
      amount: splitPayment.amount,
      currency: 'MXN',
      description: `Pago dividido - ${splitPayment.playerName}`,
      reference: `split-${splitPaymentId}`,
      bookingId: splitPayment.bookingId, // Solo usar bookingId, que es el campo vÃ¡lido en Transaction
      date: new Date(),
      createdBy: clubId, // Using clubId as we don't have user context
      notes: `Pago dividido (${splitPayment.playerName}) para reserva del ${bookingData.date.toLocaleDateString('es-MX')} a las ${bookingData.startTime}`,
      createdAt: new Date()}
  })

  // Trigger WhatsApp payment completion notification
  try {
    await onPaymentCompleted(splitPaymentId)
  } catch (error) {
    console.error('Error sending payment completion WhatsApp notification:', error)
  }

  // Check if all split payments are completed
  const allSplitPayments = isGroup 
    ? splitPayment.BookingGroup.splitPayments 
    : splitPayment.Booking.SplitPayment
  const completedPayments = allSplitPayments.filter(sp => 
    sp.status === 'completed' || sp.id === splitPaymentId
  ).length

  const isFullyPaid = completedPayments === bookingData.splitPaymentCount

  // Update booking or bookingGroup payment status if fully paid
  if (isFullyPaid) {
    if (isGroup) {
      await prisma.bookingGroup.update({
        where: { id: splitPayment.bookingGroupId },
        data: {
          paymentStatus: 'completed',
          status: 'CONFIRMED'}
      })
    } else {
      await prisma.booking.update({
        where: { id: splitPayment.bookingId },
        data: {
          paymentStatus: 'completed',
          status: 'CONFIRMED'}
      })
    }

    // Send confirmation notification to main player using new WhatsApp service
    try {
      const entityId = isGroup ? splitPayment.bookingGroupId : splitPayment.bookingId
      await WhatsAppService.sendBookingConfirmation(entityId)
    } catch (error) {
      console.error('Error sending booking confirmation WhatsApp notification:', error)
      // Fallback to old notification system
      const entityId = isGroup ? splitPayment.bookingGroupId : splitPayment.bookingId
      await sendBookingConfirmationNotification(entityId)
    }
  }

  return {
    splitPayment,
    isFullyPaid,
    completedPayments,
    totalPayments: bookingData.splitPaymentCount
  }
}

export async function getSplitPaymentStatus(bookingId: string) {
  const booking = await prisma.booking.findUnique({
    where: { id: bookingId },
    include: {
      SplitPayment: {
        orderBy: { createdAt: 'asc' }
      },
      Court: true,
      Club: true
    }
  })

  if (!booking) {
    throw new Error('Reserva no encontrada')
  }

  const completedPayments = booking.SplitPayment.filter(sp => sp.status === 'completed').length
  const pendingPayments = booking.SplitPayment.filter(sp => sp.status === 'pending').length
  const failedPayments = booking.SplitPayment.filter(sp => sp.status === 'failed').length

  const completedAmount = booking.SplitPayment
    .filter(sp => sp.status === 'completed')
    .reduce((sum, sp) => sum + sp.amount, 0)
    
  const totalAmount = booking.price || 0
  const pendingAmount = totalAmount - completedAmount

  return {
    Booking: {
      id: booking.id,
      date: booking.date.toISOString(),
      startTime: booking.startTime,
      endTime: booking.endTime,
      club: {
        name: booking.Club.name
      },
      court: {
        name: booking.Court.name
      },
      playerName: booking.playerName,
      totalPlayers: booking.totalPlayers || 4,
      price: booking.price,
      paymentStatus: booking.paymentStatus
    },
    splitPayments: booking.SplitPayment.map(sp => ({
      id: sp.id,
      playerName: sp.playerName,
      playerEmail: sp.playerEmail,
      playerPhone: sp.playerPhone,
      amount: sp.amount,
      status: sp.status,
      completedAt: sp.completedAt?.toISOString(),
      stripePaymentIntentId: sp.stripePaymentIntentId,
      paymentLink: sp.paymentLink
    })),
    totalPayments: booking.splitPaymentCount,
    completedPayments,
    pendingPayments,
    totalAmount,
    completedAmount,
    pendingAmount
  }
}

export async function resendSplitPaymentNotification(splitPaymentId: string) {
  const splitPayment = await prisma.splitPayment.findUnique({
    where: { id: splitPaymentId },
    include: {
      Booking: {
        include: {
          Court: true,
          Club: true
        }
      }
    }
  })

  if (!splitPayment) {
    throw new Error('Pago dividido no encontrado')
  }

  if (splitPayment.status !== 'pending') {
    throw new Error('Este pago ya fue procesado')
  }

  // Generate new payment link
  const paymentLink = await generatePaymentLink({
    splitPaymentId: splitPayment.id,
    amount: splitPayment.amount,
    description: `Pago para reserva en ${splitPayment.Booking.Court.name} - ${splitPayment.Booking.Club.name}`,
    playerName: splitPayment.playerName,
    playerEmail: splitPayment.playerEmail,
    playerPhone: splitPayment.playerPhone,
    bookingId: splitPayment.Booking.id
  })

  // Send WhatsApp notification
  if (splitPayment.playerPhone) {
    await sendSplitPaymentNotification(splitPayment.id, paymentLink)
  }

  return { success: true, paymentLink }
}

// Helper function to send WhatsApp notification for split payment
async function sendSplitPaymentNotification(splitPaymentId: string, paymentLink: string) {
  const splitPayment = await prisma.splitPayment.findUnique({
    where: { id: splitPaymentId },
    include: {
      Booking: {
        include: {
          Court: true,
          Club: true
        }
      }
    }
  })

  if (!splitPayment || !splitPayment.playerPhone) {
    return
  }

  const message = `ð Â¡Hola ${splitPayment.playerName}!

Tu reserva en ${splitPayment.Booking.Club.name} estÃ¡ confirmada:
ð ${new Date(splitPayment.Booking.date).toLocaleDateString('es-MX')}
ð ${splitPayment.Booking.startTime} - ${splitPayment.Booking.endTime}
ðï¸ ${splitPayment.Booking.Court.name}

ð° Completa tu pago de $${(splitPayment.amount / 100).toFixed(2)} MXN:
${paymentLink}

Â¡Nos vemos en la cancha! ð¾`

  try {
    await sendWhatsAppNotification(
      splitPayment.playerPhone,
      message,
      'split_payment_reminder'
    )

    // Create notification record
    await prisma.notification.create({
      data: {
        bookingId: splitPayment.bookingId,
        splitPaymentId: splitPayment.id,
        type: 'WHATSAPP',
        template: 'split_payment_reminder',
        recipient: splitPayment.playerPhone,
        status: 'sent'
      }
    })
  } catch (error) {
    console.error('Error sending split payment notification:', error)
    
    // Create failed notification record
    await prisma.notification.create({
      data: {
        bookingId: splitPayment.bookingId,
        splitPaymentId: splitPayment.id,
        type: 'WHATSAPP',
        template: 'split_payment_reminder',
        recipient: splitPayment.playerPhone,
        status: 'failed',
        errorMessage: error instanceof Error ? error.message : 'Unknown error'
      }
    })
  }
}

// Helper function to send booking confirmation
async function sendBookingConfirmationNotification(bookingId: string) {
  const booking = await prisma.booking.findUnique({
    where: { id: bookingId },
    include: {
      Court: true,
      Club: true
    }
  })

  if (!booking || !booking.playerPhone) {
    return
  }

  const message = `â Â¡Pago completo! Tu reserva estÃ¡ confirmada

ð ${booking.Club.name}
ð ${new Date(booking.date).toLocaleDateString('es-MX')}
ð ${booking.startTime} - ${booking.endTime}
ðï¸ ${booking.Court.name}

ð° Pago completado: $${(booking.price / 100).toFixed(2)} MXN

Â¡Te esperamos! ð¾`

  try {
    await sendWhatsAppNotification(
      booking.playerPhone,
      message,
      'booking_confirmation'
    )

    await prisma.notification.create({
      data: {
        bookingId: booking.id,
        type: 'WHATSAPP',
        template: 'booking_confirmation',
        recipient: booking.playerPhone,
        status: 'sent'
      }
    })
  } catch (error) {
    console.error('Error sending booking confirmation:', error)
  }
}